------- FILE src/giga-ass.asm LEVEL 1 PASS 2
      1  a000 ????						;****************************
      2  a000 ????						;  Giga-Ass by Thomas Dachsel
      3  a000 ????						;
      4  a000 ????						;  Disassembled by Ralph Moeritz
      5  a000 ????						;  using JC64dis  by Ice Team
      6  a000 ????						;
      7  a000 ????						;  https://github.com/ice00/jc64
      8  a000 ????						;
      9  a000 ????						;****************************
     10  a000 ????				      processor	6502
     11  a000 ????
     12  8000					      .org	$8000
     13  8000
     14  8000		       9d 84		      .word.w	RESET
     15  8002		       ae 9f		      .word.w	NMI
     16  8004		       c3 c2 cd 38*	      .byte.b	$C3, $C2, $CD, "80"	; CBM80
     17  8009		       aa 84		      .word.w	INIT
     18  800b				   T_MNEMONIC
     19  800b		       43 50 58 43*	      .byte.b	"CPX", "CPY", "LDX", "LDY"
     20  8017		       43 4d 50 41*	      .byte.b	"CMP", "ADC", "AND", "DEC"
     21  8023		       45 4f 52 49*	      .byte.b	"EOR", "INC", "LDA", "ASL"
     22  802f		       42 49 54 4c*	      .byte.b	"BIT", "LSR", "ORA", "ROL"
     23  803b		       52 4f 52 53*	      .byte.b	"ROR", "SBC", "STA", "STX"
     24  8047		       53 54 59 4a*	      .byte.b	"STY", "JMP", "JSR", "TXA"
     25  8053		       54 41 58 54*	      .byte.b	"TAX", "TYA", "TAY", "TSX"
     26  805f		       54 58 53 50*	      .byte.b	"TXS", "PHP", "PLP", "PHA"
     27  806b		       50 4c 41 42*	      .byte.b	"PLA", "BRK", "RTI", "RTS"
     28  8077		       4e 4f 50 43*	      .byte.b	"NOP", "CLC", "SEC", "CLI"
     29  8083		       53 45 49 43*	      .byte.b	"SEI", "CLV", "CLD", "SED"
     30  808f		       44 45 59 49*	      .byte.b	"DEY", "INY", "DEX", "INX"
     31  809b		       42 50 4c 42*	      .byte.b	"BPL", "BMI", "BVC", "BVS"
     32  80a7		       42 43 43 42*	      .byte.b	"BCC", "BCS", "BNE", "BEQ"
     33  80b3				   T_OPCODES
     34  80b3		       e4 c4 a6 a4	      .byte.b	$E4, $C4, $A6, $A4
     35  80b7		       c5 65 25 c6	      .byte.b	$C5, $65, $25, $C6
     36  80bb		       45 e6 a5 06	      .byte.b	$45, $E6, $A5, $06
     37  80bf		       24 46 05 26	      .byte.b	$24, $46, $05, $26
     38  80c3		       66 e5 85 86	      .byte.b	$66, $E5, $85, $86
     39  80c7		       84 4c 20 8a	      .byte.b	$84, $4C, $20, $8A
     40  80cb		       aa 98 a8 ba	      .byte.b	$AA, $98, $A8, $BA
     41  80cf		       9a 08 28 48	      .byte.b	$9A, $08, $28, $48
     42  80d3		       68 00 40 60	      .byte.b	$68, $00, $40, $60
     43  80d7		       ea 18 38 58	      .byte.b	$EA, $18, $38, $58
     44  80db		       78 b8 d8 f8	      .byte.b	$78, $B8, $D8, $F8
     45  80df		       88 c8 ca e8	      .byte.b	$88, $C8, $CA, $E8
     46  80e3		       10 30 50 70	      .byte.b	$10, $30, $50, $70
     47  80e7		       90 b0 d0 f0	      .byte.b	$90, $B0, $D0, $F0
     48  80eb				   T_MNEMXFORM1
     49  80eb		       40 40 54 68*	      .byte.b	$40, $40, $54, $68, $7B, $7B, $7B, $28
     50  80f3		       7b 28 7b a8*	      .byte.b	$7B, $28, $7B, $A8, $00, $A8, $7B, $A8
     51  80fb		       a8 7b 3b 04*	      .byte.b	$A8, $7B, $3B, $04, $08
     52  8100				   T_MNEMXFORM2
     53  8100		       0c fc 10 10*	      .byte.b	$0C, $FC, $10, $10, $14, $18, $04, $04
     54  8108				   T_MNEMXFORM3
     55  8108		       02 02 02 02*	      .byte.b	$02, $02, $02, $02, $03, $03, $02
     56  810f				   T_MNEMXFORM4
     57  810f		       01		      .byte.b	$01
     58  8110				   T_BINARYOPS
     59  8110		       2b 2d 2a 2f*	      .byte.b	$2B, $2D, $2A, $2F, $5E
     60  8115		       41 4f 3e 3d*	      .byte.b	$41, $4F, $3E, $3D, $3C
     61  811a				   T_ERRMSG1
     62  811a		       54 45 52 4d*	      .byte.b	"TERM EVALUATIO", $CE
     63  8129				   T_ERRMSG2
     64  8129		       54 4f 4b 45*	      .byte.b	"TOKE", $CE
     65  812e				   T_ERRMSG3
     66  812e		       49 4e 44 45*	      .byte.b	"INDEXIN", $C7
     67  8136				   T_ERRMSG4
     68  8136		       4c 49 4e 45*	      .byte.b	"LINE FORMA", $D4
     69  8141				   T_ERRMSG5
     70  8141		       41 44 44 52*	      .byte.b	"ADDRESSIN", $C7
     71  814b				   T_ERRMSG6
     72  814b		       42 52 41 4e*	      .byte.b	"BRANC", $C8
     73  8151				   T_ERRMSG7
     74  8151		       55 4e 44 45*	      .byte.b	"UNDEFINED SYMBO", $CC
     75  8161				   T_ERRMSG8
     76  8161		       49 4c 4c 45*	      .byte.b	"ILLEGAL SYMBO", $CC
     77  816f				   T_ERRMSG9
     78  816f		       53 59 4d 42*	      .byte.b	"SYMBOL TABLE FUL", $CC
     79  8180				   T_ERRMSG10
     80  8180		       4e 4f 20 4d*	      .byte.b	"NO MACRO TO CLOS", $C5
     81  8191				   T_ERRMSG11
     82  8191		       44 4f 55 42*	      .byte.b	"DOUBLE LABE", $CC
     83  819d				   T_ERRMSG12
     84  819d		       50 41 52 41*	      .byte.b	"PARAMETE", $D2
     85  81a6				   T_ERRMSG13
     86  81a6		       52 45 54 55*	      .byte.b	"RETUR", $CE
     87  81ac				   T_ERRMSG14
     88  81ac		       55 4e 44 45*	      .byte.b	"UNDEFINED MACR", $CF
     89  81bb				   T_ERRMSG15
     90  81bb		       4d 41 43 52*	      .byte.b	"MACRO NOT CLOSE", $C4
     91  81cb				   T_ERRMSG16
     92  81cb		       49 46 2d 45*	      .byte.b	"IF-ELSE-ENDI", $C6
     93  81d8				   T_ERRMSG17
     94  81d8		       2e 42 41 53*	      .byte.b	".BASE MISSIN", $C7
     95  81e5				   T_EMSGADRLO
     96  81e5		       1a		      .byte.b	#<T_ERRMSG1
     97  81e6				   T_EMSGADRHI
     98  81e6		       81		      .byte.b	#>T_ERRMSG1
     99  81e7		       29 81 2e 81*	      .word.w	T_ERRMSG2, T_ERRMSG3, T_ERRMSG4, T_ERRMSG5
    100  81ef		       4b 81 51 81*	      .word.w	T_ERRMSG6, T_ERRMSG7, T_ERRMSG8, T_ERRMSG9
    101  81f7		       80 81 91 81*	      .word.w	T_ERRMSG10, T_ERRMSG11, T_ERRMSG12, T_ERRMSG13
    102  81ff		       ac 81 bb 81*	      .word.w	T_ERRMSG14, T_ERRMSG15, T_ERRMSG16, T_ERRMSG17
    103  8207				   T_PSEUDOOPS
    104  8207		       43 41 4c cc	      .byte.b	"CAL", $CC
    105  820b		       4d 41 43 52*	      .byte.b	"MACR", $CF
    106  8210		       45 4e 44 4d*	      .byte.b	"ENDMACR", $CF
    107  8218		       47 4c 4f 42*	      .byte.b	"GLOBA", $CC
    108  821e		       45 51 55 41*	      .byte.b	"EQUAT", $C5
    109  8224		       42 59 54 c5	      .byte.b	"BYT", $C5
    110  8228		       57 4f 52 c4	      .byte.b	"WOR", $C4
    111  822c		       44 d3		      .byte.b	"D", $D3
    112  822e		       54 45 58 d4	      .byte.b	"TEX", $D4
    113  8232		       4f 42 4a 45*	      .byte.b	"OBJEC", $D4
    114  8238		       42 41 53 c5	      .byte.b	"BAS", $C5
    115  823c		       43 4f 44 c5	      .byte.b	"COD", $C5
    116  8240		       4f ce		      .byte.b	"O", $CE
    117  8242		       47 4f 54 cf	      .byte.b	"GOT", $CF
    118  8246		       49 c6		      .byte.b	"I", $C6
    119  8248		       45 4c 53 c5	      .byte.b	"ELS", $C5
    120  824c		       45 4e 44 49*	      .byte.b	"ENDI", $C6
    121  8251		       53 59 4d 42*	      .byte.b	"SYMBOL", $D3
    122  8258		       4c 49 53 54*	      .byte.b	"LISTIN", $C7
    123  825f		       45 4e c4 	      .byte.b	"EN", $C4
    124  8262		       53 54 4f d0	      .byte.b	"STO", $D0
    125  8266		       50 41 47 c5	      .byte.b	"PAG", $C5
    126  826a		       4e 4f 43 4f*	      .byte.b	"NOCOD", $C5
    127  8270		       53 54 41 52*	      .byte.b	"STAR", $D4
    128  8275		       4e 4f 45 58*	      .byte.b	"NOEX", $D0
    129  827a				   V_PSEUDOOPS
    130  827a		       79 90 53 90*	      .word.w	$9079, $9053, $9152, $8E09
    131  8282		       18 8e 9a 8e*	      .word.w	$8E18, $8E9A, $8F2E, $8F9E
    132  828a		       c0 8e e0 8f*	      .word.w	$8EC0, $8FE0, $8E69, $8E78
    133  8292		       7a 91 93 91*	      .word.w	$917A, $9193, $9199, $91A6
    134  829a		       cc 91 21 94*	      .word.w	$91CC, $9421, $9331, $903E
    135  82a2		       6b 94 69 93*	      .word.w	$946B, $9369, $949E, $94A5
    136  82aa		       b1 94		      .word.w	$94B1
    137  82ac				   T_EDICMD
    138  82ac		       4d 56 4c 53*	      .byte.b	"MVLSADNETPFRI@QOBGCXY"
    139  82c1				   V_EDICMD
    140  82c1		       5a 99 8f 99*	      .word.w	$995A, $998F, $9992, $999F
    141  82c9		       4e 97 d7 97*	      .word.w	$974E, $97D7, $98F2, $9873
    142  82d1		       07 9f 8d 98*	      .word.w	$9F07, $988D, $99A8, $9B32
    143  82d9		       49 9c bd 9c*	      .word.w	$9C49, $9CBD, $9F23, $9E12
    144  82e1		       2c 9e ec 9e*	      .word.w	$9E2C, $9EEC, $84A9, $8BFD
    145  82e9		       09 9d		      .word.w	$9D09
    146  82eb				   T_STARTMSG
    147  82eb		       93 0d		      .byte.b	$93, $0D
    148  82ed		       20 20 2a 2a*	      .byte.b	"  *** GIGA-ASS (C) MARKT & TECHNIK ***", $0D, $0D
    149  8315		       20 20 42 59*	      .byte.b	"  BY THOMAS DACHSEL	", $00, $0D
    150  832d		       41 53 53 45*	      .byte.b	"ASSEMBLY BEGINS", $0D, $0D, $00, $0D
    151  8340		       45 4e 44 20*	      .byte.b	"END OF ASSEMBLY", $0D, $00
    152  8351		       50 41 47 45*	      .byte.b	"PAGE ", $00
    153  8357		       3a 20 4c 49*	      .byte.b	": LINE ", $00
    154  835f		       50 41 53 53*	      .byte.b	"PASS ", $00, $0D
    155  8366		       41 53 53 45*	      .byte.b	"ASSEMBLY TIME USED", $00
    156  8379		       4f 42 4a 45*	      .byte.b	"OBJECT RANGE $", $00
    157  8388		       20 2d 20 24*	      .byte.b	" - $", $00
    158  838d		       4c 49 4e 45*	      .byte.b	"LINE #  LOC	 CODE	    LINE", $00, $0D
    159  83ad		       53 59 4d 42*	      .byte.b	"SYMBOL TABLE:", $0D, $00, $0D
    160  83bd		       41 52 45 20*	      .byte.b	"ARE YOU SURE? ", $00
    161  83cc		       20 42 59 54*	      .byte.b	" BYTES USED	   ", $00, $0D
    162  83df		       44 49 53 4b*	      .byte.b	"DISK ERROR: ", $00
    163  83ec		       47 4c 4f 42*	      .byte.b	"GLOBAL", $00
    164  83f3		       20 4d 41 43*	      .byte.b	" MACRO", $00, $0D
    165  83fb		       53 4f 55 52*	      .byte.b	"SOURCE TEXT  USES ", $00
    166  840e		       4f 42 4a 45*	      .byte.b	"OBJECT CODE  USES ", $00
    167  8421		       53 59 4d 42*	      .byte.b	"SYMBOL TABLE USES ", $00
    168  8434		       20 42 59 54*	      .byte.b	" BYTES", $00, $0D
    169  843c		       41 56 41 49*	      .byte.b	"AVAILABLE MEMORY: $", $00, $0D
    170  8451		       53 4f 55 52*	      .byte.b	"SOURCE TEXT USES: $", $00
    171  8465		       20 4b 29 0d*	      .byte.b	" K)", $0D, $00, $0D
    172  846b		       3c 53 50 41*	      .byte.b	"<SPACE> FOR .START OR <RUN/STOP>", $00, $0D
    173  848d		       47 49 47 41*	      .byte.b	"GIGA-ASS READY", $0D, $00
    174  849d				   RESET
    175  849d		       78		      sei
    176  849e		       20 a3 fd 	      jsr	$FDA3
    177  84a1		       20 50 fd 	      jsr	$FD50	; Routine RAMTAS of KERNAL
    178  84a4		       20 15 fd 	      jsr	$FD15	; Routine RESTOR of KERNAL
    179  84a7				   W84A7
    180  84a7		       20 5b ff 	      jsr	$FF5B	; Routine CINT of KERNAL
    181  84aa				   INIT
    182  84aa		       78		      sei
    183  84ab		       a9 00		      lda	#$00
    184  84ad		       a2 80		      ldx	#$80
    185  84af		       86 23		      stx	$23	; Utility programs pointers area
    186  84b1		       85 22		      sta	$22	; Utility programs pointers area
    187  84b3		       a0 00		      ldy	#$00
    188  84b5				   W84B5
    189  84b5		       b1 22		      lda	($22),y	; Utility programs pointers area
    190  84b7		       91 22		      sta	($22),y	; Utility programs pointers area
    191  84b9		       c8		      iny
    192  84ba		       d0 f9		      bne	W84B5
    193  84bc		       e6 23		      inc	$23	; Utility programs pointers area
    194  84be		       a6 23		      ldx	$23	; Utility programs pointers area
    195  84c0		       e0 a0		      cpx	#$A0
    196  84c2		       90 f1		      bcc	W84B5
    197  84c4		       a9 71		      lda	#$71
    198  84c6		       a2 9f		      ldx	#$9F
    199  84c8				   W84C8
    200  84c8		       8e 15 03 	      stx	$0315	; Vector: Hardware Interrupt (IRQ)
    201  84cb		       8d 14 03 	      sta	$0314	; Vector: Hardware Interrupt (IRQ)
    202  84ce		       58		      cli
    203  84cf		       a9 00		      lda	#$00
    204  84d1		       a2 80		      ldx	#$80
    205  84d3		       8e 84 02 	      stx	$0284	; Pointer: Memory top for  Operative System
    206  84d6		       8d 83 02 	      sta	$0283	; Pointer: Memory top for  Operative System
    207  84d9		       20 53 e4 	      jsr	$E453	; Routine: Set BASIC vectors (case 0x300..case 0x309)
    208  84dc		       20 bf e3 	      jsr	$E3BF	; Routine: Set USR instruction and memory for BASIC
    209  84df		       a9 44		      lda	#$44
    210  84e1		       a2 85		      ldx	#$85
    211  84e3		       8e 01 03 	      stx	$0301	; Vector: Write BASIC error messages
    212  84e6		       8d 00 03 	      sta	$0300	; Vector: Write BASIC error messages
    213  84e9		       a9 bf		      lda	#$BF
    214  84eb		       a2 94		      ldx	#$94
    215  84ed		       8e 03 03 	      stx	$0303	; Vector: BASIC start up
    216  84f0		       8d 02 03 	      sta	$0302	; Vector: BASIC start up
    217  84f3		       a9 d2		      lda	#$D2
    218  84f5		       a2 8b		      ldx	#$8B
    219  84f7		       8e 09 03 	      stx	$0309	; Vector: BASIC chars sending
    220  84fa		       8d 08 03 	      sta	$0308	; Vector: BASIC chars sending
    221  84fd		       a9 c1		      lda	#$C1
    222  84ff		       a2 85		      ldx	#$85
    223  8501		       8e 0b 03 	      stx	$030B	; Vector: BASIC "token" valutation
    224  8504		       8d 0a 03 	      sta	$030A	; Vector: BASIC "token" valutation
    225  8507		       a9 0a		      lda	#$0A
    226  8509		       8d 3e 03 	      sta	$033E	; Tape I/O buffer
    227  850c		       a9 18		      lda	#$18
    228  850e		       8d 3f 03 	      sta	$033F	; Tape I/O buffer
    229  8511		       a9 ff		      lda	#$FF
    230  8513		       8d 60 03 	      sta	$0360	; Tape I/O buffer
    231  8516		       8d 70 03 	      sta	$0370	; Tape I/O buffer
    232  8519		       a9 eb		      lda	#$EB
    233  851b		       a0 82		      ldy	#$82
    234  851d		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
    235  8520		       a5 37		      lda	$37	; Pointer: BASIC ending memory
    236  8522		       38		      sec
    237  8523		       e5 2b		      sbc	$2B	; Pointer: BASIC starting programs
    238  8525		       aa		      tax
    239  8526		       a5 38		      lda	$38	; Pointer: BASIC ending memory
    240  8528		       e5 2c		      sbc	$2C	; Pointer: BASIC starting programs
    241  852a		       20 cd bd 	      jsr	$BDCD	; Routine: Write (AX) integer correspondenting string
    242  852d		       a9 66		      lda	#$66
    243  852f		       a0 e4		      ldy	#$E4
    244  8531		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
    245  8534		       20 44 a6 	      jsr	$A644	; BASIC ROM
    246  8537				   W8537
    247  8537		       a9 8c		      lda	#$8C
    248  8539		       a0 84		      ldy	#$84
    249  853b		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
    250  853e				   W853E
    251  853e		       20 ba 94 	      jsr	W94BA
    252  8541		       4c 7b a4 	      jmp	$A47B	; BASIC ROM
    253  8544
    254  8544		       a5 02		      lda	$02
    255  8546		       c9 02		      cmp	#$02
    256  8548		       d0 0d		      bne	W8557
    257  854a				   W854A
    258  854a		       ad 3b 03 	      lda	$033B	; Not used
    259  854d		       ac 3c 03 	      ldy	$033C	; Tape I/O buffer
    260  8550		       85 2b		      sta	$2B	; Pointer: BASIC starting programs
    261  8552		       84 2c		      sty	$2C	; Pointer: BASIC starting programs
    262  8554		       8a		      txa
    263  8555		       f0 e7		      beq	W853E
    264  8557				   W8557
    265  8557		       8a		      txa
    266  8558		       30 dd		      bmi	W8537
    267  855a		       0a		      asl
    268  855b		       aa		      tax
    269  855c		       bd 26 a3 	      lda	$A326,x	; BASIC ROM
    270  855f		       85 22		      sta	$22	; Utility programs pointers area
    271  8561		       bd 27 a3 	      lda	$A327,x	; BASIC ROM
    272  8564		       85 23		      sta	$23	; Utility programs pointers area
    273  8566		       d0 0c		      bne	W8574
    274  8568				   W8568
    275  8568		       0a		      asl
    276  8569		       aa		      tax
    277  856a		       bd e5 81 	      lda	T_EMSGADRLO,x
    278  856d		       85 22		      sta	$22	; Utility programs pointers area
    279  856f		       bd e6 81 	      lda	T_EMSGADRHI,x
    280  8572		       85 23		      sta	$23	; Utility programs pointers area
    281  8574				   W8574
    282  8574		       a9 0e		      lda	#$0E
    283  8576		       20 c3 ff 	      jsr	$FFC3	; Routine: Close a specified logical file
    284  8579		       20 cc ff 	      jsr	$FFCC	; Routine: Close the input and output channel
    285  857c		       a9 00		      lda	#$00
    286  857e		       85 13		      sta	$13	; Flag: INPUT request
    287  8580		       20 d7 aa 	      jsr	$AAD7	; Routine: Write return effect and/or advancement
    288  8583		       20 45 ab 	      jsr	$AB45	; Routine: Introduces '?' in canal+ errors and char
    289  8586		       a0 00		      ldy	#$00
    290  8588				   W8588
    291  8588		       b1 22		      lda	($22),y	; Utility programs pointers area
    292  858a		       08		      php
    293  858b		       29 7f		      and	#$7F
    294  858d		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
    295  8590		       c8		      iny
    296  8591		       28		      plp
    297  8592		       10 f4		      bpl	W8588
    298  8594		       20 7a a6 	      jsr	$A67A	; BASIC ROM
    299  8597		       a9 6a		      lda	#$6A
    300  8599		       a0 a3		      ldy	#$A3
    301  859b		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
    302  859e		       a4 3a		      ldy	$3A	; BASIC current line number
    303  85a0		       c8		      iny
    304  85a1		       f0 94		      beq	W8537
    305  85a3		       20 c2 bd 	      jsr	$BDC2	; Routine: Write 'IN' + basic line
    306  85a6		       20 d7 aa 	      jsr	$AAD7	; Routine: Write return effect and/or advancement
    307  85a9		       ad fe 02 	      lda	$02FE	; Not used
    308  85ac		       ae ff 02 	      ldx	$02FF	; Not used
    309  85af		       85 5f		      sta	$5F	; Scratch for numeric operation
    310  85b1		       86 60		      stx	$60	; Scratch for numeric operation
    311  85b3		       20 44 9a 	      jsr	W9A44
    312  85b6		       20 d7 aa 	      jsr	$AAD7	; Routine: Write return effect and/or advancement
    313  85b9		       a9 91		      lda	#$91
    314  85bb		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
    315  85be		       4c 7b a4 	      jmp	$A47B	; BASIC ROM
    316  85c1
    317  85c1		       a9 00		      lda	#$00
    318  85c3		       85 0d		      sta	$0D	; Data type: case 0xFF=Stringa, case 0x00=Numerico
    319  85c5				   W85C5
    320  85c5		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
    321  85c8		       b0 06		      bcs	W85D0
    322  85ca		       20 f3 bc 	      jsr	$BCF3	; BASIC ROM
    323  85cd		       4c 5d 86 	      jmp	W865D
    324  85d0
    325  85d0				   W85D0
    326  85d0		       c9 2a		      cmp	#$2A
    327  85d2		       d0 0d		      bne	W85E1
    328  85d4		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
    329  85d7		       a4 fb		      ldy	$FB	; Free 0 page for user program
    330  85d9		       a5 fc		      lda	$FC
    331  85db				   W85DB
    332  85db		       20 a8 88 	      jsr	W88A8
    333  85de		       4c 5d 86 	      jmp	W865D
    334  85e1
    335  85e1				   W85E1
    336  85e1		       20 13 b1 	      jsr	$B113	; Routine: Verify if the char in A is in 'A'..'Z'
    337  85e4		       90 06		      bcc	W85EC
    338  85e6		       20 b2 88 	      jsr	INSYMTBL
    339  85e9		       4c 5d 86 	      jmp	W865D
    340  85ec
    341  85ec				   W85EC
    342  85ec		       20 79 00 	      jsr	$0079	; CHRGET (Introduce a char) subroutine
    343  85ef		       10 03		      bpl	W85F4
    344  85f1		       4c b1 ae 	      jmp	$AEB1	; BASIC ROM
    345  85f4
    346  85f4				   W85F4
    347  85f4		       c9 25		      cmp	#$25
    348  85f6		       f0 2b		      beq	W8623
    349  85f8		       c9 24		      cmp	#$24
    350  85fa		       f0 24		      beq	W8620
    351  85fc		       c9 2d		      cmp	#$2D
    352  85fe		       f0 1a		      beq	W861A
    353  8600		       c9 22		      cmp	#$22
    354  8602		       f0 19		      beq	W861D
    355  8604		       c9 21		      cmp	#$21
    356  8606		       f0 3f		      beq	W8647
    357  8608		       c9 2b		      cmp	#$2B
    358  860a		       f0 b9		      beq	W85C5
    359  860c		       c9 3e		      cmp	#$3E
    360  860e		       f0 7e		      beq	W868E
    361  8610		       c9 3c		      cmp	#$3C
    362  8612		       f0 7a		      beq	W868E
    363  8614		       20 f1 ae 	      jsr	$AEF1	; Routine: Evaluates expression within brackets
    364  8617		       4c 5d 86 	      jmp	W865D
    365  861a
    366  861a				   W861A
    367  861a		       4c 0d af 	      jmp	$AF0D	; Routine: Calculates NOT
    368  861d
    369  861d				   W861D
    370  861d		       4c bd ae 	      jmp	$AEBD	; BASIC ROM
    371  8620
    372  8620				   W8620
    373  8620		       4c 70 88 	      jmp	W8870
    374  8623
    375  8623				   W8623
    376  8623		       a9 00		      lda	#$00
    377  8625		       85 3c		      sta	$3C	; BASIC precedent line number
    378  8627		       85 3d		      sta	$3D	; Pointer: BASIC instruction for CONT
    379  8629				   W8629
    380  8629		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
    381  862c		       aa		      tax
    382  862d		       d0 07		      bne	W8636
    383  862f				   W862F
    384  862f		       a4 3c		      ldy	$3C	; BASIC precedent line number
    385  8631		       a5 3d		      lda	$3D	; Pointer: BASIC instruction for CONT
    386  8633		       4c db 85 	      jmp	W85DB
    387  8636
    388  8636				   W8636
    389  8636		       b0 f7		      bcs	W862F
    390  8638		       29 fe		      and	#$FE
    391  863a		       c9 30		      cmp	#$30
    392  863c		       d0 1a		      bne	W8658
    393  863e		       8a		      txa
    394  863f		       4a		      lsr
    395  8640		       26 3c		      rol	$3C	; BASIC precedent line number
    396  8642		       26 3d		      rol	$3D	; Pointer: BASIC instruction for CONT
    397  8644		       4c 29 86 	      jmp	W8629
    398  8647
    399  8647				   W8647
    400  8647		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
    401  864a		       c9 4e		      cmp	#$4E
    402  864c		       d0 0a		      bne	W8658
    403  864e		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
    404  8651		       c9 21		      cmp	#$21
    405  8653		       d0 03		      bne	W8658
    406  8655		       4c d0 ae 	      jmp	$AED0	; BASIC ROM
    407  8658
    408  8658				   W8658
    409  8658		       a9 00		      lda	#$00
    410  865a		       4c 68 85 	      jmp	W8568
    411  865d
    412  865d				   W865D
    413  865d		       20 79 00 	      jsr	$0079	; CHRGET (Introduce a char) subroutine
    414  8660		       aa		      tax
    415  8661		       10 01		      bpl	W8664
    416  8663		       60		      rts
    417  8664
    418  8664				   W8664
    419  8664		       68		      pla
    420  8665		       68		      pla
    421  8666		       8a		      txa
    422  8667		       c9 21		      cmp	#$21
    423  8669		       d0 0c		      bne	W8677
    424  866b		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
    425  866e		       aa		      tax
    426  866f		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
    427  8672		       c9 21		      cmp	#$21
    428  8674		       d0 e2		      bne	W8658
    429  8676		       8a		      txa
    430  8677				   W8677
    431  8677		       a2 0a		      ldx	#$0A
    432  8679				   W8679
    433  8679		       dd 0f 81 	      cmp	T_MNEMXFORM4,x
    434  867c		       f0 05		      beq	W8683
    435  867e		       ca		      dex
    436  867f		       d0 f8		      bne	W8679
    437  8681		       f0 04		      beq	W8687
    438  8683				   W8683
    439  8683		       8a		      txa
    440  8684		       18		      clc
    441  8685		       69 a9		      adc	#$A9
    442  8687				   W8687
    443  8687		       a2 00		      ldx	#$00
    444  8689		       86 4d		      stx	$4D	; Accumulator for the simbols compare
    445  868b		       4c bb ad 	      jmp	$ADBB	; BASIC ROM
    446  868e
    447  868e				   W868E
    448  868e		       48		      pha
    449  868f		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
    450  8692		       20 f1 ae 	      jsr	$AEF1	; Routine: Evaluates expression within brackets
    451  8695		       20 f7 b7 	      jsr	$B7F7	; Routine: Converts FAC in 2-byte integer to $14, $15 and YA
    452  8698		       aa		      tax
    453  8699		       68		      pla
    454  869a		       c9 3c		      cmp	#$3C
    455  869c		       f0 02		      beq	W86A0
    456  869e		       8a		      txa
    457  869f		       a8		      tay
    458  86a0				   W86A0
    459  86a0		       20 a2 b3 	      jsr	$B3A2	; Routine: Convert the byte in Y to Floating Point
    460  86a3		       4c 5d 86 	      jmp	W865D
    461  86a6
    462  86a6				   W86A6
    463  86a6		       a9 00		      lda	#$00
    464  86a8		       85 3e		      sta	$3E	; Pointer: BASIC instruction for CONT
    465  86aa		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
    466  86ad		       c9 23		      cmp	#$23
    467  86af		       f0 6f		      beq	W8720
    468  86b1		       c9 28		      cmp	#$28
    469  86b3		       f0 20		      beq	W86D5
    470  86b5		       c9 26		      cmp	#$26
    471  86b7		       d0 71		      bne	W872A
    472  86b9		       20 4c 92 	      jsr	W924C
    473  86bc		       a5 3d		      lda	$3D	; Pointer: BASIC instruction for CONT
    474  86be		       d0 40		      bne	W8700
    475  86c0		       20 fd ae 	      jsr	$AEFD	; Routine: Verify if there's ',' in current char (Syntax)
    476  86c3		       c9 58		      cmp	#$58
    477  86c5		       f0 08		      beq	W86CF
    478  86c7		       a9 59		      lda	#$59
    479  86c9		       20 ff ae 	      jsr	$AEFF	; Routine: Verify if A is in current char (Syntax)
    480  86cc		       4c 73 87 	      jmp	W8773
    481  86cf
    482  86cf				   W86CF
    483  86cf		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
    484  86d2		       4c 10 87 	      jmp	W8710
    485  86d5
    486  86d5				   W86D5
    487  86d5		       20 4c 92 	      jsr	W924C
    488  86d8		       a5 3d		      lda	$3D	; Pointer: BASIC instruction for CONT
    489  86da		       d0 14		      bne	W86F0
    490  86dc		       20 79 00 	      jsr	$0079	; CHRGET (Introduce a char) subroutine
    491  86df		       c9 2c		      cmp	#$2C
    492  86e1		       f0 22		      beq	W8705
    493  86e3		       c9 29		      cmp	#$29
    494  86e5		       d0 19		      bne	W8700
    495  86e7		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
    496  86ea		       c9 2c		      cmp	#$2C
    497  86ec		       f0 27		      beq	W8715
    498  86ee		       d0 03		      bne	W86F3
    499  86f0				   W86F0
    500  86f0		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
    501  86f3				   W86F3
    502  86f3		       a5 41		      lda	$41	; Pointer: DATA current element address
    503  86f5		       c9 15		      cmp	#$15
    504  86f7		       d0 07		      bne	W8700
    505  86f9		       a9 09		      lda	#$09
    506  86fb		       85 3e		      sta	$3E	; Pointer: BASIC instruction for CONT
    507  86fd		       4c 73 87 	      jmp	W8773
    508  8700
    509  8700				   W8700
    510  8700		       a9 04		      lda	#$04
    511  8702		       4c 68 85 	      jmp	W8568
    512  8705
    513  8705				   W8705
    514  8705		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
    515  8708		       a9 58		      lda	#$58
    516  870a		       20 ff ae 	      jsr	$AEFF	; Routine: Verify if A is in current char (Syntax)
    517  870d		       20 f7 ae 	      jsr	$AEF7	; Routine: Verify if there's ')' in current char (Syntax)
    518  8710				   W8710
    519  8710		       e6 3e		      inc	$3E	; Pointer: BASIC instruction for CONT
    520  8712		       4c 73 87 	      jmp	W8773
    521  8715
    522  8715				   W8715
    523  8715		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
    524  8718		       a9 59		      lda	#$59
    525  871a		       20 ff ae 	      jsr	$AEFF	; Routine: Verify if A is in current char (Syntax)
    526  871d		       4c 73 87 	      jmp	W8773
    527  8720
    528  8720				   W8720
    529  8720		       a9 06		      lda	#$06
    530  8722		       85 3e		      sta	$3E	; Pointer: BASIC instruction for CONT
    531  8724		       20 5a 92 	      jsr	W925A
    532  8727		       4c 73 87 	      jmp	W8773
    533  872a
    534  872a				   W872A
    535  872a		       a9 07		      lda	#$07
    536  872c		       85 3e		      sta	$3E	; Pointer: BASIC instruction for CONT
    537  872e		       20 79 00 	      jsr	$0079	; CHRGET (Introduce a char) subroutine
    538  8731		       f0 3b		      beq	W876E
    539  8733		       c9 3b		      cmp	#$3B
    540  8735		       f0 37		      beq	W876E
    541  8737		       a2 05		      ldx	#$05
    542  8739		       86 3e		      stx	$3E	; Pointer: BASIC instruction for CONT
    543  873b		       20 4f 92 	      jsr	W924F
    544  873e		       20 79 00 	      jsr	$0079	; CHRGET (Introduce a char) subroutine
    545  8741		       c9 2c		      cmp	#$2C
    546  8743		       d0 22		      bne	W8767
    547  8745		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
    548  8748		       aa		      tax
    549  8749		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
    550  874c		       8a		      txa
    551  874d		       c9 58		      cmp	#$58
    552  874f		       f0 0b		      beq	W875C
    553  8751		       c9 59		      cmp	#$59
    554  8753		       f0 05		      beq	W875A
    555  8755		       a9 02		      lda	#$02
    556  8757		       4c 68 85 	      jmp	W8568
    557  875a
    558  875a				   W875A
    559  875a		       c6 3e		      dec	$3E	; Pointer: BASIC instruction for CONT
    560  875c				   W875C
    561  875c		       a5 3d		      lda	$3D	; Pointer: BASIC instruction for CONT
    562  875e		       d0 13		      bne	W8773
    563  8760		       c6 3e		      dec	$3E	; Pointer: BASIC instruction for CONT
    564  8762		       c6 3e		      dec	$3E	; Pointer: BASIC instruction for CONT
    565  8764		       4c 73 87 	      jmp	W8773
    566  8767
    567  8767				   W8767
    568  8767		       a9 0a		      lda	#$0A
    569  8769		       85 3e		      sta	$3E	; Pointer: BASIC instruction for CONT
    570  876b		       4c 5c 87 	      jmp	W875C
    571  876e
    572  876e				   W876E
    573  876e		       a9 07		      lda	#$07
    574  8770		       85 3e		      sta	$3E	; Pointer: BASIC instruction for CONT
    575  8772				   W8772
    576  8772		       60		      rts
    577  8773
    578  8773				   W8773
    579  8773		       20 79 00 	      jsr	$0079	; CHRGET (Introduce a char) subroutine
    580  8776		       f0 fa		      beq	W8772
    581  8778		       c9 3b		      cmp	#$3B
    582  877a		       f0 f6		      beq	W8772
    583  877c		       a9 03		      lda	#$03
    584  877e		       4c 68 85 	      jmp	W8568
    585  8781
    586  8781				   W8781
    587  8781		       a6 3e		      ldx	$3E	; Pointer: BASIC instruction for CONT
    588  8783		       e0 06		      cpx	#$06
    589  8785		       d0 0c		      bne	W8793
    590  8787		       a5 41		      lda	$41	; Pointer: DATA current element address
    591  8789		       c9 04		      cmp	#$04
    592  878b		       b0 06		      bcs	W8793
    593  878d		       a5 3b		      lda	$3B	; BASIC precedent line number
    594  878f		       e9 07		      sbc	#$07
    595  8791		       85 3b		      sta	$3B	; BASIC precedent line number
    596  8793				   W8793
    597  8793		       e0 09		      cpx	#$09
    598  8795		       f0 29		      beq	W87C0
    599  8797		       a5 41		      lda	$41	; Pointer: DATA current element address
    600  8799		       c9 15		      cmp	#$15
    601  879b		       90 35		      bcc	W87D2
    602  879d		       f0 14		      beq	W87B3
    603  879f		       c9 16		      cmp	#$16
    604  87a1		       f0 10		      beq	W87B3
    605  87a3		       c9 30		      cmp	#$30
    606  87a5		       90 03		      bcc	W87AA
    607  87a7		       4c 2e 88 	      jmp	W882E
    608  87aa
    609  87aa				   W87AA
    610  87aa		       e0 07		      cpx	#$07
    611  87ac		       d0 1f		      bne	W87CD
    612  87ae		       a9 01		      lda	#$01
    613  87b0		       85 42		      sta	$42	; Pointer: DATA current element address
    614  87b2		       60		      rts
    615  87b3
    616  87b3				   W87B3
    617  87b3		       e0 08		      cpx	#$08
    618  87b5		       f0 04		      beq	W87BB
    619  87b7		       e0 0a		      cpx	#$0A
    620  87b9		       d0 12		      bne	W87CD
    621  87bb				   W87BB
    622  87bb		       a9 03		      lda	#$03
    623  87bd		       85 42		      sta	$42	; Pointer: DATA current element address
    624  87bf		       60		      rts
    625  87c0
    626  87c0				   W87C0
    627  87c0		       a5 41		      lda	$41	; Pointer: DATA current element address
    628  87c2		       c9 15		      cmp	#$15
    629  87c4		       d0 07		      bne	W87CD
    630  87c6		       a9 6c		      lda	#$6C
    631  87c8		       85 3b		      sta	$3B	; BASIC precedent line number
    632  87ca		       4c bb 87 	      jmp	W87BB
    633  87cd
    634  87cd				   W87CD
    635  87cd		       a9 04		      lda	#$04
    636  87cf		       4c 68 85 	      jmp	W8568
    637  87d2
    638  87d2				   W87D2
    639  87d2		       a9 02		      lda	#$02
    640  87d4		       85 42		      sta	$42	; Pointer: DATA current element address
    641  87d6		       e0 08		      cpx	#$08
    642  87d8		       f0 0d		      beq	W87E7
    643  87da		       e0 0a		      cpx	#$0A
    644  87dc		       d0 0a		      bne	W87E8
    645  87de		       e6 42		      inc	$42	; Pointer: DATA current element address
    646  87e0		       a5 3b		      lda	$3B	; BASIC precedent line number
    647  87e2		       18		      clc
    648  87e3		       69 08		      adc	#$08
    649  87e5		       85 3b		      sta	$3B	; BASIC precedent line number
    650  87e7				   W87E7
    651  87e7		       60		      rts
    652  87e8
    653  87e8				   W87E8
    654  87e8		       a9 01		      lda	#$01
    655  87ea				   W87EA
    656  87ea		       e0 00		      cpx	#$00
    657  87ec		       f0 05		      beq	W87F3
    658  87ee		       0a		      asl
    659  87ef		       ca		      dex
    660  87f0		       4c ea 87 	      jmp	W87EA
    661  87f3
    662  87f3				   W87F3
    663  87f3		       a6 41		      ldx	$41	; Pointer: DATA current element address
    664  87f5		       3d eb 80 	      and	T_MNEMXFORM1,x
    665  87f8		       d0 11		      bne	W880B
    666  87fa		       a6 3e		      ldx	$3E	; Pointer: BASIC instruction for CONT
    667  87fc		       e0 02		      cpx	#$02
    668  87fe		       f0 04		      beq	W8804
    669  8800		       e0 03		      cpx	#$03
    670  8802		       d0 c9		      bne	W87CD
    671  8804				   W8804
    672  8804		       e8		      inx
    673  8805		       e8		      inx
    674  8806		       86 3e		      stx	$3E	; Pointer: BASIC instruction for CONT
    675  8808		       4c e8 87 	      jmp	W87E8
    676  880b
    677  880b				   W880B
    678  880b		       a6 3e		      ldx	$3E	; Pointer: BASIC instruction for CONT
    679  880d		       e0 04		      cpx	#$04
    680  880f		       d0 0f		      bne	W8820
    681  8811		       a5 41		      lda	$41	; Pointer: DATA current element address
    682  8813		       c9 02		      cmp	#$02
    683  8815		       d0 09		      bne	W8820
    684  8817		       a9 03		      lda	#$03
    685  8819		       85 42		      sta	$42	; Pointer: DATA current element address
    686  881b		       a9 be		      lda	#$BE
    687  881d		       85 3b		      sta	$3B	; BASIC precedent line number
    688  881f		       60		      rts
    689  8820
    690  8820				   W8820
    691  8820		       bd 08 81 	      lda	T_MNEMXFORM3,x
    692  8823		       85 42		      sta	$42	; Pointer: DATA current element address
    693  8825		       bd 00 81 	      lda	T_MNEMXFORM2,x
    694  8828		       18		      clc
    695  8829		       65 3b		      adc	$3B	; BASIC precedent line number
    696  882b		       85 3b		      sta	$3B	; BASIC precedent line number
    697  882d				   W882D
    698  882d		       60		      rts
    699  882e
    700  882e				   W882E
    701  882e		       20 b3 87 	      jsr	W87B3
    702  8831		       c6 42		      dec	$42	; Pointer: DATA current element address
    703  8833		       a5 fd		      lda	$FD
    704  8835		       c9 02		      cmp	#$02
    705  8837		       90 f4		      bcc	W882D
    706  8839		       a5 3c		      lda	$3C	; BASIC precedent line number
    707  883b		       a6 3d		      ldx	$3D	; Pointer: BASIC instruction for CONT
    708  883d		       38		      sec
    709  883e		       e5 fb		      sbc	$FB	; Free 0 page for user program
    710  8840		       a8		      tay
    711  8841		       8a		      txa
    712  8842		       e5 fc		      sbc	$FC
    713  8844		       90 17		      bcc	W885D
    714  8846		       aa		      tax
    715  8847		       98		      tya
    716  8848		       e9 02		      sbc	#$02
    717  884a		       b0 01		      bcs	W884D
    718  884c		       ca		      dex
    719  884d				   W884D
    720  884d		       85 3c		      sta	$3C	; BASIC precedent line number
    721  884f		       e0 00		      cpx	#$00
    722  8851		       d0 05		      bne	W8858
    723  8853		       c9 80		      cmp	#$80
    724  8855		       b0 01		      bcs	W8858
    725  8857		       60		      rts
    726  8858
    727  8858				   W8858
    728  8858		       a9 05		      lda	#$05
    729  885a		       4c 68 85 	      jmp	W8568
    730  885d
    731  885d				   W885D
    732  885d		       aa		      tax
    733  885e		       98		      tya
    734  885f		       38		      sec
    735  8860		       e9 02		      sbc	#$02
    736  8862		       b0 01		      bcs	W8865
    737  8864		       ca		      dex
    738  8865				   W8865
    739  8865		       85 3c		      sta	$3C	; BASIC precedent line number
    740  8867		       e0 ff		      cpx	#$FF
    741  8869		       d0 ed		      bne	W8858
    742  886b		       c9 80		      cmp	#$80
    743  886d		       90 e9		      bcc	W8858
    744  886f		       60		      rts
    745  8870
    746  8870				   W8870
    747  8870		       a2 0a		      ldx	#$0A
    748  8872		       a9 00		      lda	#$00
    749  8874				   W8874
    750  8874		       95 5d		      sta	$5D,x	; Scratch for numeric operation
    751  8876		       ca		      dex
    752  8877		       d0 fb		      bne	W8874
    753  8879				   W8879
    754  8879		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
    755  887c		       90 0b		      bcc	W8889
    756  887e		       20 13 b1 	      jsr	$B113	; Routine: Verify if the char in A is in 'A'..'Z'
    757  8881		       90 17		      bcc	W889A
    758  8883		       e9 07		      sbc	#$07
    759  8885		       c9 40		      cmp	#$40
    760  8887		       b0 11		      bcs	W889A
    761  8889				   W8889
    762  8889		       e9 2f		      sbc	#$2F
    763  888b		       20 7e bd 	      jsr	$BD7E	; BASIC ROM
    764  888e		       a5 61		      lda	$61	; Floating point accumulator #1: Exponent
    765  8890		       18		      clc
    766  8891		       69 04		      adc	#$04
    767  8893		       85 61		      sta	$61	; Floating point accumulator #1: Exponent
    768  8895		       90 e2		      bcc	W8879
    769  8897		       4c 7e b9 	      jmp	$B97E	; Routine: Write (OVERFLOW) error
    770  889a
    771  889a				   W889A
    772  889a		       a5 61		      lda	$61	; Floating point accumulator #1: Exponent
    773  889c		       e9 03		      sbc	#$03
    774  889e		       90 05		      bcc	W88A5
    775  88a0		       85 61		      sta	$61	; Floating point accumulator #1: Exponent
    776  88a2		       4c 5d 86 	      jmp	W865D
    777  88a5
    778  88a5				   W88A5
    779  88a5		       4c 08 af 	      jmp	$AF08	; Routine: Write (SYNTAX) error
    780  88a8
    781  88a8				   W88A8
    782  88a8		       85 62		      sta	$62	; Floating point accumulator #1: Mantissa
    783  88aa		       84 63		      sty	$63	; Floating point accumulator #1: Mantissa
    784  88ac				   W88AC
    785  88ac		       a2 90		      ldx	#$90
    786  88ae		       38		      sec
    787  88af		       4c 49 bc 	      jmp	$BC49	; BASIC ROM
    788  88b2
    789  88b2				   INSYMTBL
    790  88b2		       a5 7a		      lda	$7A	; CHRGET (Introduce a char) subroutine
    791  88b4		       a6 7b		      ldx	$7B	; CHRGET (Introduce a char) subroutine
    792  88b6		       85 49		      sta	$49	; Pointer: variable for the FOR..NEXT
    793  88b8		       86 4a		      stx	$4A	; Pointer: variable for the FOR..NEXT
    794  88ba				   GETSYM
    795  88ba		       a2 00		      ldx	#$00
    796  88bc		       20 79 00 	      jsr	$0079	; CHRGET (Introduce a char) subroutine
    797  88bf		       20 13 b1 	      jsr	$B113	; Routine: Verify if the char in A is in 'A'..'Z'
    798  88c2		       b0 09		      bcs	W88CD
    799  88c4		       a9 20		      lda	#$20
    800  88c6		       85 81		      sta	$81	; CHRGET (Introduce a char) subroutine
    801  88c8				   ILLSYM
    802  88c8		       a9 07		      lda	#$07
    803  88ca		       4c 68 85 	      jmp	W8568
    804  88cd
    805  88cd				   W88CD
    806  88cd		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
    807  88d0		       90 05		      bcc	W88D7
    808  88d2		       20 13 b1 	      jsr	$B113	; Routine: Verify if the char in A is in 'A'..'Z'
    809  88d5		       90 04		      bcc	GETDELIM
    810  88d7				   W88D7
    811  88d7		       e8		      inx
    812  88d8		       4c cd 88 	      jmp	W88CD
    813  88db
    814  88db				   GETDELIM
    815  88db		       c9 5f		      cmp	#$5F
    816  88dd		       f0 f8		      beq	W88D7
    817  88df		       e8		      inx
    818  88e0		       86 45		      stx	$45	; BASIC current variable name
    819  88e2		       a9 36		      lda	#$36
    820  88e4		       85 01		      sta	$01	; 6510 I/O register
    821  88e6				   ISSYMDEFINED
    822  88e6		       a9 f9		      lda	#$F9
    823  88e8		       a2 bf		      ldx	#$BF
    824  88ea				   W88EA
    825  88ea		       86 60		      stx	$60	; Scratch for numeric operation
    826  88ec				   W88EC
    827  88ec		       85 5f		      sta	$5F	; Scratch for numeric operation
    828  88ee		       e4 30		      cpx	$30	; Pointer: BASIC starting arrays
    829  88f0		       90 63		      bcc	ISSYMONSTACK
    830  88f2		       d0 04		      bne	W88F8
    831  88f4		       c5 2f		      cmp	$2F	; Pointer: BASIC starting arrays
    832  88f6		       90 5d		      bcc	ISSYMONSTACK
    833  88f8				   W88F8
    834  88f8		       a0 01		      ldy	#$01
    835  88fa		       b1 5f		      lda	($5F),y	; Scratch for numeric operation
    836  88fc		       c9 ff		      cmp	#$FF
    837  88fe		       f0 27		      beq	W8927
    838  8900		       c9 fe		      cmp	#$FE
    839  8902		       d0 17		      bne	W891B
    840  8904		       68		      pla
    841  8905		       a8		      tay
    842  8906		       68		      pla
    843  8907		       48		      pha
    844  8908		       c9 90		      cmp	#$90
    845  890a		       f0 05		      beq	W8911
    846  890c		       98		      tya
    847  890d		       48		      pha
    848  890e				   W890E
    849  890e		       4c 48 89 	      jmp	W8948
    850  8911
    851  8911				   W8911
    852  8911		       98		      tya
    853  8912		       48		      pha
    854  8913		       c9 8b		      cmp	#$8B
    855  8915		       d0 f7		      bne	W890E
    856  8917		       a0 02		      ldy	#$02
    857  8919		       d0 0d		      bne	W8928
    858  891b				   W891B
    859  891b		       c5 8c		      cmp	$8C	; Real value of the RND seed
    860  891d		       d0 29		      bne	W8948
    861  891f		       88		      dey
    862  8920		       b1 5f		      lda	($5F),y	; Scratch for numeric operation
    863  8922		       c5 8b		      cmp	$8B	; Real value of the RND seed
    864  8924		       d0 22		      bne	W8948
    865  8926		       c8		      iny
    866  8927				   W8927
    867  8927		       c8		      iny
    868  8928				   W8928
    869  8928		       b1 5f		      lda	($5F),y	; Scratch for numeric operation
    870  892a		       c5 45		      cmp	$45	; BASIC current variable name
    871  892c		       d0 1a		      bne	W8948
    872  892e		       c8		      iny
    873  892f		       b1 5f		      lda	($5F),y	; Scratch for numeric operation
    874  8931		       85 47		      sta	$47	; Pointer: BASIC current variable data
    875  8933		       c8		      iny
    876  8934		       b1 5f		      lda	($5F),y	; Scratch for numeric operation
    877  8936		       85 48		      sta	$48	; Pointer: BASIC current variable data
    878  8938		       a0 00		      ldy	#$00
    879  893a				   W893A
    880  893a		       b1 49		      lda	($49),y	; Pointer: variable for the FOR..NEXT
    881  893c		       d1 47		      cmp	($47),y	; Pointer: BASIC current variable data
    882  893e		       d0 08		      bne	W8948
    883  8940		       c8		      iny
    884  8941		       c4 45		      cpy	$45	; BASIC current variable name
    885  8943		       d0 f5		      bne	W893A
    886  8945		       4c e6 89 	      jmp	FOUNDSYM
    887  8948
    888  8948				   W8948
    889  8948		       a5 5f		      lda	$5F	; Scratch for numeric operation
    890  894a		       38		      sec
    891  894b		       e9 07		      sbc	#$07
    892  894d		       a6 60		      ldx	$60	; Scratch for numeric operation
    893  894f		       b0 9b		      bcs	W88EC
    894  8951		       ca		      dex
    895  8952		       4c ea 88 	      jmp	W88EA
    896  8955
    897  8955				   ISSYMONSTACK
    898  8955		       68		      pla
    899  8956		       aa		      tax
    900  8957		       68		      pla
    901  8958		       c9 85		      cmp	#$85
    902  895a		       d0 09		      bne	W8965
    903  895c		       48		      pha
    904  895d		       8a		      txa
    905  895e		       c9 e8		      cmp	#$E8
    906  8960		       d0 13		      bne	W8975
    907  8962		       48		      pha
    908  8963		       f0 1d		      beq	SYMUNDEF
    909  8965				   W8965
    910  8965		       c9 90		      cmp	#$90
    911  8967		       f0 06		      beq	W896F
    912  8969		       48		      pha
    913  896a		       8a		      txa
    914  896b		       48		      pha
    915  896c		       4c a4 89 	      jmp	SAVESYM
    916  896f
    917  896f				   W896F
    918  896f		       48		      pha
    919  8970		       8a		      txa
    920  8971		       c9 8b		      cmp	#$8B
    921  8973		       f0 04		      beq	MACROUNDEF
    922  8975				   W8975
    923  8975		       48		      pha
    924  8976		       4c a4 89 	      jmp	SAVESYM
    925  8979
    926  8979				   MACROUNDEF
    927  8979		       48		      pha
    928  897a		       20 e0 89 	      jsr	W89E0
    929  897d		       a9 0d		      lda	#$0D
    930  897f		       4c 68 85 	      jmp	W8568
    931  8982
    932  8982				   SYMUNDEF
    933  8982		       20 e0 89 	      jsr	W89E0
    934  8985		       a5 fd		      lda	$FD
    935  8987		       c9 02		      cmp	#$02
    936  8989		       90 05		      bcc	W8990
    937  898b		       a9 06		      lda	#$06
    938  898d		       4c 68 85 	      jmp	W8568
    939  8990
    940  8990				   W8990
    941  8990		       a5 3e		      lda	$3E	; Pointer: BASIC instruction for CONT
    942  8992		       c9 06		      cmp	#$06
    943  8994		       d0 07		      bne	W899D
    944  8996		       a9 00		      lda	#$00
    945  8998		       a0 80		      ldy	#$80
    946  899a		       4c a8 88 	      jmp	W88A8
    947  899d
    948  899d				   W899D
    949  899d		       a9 80		      lda	#$80
    950  899f		       a0 00		      ldy	#$00
    951  89a1		       4c a8 88 	      jmp	W88A8
    952  89a4
    953  89a4				   SAVESYM
    954  89a4		       a5 5f		      lda	$5F	; Scratch for numeric operation
    955  89a6		       a4 60		      ldy	$60	; Scratch for numeric operation
    956  89a8		       c0 a0		      cpy	#$A0
    957  89aa		       90 6d		      bcc	SYMTBLFULL
    958  89ac		       85 2f		      sta	$2F	; Pointer: BASIC starting arrays
    959  89ae		       84 30		      sty	$30	; Pointer: BASIC starting arrays
    960  89b0		       a0 00		      ldy	#$00
    961  89b2		       a5 8b		      lda	$8B	; Real value of the RND seed
    962  89b4		       91 5f		      sta	($5F),y	; Scratch for numeric operation
    963  89b6		       c8		      iny
    964  89b7		       a5 8c		      lda	$8C	; Real value of the RND seed
    965  89b9		       91 5f		      sta	($5F),y	; Scratch for numeric operation
    966  89bb		       c8		      iny
    967  89bc		       a5 45		      lda	$45	; BASIC current variable name
    968  89be		       91 5f		      sta	($5F),y	; Scratch for numeric operation
    969  89c0		       c8		      iny
    970  89c1		       a5 49		      lda	$49	; Pointer: variable for the FOR..NEXT
    971  89c3		       91 5f		      sta	($5F),y	; Scratch for numeric operation
    972  89c5		       c8		      iny
    973  89c6		       a5 4a		      lda	$4A	; Pointer: variable for the FOR..NEXT
    974  89c8		       91 5f		      sta	($5F),y	; Scratch for numeric operation
    975  89ca		       c8		      iny
    976  89cb		       a9 ff		      lda	#$FF
    977  89cd		       91 5f		      sta	($5F),y	; Scratch for numeric operation
    978  89cf		       c8		      iny
    979  89d0		       91 5f		      sta	($5F),y	; Scratch for numeric operation
    980  89d2				   W89D2
    981  89d2		       a5 5f		      lda	$5F	; Scratch for numeric operation
    982  89d4		       a4 60		      ldy	$60	; Scratch for numeric operation
    983  89d6		       18		      clc
    984  89d7		       69 05		      adc	#$05
    985  89d9		       90 01		      bcc	W89DC
    986  89db		       c8		      iny
    987  89dc				   W89DC
    988  89dc		       85 49		      sta	$49	; Pointer: variable for the FOR..NEXT
    989  89de		       84 4a		      sty	$4A	; Pointer: variable for the FOR..NEXT
    990  89e0				   W89E0
    991  89e0		       a9 37		      lda	#$37
    992  89e2		       85 01		      sta	$01	; 6510 I/O register
    993  89e4		       38		      sec
    994  89e5		       60		      rts
    995  89e6
    996  89e6				   FOUNDSYM
    997  89e6		       20 d2 89 	      jsr	W89D2
    998  89e9		       a9 36		      lda	#$36
    999  89eb		       85 01		      sta	$01	; 6510 I/O register
   1000  89ed		       a0 01		      ldy	#$01
   1001  89ef		       b1 49		      lda	($49),y	; Pointer: variable for the FOR..NEXT
   1002  89f1		       85 62		      sta	$62	; Floating point accumulator #1: Mantissa
   1003  89f3		       88		      dey
   1004  89f4		       b1 49		      lda	($49),y	; Pointer: variable for the FOR..NEXT
   1005  89f6		       85 63		      sta	$63	; Floating point accumulator #1: Mantissa
   1006  89f8		       c9 ff		      cmp	#$FF
   1007  89fa		       d0 13		      bne	PUTSYMVINFAC
   1008  89fc		       a5 62		      lda	$62	; Floating point accumulator #1: Mantissa
   1009  89fe		       c9 ff		      cmp	#$FF
   1010  8a00		       d0 0d		      bne	PUTSYMVINFAC
   1011  8a02		       a9 20		      lda	#$20
   1012  8a04		       85 81		      sta	$81	; CHRGET (Introduce a char) subroutine
   1013  8a06		       a9 37		      lda	#$37
   1014  8a08		       85 01		      sta	$01	; 6510 I/O register
   1015  8a0a		       a9 06		      lda	#$06
   1016  8a0c		       4c 68 85 	      jmp	W8568
   1017  8a0f
   1018  8a0f				   PUTSYMVINFAC
   1019  8a0f		       84 70		      sty	$70	; Lo Byte #1 (rounding)
   1020  8a11		       20 e0 89 	      jsr	W89E0
   1021  8a14		       20 ac 88 	      jsr	W88AC
   1022  8a17		       18		      clc
   1023  8a18		       60		      rts
   1024  8a19
   1025  8a19				   SYMTBLFULL
   1026  8a19		       20 e0 89 	      jsr	W89E0
   1027  8a1c		       a9 20		      lda	#$20
   1028  8a1e		       85 81		      sta	$81	; CHRGET (Introduce a char) subroutine
   1029  8a20		       a9 08		      lda	#$08
   1030  8a22		       4c 68 85 	      jmp	W8568
   1031  8a25
   1032  8a25				   W8A25
   1033  8a25		       a0 02		      ldy	#$02
   1034  8a27		       b1 7a		      lda	($7A),y	; CHRGET (Introduce a char) subroutine
   1035  8a29		       f0 1f		      beq	W8A4A
   1036  8a2b		       c8		      iny
   1037  8a2c		       b1 7a		      lda	($7A),y	; CHRGET (Introduce a char) subroutine
   1038  8a2e		       85 39		      sta	$39	; BASIC current line number
   1039  8a30		       c8		      iny
   1040  8a31		       b1 7a		      lda	($7A),y	; CHRGET (Introduce a char) subroutine
   1041  8a33		       85 3a		      sta	$3A	; BASIC current line number
   1042  8a35		       a4 7b		      ldy	$7B	; CHRGET (Introduce a char) subroutine
   1043  8a37		       a6 7a		      ldx	$7A	; CHRGET (Introduce a char) subroutine
   1044  8a39		       e8		      inx
   1045  8a3a		       d0 01		      bne	W8A3D
   1046  8a3c		       c8		      iny
   1047  8a3d				   W8A3D
   1048  8a3d		       8e fe 02 	      stx	$02FE	; Not used
   1049  8a40		       8c ff 02 	      sty	$02FF	; Not used
   1050  8a43		       a0 04		      ldy	#$04
   1051  8a45		       20 fb a8 	      jsr	$A8FB	; BASIC ROM
   1052  8a48		       18		      clc
   1053  8a49		       60		      rts
   1054  8a4a
   1055  8a4a				   W8A4A
   1056  8a4a		       38		      sec
   1057  8a4b		       60		      rts
   1058  8a4c
   1059  8a4c				   W8A4C
   1060  8a4c		       a5 fd		      lda	$FD
   1061  8a4e		       c9 02		      cmp	#$02
   1062  8a50		       b0 03		      bcs	W8A55
   1063  8a52		       4c b4 8b 	      jmp	W8BB4
   1064  8a55
   1065  8a55				   W8A55
   1066  8a55		       20 cc ff 	      jsr	$FFCC	; Routine: Close the input and output channel
   1067  8a58		       a9 ff		      lda	#$FF
   1068  8a5a		       85 3a		      sta	$3A	; BASIC current line number
   1069  8a5c		       a9 3f		      lda	#$3F
   1070  8a5e		       a0 83		      ldy	#$83
   1071  8a60		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   1072  8a63		       ad f9 02 	      lda	$02F9	; Not used
   1073  8a66		       f0 03		      beq	W8A6B
   1074  8a68		       20 42 94 	      jsr	W9442
   1075  8a6b				   W8A6B
   1076  8a6b		       ad f8 02 	      lda	$02F8	; Not used
   1077  8a6e		       d0 06		      bne	W8A76
   1078  8a70		       ae f7 02 	      ldx	$02F7	; Not used
   1079  8a73		       20 c9 ff 	      jsr	$FFC9	; Routine: Open an output canal
   1080  8a76				   W8A76
   1081  8a76		       20 e0 92 	      jsr	W92E0
   1082  8a79		       a9 79		      lda	#$79
   1083  8a7b		       a0 83		      ldy	#$83
   1084  8a7d		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   1085  8a80		       ad ec 02 	      lda	$02EC	; Not used
   1086  8a83		       18		      clc
   1087  8a84		       6d ee 02 	      adc	$02EE	; Not used
   1088  8a87		       aa		      tax
   1089  8a88		       ad ed 02 	      lda	$02ED	; Not used
   1090  8a8b		       6d ef 02 	      adc	$02EF	; Not used
   1091  8a8e		       20 79 93 	      jsr	W9379
   1092  8a91		       8a		      txa
   1093  8a92		       20 79 93 	      jsr	W9379
   1094  8a95		       a9 88		      lda	#$88
   1095  8a97		       a0 83		      ldy	#$83
   1096  8a99		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   1097  8a9c		       20 1f 93 	      jsr	W931F
   1098  8a9f		       20 d7 aa 	      jsr	$AAD7	; Routine: Write return effect and/or advancement
   1099  8aa2		       a9 fa		      lda	#$FA
   1100  8aa4		       a0 83		      ldy	#$83
   1101  8aa6		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   1102  8aa9		       a5 2d		      lda	$2D	; Pointer: BASIC starting variables
   1103  8aab		       38		      sec
   1104  8aac		       e5 2b		      sbc	$2B	; Pointer: BASIC starting programs
   1105  8aae		       85 63		      sta	$63	; Floating point accumulator #1: Mantissa
   1106  8ab0		       a5 2e		      lda	$2E	; Pointer: BASIC starting variables
   1107  8ab2		       e5 2c		      sbc	$2C	; Pointer: BASIC starting programs
   1108  8ab4		       85 62		      sta	$62	; Floating point accumulator #1: Mantissa
   1109  8ab6		       20 23 9a 	      jsr	W9A23
   1110  8ab9		       a9 34		      lda	#$34
   1111  8abb		       a0 84		      ldy	#$84
   1112  8abd		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   1113  8ac0		       a9 20		      lda	#$20
   1114  8ac2		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   1115  8ac5		       a9 28		      lda	#$28
   1116  8ac7		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   1117  8aca		       a5 2d		      lda	$2D	; Pointer: BASIC starting variables
   1118  8acc		       38		      sec
   1119  8acd		       e5 2b		      sbc	$2B	; Pointer: BASIC starting programs
   1120  8acf		       a5 2e		      lda	$2E	; Pointer: BASIC starting variables
   1121  8ad1		       e5 2c		      sbc	$2C	; Pointer: BASIC starting programs
   1122  8ad3		       4a		      lsr
   1123  8ad4		       4a		      lsr
   1124  8ad5		       aa		      tax
   1125  8ad6		       a9 00		      lda	#$00
   1126  8ad8		       20 cd bd 	      jsr	$BDCD	; Routine: Write (AX) integer correspondenting string
   1127  8adb		       a9 65		      lda	#$65
   1128  8add		       a0 84		      ldy	#$84
   1129  8adf		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   1130  8ae2		       a9 0e		      lda	#$0E
   1131  8ae4		       a0 84		      ldy	#$84
   1132  8ae6		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   1133  8ae9		       a5 fb		      lda	$FB	; Free 0 page for user program
   1134  8aeb		       38		      sec
   1135  8aec		       ed ec 02 	      sbc	$02EC	; Not used
   1136  8aef		       85 63		      sta	$63	; Floating point accumulator #1: Mantissa
   1137  8af1		       a5 fc		      lda	$FC
   1138  8af3		       ed ed 02 	      sbc	$02ED	; Not used
   1139  8af6		       85 62		      sta	$62	; Floating point accumulator #1: Mantissa
   1140  8af8		       20 23 9a 	      jsr	W9A23
   1141  8afb		       a9 34		      lda	#$34
   1142  8afd		       a0 84		      ldy	#$84
   1143  8aff		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   1144  8b02		       a9 20		      lda	#$20
   1145  8b04		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   1146  8b07		       a9 28		      lda	#$28
   1147  8b09		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   1148  8b0c		       a5 fb		      lda	$FB	; Free 0 page for user program
   1149  8b0e		       38		      sec
   1150  8b0f		       ed ec 02 	      sbc	$02EC	; Not used
   1151  8b12		       a5 fc		      lda	$FC
   1152  8b14		       ed ed 02 	      sbc	$02ED	; Not used
   1153  8b17		       4a		      lsr
   1154  8b18		       4a		      lsr
   1155  8b19		       aa		      tax
   1156  8b1a		       a9 00		      lda	#$00
   1157  8b1c		       20 cd bd 	      jsr	$BDCD	; Routine: Write (AX) integer correspondenting string
   1158  8b1f		       a9 65		      lda	#$65
   1159  8b21		       a0 84		      ldy	#$84
   1160  8b23		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   1161  8b26		       a9 21		      lda	#$21
   1162  8b28		       a0 84		      ldy	#$84
   1163  8b2a		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   1164  8b2d		       a9 00		      lda	#$00
   1165  8b2f		       38		      sec
   1166  8b30		       e5 2f		      sbc	$2F	; Pointer: BASIC starting arrays
   1167  8b32		       85 63		      sta	$63	; Floating point accumulator #1: Mantissa
   1168  8b34		       a9 c0		      lda	#$C0
   1169  8b36		       85 8f		      sta	$8F	; Real value of the RND seed
   1170  8b38		       e5 30		      sbc	$30	; Pointer: BASIC starting arrays
   1171  8b3a		       85 62		      sta	$62	; Floating point accumulator #1: Mantissa
   1172  8b3c		       20 23 9a 	      jsr	W9A23
   1173  8b3f		       a9 34		      lda	#$34
   1174  8b41		       a0 84		      ldy	#$84
   1175  8b43		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   1176  8b46		       a9 20		      lda	#$20
   1177  8b48		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   1178  8b4b		       a9 28		      lda	#$28
   1179  8b4d		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   1180  8b50		       a5 8e		      lda	$8E	; Real value of the RND seed
   1181  8b52		       38		      sec
   1182  8b53		       e5 2f		      sbc	$2F	; Pointer: BASIC starting arrays
   1183  8b55		       a5 8f		      lda	$8F	; Real value of the RND seed
   1184  8b57		       e5 30		      sbc	$30	; Pointer: BASIC starting arrays
   1185  8b59		       4a		      lsr
   1186  8b5a		       4a		      lsr
   1187  8b5b		       aa		      tax
   1188  8b5c		       a9 00		      lda	#$00
   1189  8b5e		       20 cd bd 	      jsr	$BDCD	; Routine: Write (AX) integer correspondenting string
   1190  8b61		       a9 65		      lda	#$65
   1191  8b63		       a0 84		      ldy	#$84
   1192  8b65		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   1193  8b68		       ad f7 02 	      lda	$02F7	; Not used
   1194  8b6b		       20 c3 ff 	      jsr	$FFC3	; Routine: Close a specified logical file
   1195  8b6e		       20 cc ff 	      jsr	$FFCC	; Routine: Close the input and output channel
   1196  8b71		       ad eb 02 	      lda	$02EB	; Not used
   1197  8b74		       c9 ff		      cmp	#$FF
   1198  8b76		       f0 39		      beq	W8BB1
   1199  8b78		       a9 6a		      lda	#$6A
   1200  8b7a		       a0 84		      ldy	#$84
   1201  8b7c		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   1202  8b7f		       a0 00		      ldy	#$00
   1203  8b81		       84 cc		      sty	$CC	; Flash state: 0=flashing
   1204  8b83				   W8B83
   1205  8b83		       a5 cb		      lda	$CB	; Flag: write chars with SHIFT pressed
   1206  8b85		       c9 40		      cmp	#$40
   1207  8b87		       f0 fa		      beq	W8B83
   1208  8b89		       a2 01		      ldx	#$01
   1209  8b8b		       86 cc		      stx	$CC	; Flash state: 0=flashing
   1210  8b8d		       c9 3f		      cmp	#$3F
   1211  8b8f		       d0 08		      bne	W8B99
   1212  8b91		       a9 20		      lda	#$20
   1213  8b93		       a4 d3		      ldy	$D3	; Column of cursor on the current line
   1214  8b95		       91 d1		      sta	($D1),y	; Pointer: current screen line address
   1215  8b97		       d0 18		      bne	W8BB1
   1216  8b99				   W8B99
   1217  8b99		       c9 3c		      cmp	#$3C
   1218  8b9b		       d0 e6		      bne	W8B83
   1219  8b9d		       84 c6		      sty	$C6	; Number of char in keyboard buffer
   1220  8b9f		       a9 93		      lda	#$93
   1221  8ba1		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   1222  8ba4		       ad ea 02 	      lda	$02EA	; Not used
   1223  8ba7		       ae eb 02 	      ldx	$02EB	; Not used
   1224  8baa		       85 14		      sta	$14	; Transient: integer value
   1225  8bac		       86 15		      stx	$15	; Transient: integer value
   1226  8bae		       20 30 e1 	      jsr	$E130
   1227  8bb1				   W8BB1
   1228  8bb1		       4c 7b e3 	      jmp	$E37B	; Routine (from case 0xA002): close canals, start up
   1229  8bb4
   1230  8bb4				   W8BB4
   1231  8bb4		       ad ed 02 	      lda	$02ED	; Not used
   1232  8bb7		       c9 ff		      cmp	#$FF
   1233  8bb9		       d0 05		      bne	W8BC0
   1234  8bbb		       a9 10		      lda	#$10
   1235  8bbd		       4c 68 85 	      jmp	W8568
   1236  8bc0
   1237  8bc0				   W8BC0
   1238  8bc0		       20 ca 92 	      jsr	W92CA
   1239  8bc3		       4c c0 8c 	      jmp	W8CC0
   1240  8bc6
   1241  8bc6				   W8BC6
   1242  8bc6		       a0 00		      ldy	#$00
   1243  8bc8		       84 8b		      sty	$8B	; Real value of the RND seed
   1244  8bca		       84 8c		      sty	$8C	; Real value of the RND seed
   1245  8bcc		       84 8e		      sty	$8E	; Real value of the RND seed
   1246  8bce		       c8		      iny
   1247  8bcf		       84 8d		      sty	$8D	; Real value of the RND seed
   1248  8bd1		       60		      rts
   1249  8bd2
   1250  8bd2		       24 9d		      bit	$9D	; Flag: 80=direct mode 00=program mode
   1251  8bd4		       10 28		      bpl	W8BFE
   1252  8bd6		       a9 00		      lda	#$00
   1253  8bd8		       85 3e		      sta	$3E	; Pointer: BASIC instruction for CONT
   1254  8bda		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
   1255  8bdd		       d0 03		      bne	W8BE2
   1256  8bdf		       4c bf 94 	      jmp	W94BF
   1257  8be2
   1258  8be2				   W8BE2
   1259  8be2		       e9 80		      sbc	#$80
   1260  8be4		       b0 03		      bcs	W8BE9
   1261  8be6				   W8BE6
   1262  8be6		       4c 08 af 	      jmp	$AF08	; Routine: Write (SYNTAX) error
   1263  8be9
   1264  8be9				   W8BE9
   1265  8be9		       c9 0a		      cmp	#$0A
   1266  8beb		       f0 11		      beq	W8BFE
   1267  8bed		       c9 13		      cmp	#$13
   1268  8bef		       90 f5		      bcc	W8BE6
   1269  8bf1		       c9 1b		      cmp	#$1B
   1270  8bf3		       d0 03		      bne	W8BF8
   1271  8bf5		       4c 74 98 	      jmp	W9874
   1272  8bf8
   1273  8bf8				   W8BF8
   1274  8bf8		       20 f3 a7 	      jsr	$A7F3	; BASIC ROM
   1275  8bfb		       4c ae a7 	      jmp	$A7AE	; Routine: Interpreter loop, set up next statement for execution
   1276  8bfe
   1277  8bfe				   W8BFE
   1278  8bfe		       20 e7 ff 	      jsr	$FFE7	; Routine: Close all canals and files
   1279  8c01		       a9 05		      lda	#$05
   1280  8c03		       a2 08		      ldx	#$08
   1281  8c05		       86 7b		      stx	$7B	; CHRGET (Introduce a char) subroutine
   1282  8c07		       85 7a		      sta	$7A	; CHRGET (Introduce a char) subroutine
   1283  8c09		       20 79 00 	      jsr	$0079	; CHRGET (Introduce a char) subroutine
   1284  8c0c		       c9 9e		      cmp	#$9E
   1285  8c0e		       d0 09		      bne	W8C19
   1286  8c10		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
   1287  8c13		       20 2a e1 	      jsr	$E12A	; Routine: SYS instruction
   1288  8c16		       4c 7b e3 	      jmp	$E37B	; Routine (from case 0xA002): close canals, start up
   1289  8c19
   1290  8c19				   W8C19
   1291  8c19		       a9 2c		      lda	#$2C
   1292  8c1b		       a0 83		      ldy	#$83
   1293  8c1d		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   1294  8c20		       a9 2f		      lda	#$2F
   1295  8c22		       85 00		      sta	$00
   1296  8c24		       ad 0e dc 	      lda	$DC0E	; Control register A of CIA #1
   1297  8c27		       09 80		      ora	#$80
   1298  8c29		       8d 0e dc 	      sta	$DC0E	; Control register A of CIA #1
   1299  8c2c		       a9 08		      lda	#$08
   1300  8c2e		       8d 0f dc 	      sta	$DC0F	; Control register B of CIA #1
   1301  8c31		       20 8e a6 	      jsr	$A68E	; Routine: Set program pointer to BASIC-start (loads $7A, $7B with $2B-1, $2C-1)
   1302  8c34		       a9 ff		      lda	#$FF
   1303  8c36		       8d ed 02 	      sta	$02ED	; Not used
   1304  8c39		       8d eb 02 	      sta	$02EB	; Not used
   1305  8c3c		       a9 00		      lda	#$00
   1306  8c3e		       8d ee 02 	      sta	$02EE	; Not used
   1307  8c41		       8d ef 02 	      sta	$02EF	; Not used
   1308  8c44		       a9 00		      lda	#$00
   1309  8c46		       a2 c0		      ldx	#$C0
   1310  8c48		       86 30		      stx	$30	; Pointer: BASIC starting arrays
   1311  8c4a		       85 2f		      sta	$2F	; Pointer: BASIC starting arrays
   1312  8c4c		       48		      pha
   1313  8c4d		       8d 0b dc 	      sta	$DC0B	; Day time clock #1: Hour+[indicator AM/PM]
   1314  8c50		       8d 0a dc 	      sta	$DC0A	; Day time clock #1: Minutes
   1315  8c53		       8d 09 dc 	      sta	$DC09	; Day time clock #1: Second
   1316  8c56		       8d 08 dc 	      sta	$DC08	; Day time clock #1: 1/10 second
   1317  8c59		       85 fd		      sta	$FD
   1318  8c5b		       8d e8 02 	      sta	$02E8	; Not used
   1319  8c5e		       85 fe		      sta	$FE	; Free 0 page for user program
   1320  8c60		       8d f9 02 	      sta	$02F9	; Not used
   1321  8c63		       8d fa 02 	      sta	$02FA	; Not used
   1322  8c66		       8d fb 02 	      sta	$02FB	; Not used
   1323  8c69		       8d e7 02 	      sta	$02E7	; Not used
   1324  8c6c		       20 c6 8b 	      jsr	W8BC6
   1325  8c6f		       8c f8 02 	      sty	$02F8	; Not used
   1326  8c72				   W8C72
   1327  8c72		       20 25 8a 	      jsr	W8A25
   1328  8c75		       90 0d		      bcc	W8C84
   1329  8c77		       ad fa 02 	      lda	$02FA	; Not used
   1330  8c7a		       cd fb 02 	      cmp	$02FB	; Not used
   1331  8c7d		       f0 41		      beq	W8CC0
   1332  8c7f		       a9 0e		      lda	#$0E
   1333  8c81		       4c 68 85 	      jmp	W8568
   1334  8c84
   1335  8c84				   W8C84
   1336  8c84		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
   1337  8c87		       c9 a1		      cmp	#$A1
   1338  8c89		       f0 14		      beq	W8C9F
   1339  8c8b		       c9 a2		      cmp	#$A2
   1340  8c8d		       d0 28		      bne	W8CB7
   1341  8c8f		       ee fb 02 	      inc	$02FB	; Not used
   1342  8c92		       ad fa 02 	      lda	$02FA	; Not used
   1343  8c95		       cd fb 02 	      cmp	$02FB	; Not used
   1344  8c98		       b0 1d		      bcs	W8CB7
   1345  8c9a		       a9 09		      lda	#$09
   1346  8c9c		       4c 68 85 	      jmp	W8568
   1347  8c9f
   1348  8c9f				   W8C9F
   1349  8c9f		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
   1350  8ca2		       20 b2 88 	      jsr	INSYMTBL
   1351  8ca5		       a0 00		      ldy	#$00
   1352  8ca7		       a5 7a		      lda	$7A	; CHRGET (Introduce a char) subroutine
   1353  8ca9		       91 49		      sta	($49),y	; Pointer: variable for the FOR..NEXT
   1354  8cab		       c8		      iny
   1355  8cac		       a5 7b		      lda	$7B	; CHRGET (Introduce a char) subroutine
   1356  8cae		       91 49		      sta	($49),y	; Pointer: variable for the FOR..NEXT
   1357  8cb0		       a9 fe		      lda	#$FE
   1358  8cb2		       91 5f		      sta	($5F),y	; Scratch for numeric operation
   1359  8cb4		       ee fa 02 	      inc	$02FA	; Not used
   1360  8cb7				   W8CB7
   1361  8cb7		       20 09 a9 	      jsr	$A909	; Routine: Search 0 char in string (position)
   1362  8cba		       20 fb a8 	      jsr	$A8FB	; BASIC ROM
   1363  8cbd		       4c 72 8c 	      jmp	W8C72
   1364  8cc0
   1365  8cc0				   W8CC0
   1366  8cc0		       e6 fd		      inc	$FD
   1367  8cc2		       a9 5f		      lda	#$5F
   1368  8cc4		       a0 83		      ldy	#$83
   1369  8cc6		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   1370  8cc9		       a5 fd		      lda	$FD
   1371  8ccb		       09 30		      ora	#$30
   1372  8ccd		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   1373  8cd0		       20 84 94 	      jsr	W9484
   1374  8cd3		       20 e7 92 	      jsr	W92E7
   1375  8cd6		       20 c6 8b 	      jsr	W8BC6
   1376  8cd9		       20 8e a6 	      jsr	$A68E	; Routine: Set program pointer to BASIC-start (loads $7A, $7B with $2B-1, $2C-1)
   1377  8cdc				   W8CDC
   1378  8cdc		       20 cd 93 	      jsr	W93CD
   1379  8cdf				   W8CDF
   1380  8cdf		       ad e7 02 	      lda	$02E7	; Not used
   1381  8ce2		       f0 17		      beq	W8CFB
   1382  8ce4		       ad fa 02 	      lda	$02FA	; Not used
   1383  8ce7		       cd fb 02 	      cmp	$02FB	; Not used
   1384  8cea		       f0 07		      beq	W8CF3
   1385  8cec		       ad f8 02 	      lda	$02F8	; Not used
   1386  8cef		       09 02		      ora	#$02
   1387  8cf1		       d0 05		      bne	W8CF8
   1388  8cf3				   W8CF3
   1389  8cf3		       ad f8 02 	      lda	$02F8	; Not used
   1390  8cf6		       29 01		      and	#$01
   1391  8cf8				   W8CF8
   1392  8cf8		       8d f8 02 	      sta	$02F8	; Not used
   1393  8cfb				   W8CFB
   1394  8cfb		       20 2c a8 	      jsr	$A82C	; BASIC ROM
   1395  8cfe		       20 25 8a 	      jsr	W8A25
   1396  8d01		       90 06		      bcc	W8D09
   1397  8d03		       4c 4c 8a 	      jmp	W8A4C
   1398  8d06
   1399  8d06				   W8D06
   1400  8d06		       4c c5 8d 	      jmp	W8DC5
   1401  8d09
   1402  8d09				   W8D09
   1403  8d09		       ad f8 02 	      lda	$02F8	; Not used
   1404  8d0c		       d0 32		      bne	W8D40
   1405  8d0e		       a5 7a		      lda	$7A	; CHRGET (Introduce a char) subroutine
   1406  8d10		       48		      pha
   1407  8d11		       a5 7b		      lda	$7B	; CHRGET (Introduce a char) subroutine
   1408  8d13		       48		      pha
   1409  8d14		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
   1410  8d17		       aa		      tax
   1411  8d18		       68		      pla
   1412  8d19		       85 7b		      sta	$7B	; CHRGET (Introduce a char) subroutine
   1413  8d1b		       68		      pla
   1414  8d1c		       85 7a		      sta	$7A	; CHRGET (Introduce a char) subroutine
   1415  8d1e		       e0 a2		      cpx	#$A2
   1416  8d20		       f0 1e		      beq	W8D40
   1417  8d22		       ad fe 02 	      lda	$02FE	; Not used
   1418  8d25		       ae ff 02 	      ldx	$02FF	; Not used
   1419  8d28		       85 5f		      sta	$5F	; Scratch for numeric operation
   1420  8d2a		       86 60		      stx	$60	; Scratch for numeric operation
   1421  8d2c		       ae f7 02 	      ldx	$02F7	; Not used
   1422  8d2f		       20 c9 ff 	      jsr	$FFC9	; Routine: Open an output canal
   1423  8d32		       90 03		      bcc	W8D37
   1424  8d34		       4c f9 e0 	      jmp	$E0F9
   1425  8d37
   1426  8d37				   W8D37
   1427  8d37		       20 18 9a 	      jsr	W9A18
   1428  8d3a		       20 7c 94 	      jsr	W947C
   1429  8d3d		       20 cc ff 	      jsr	$FFCC	; Routine: Close the input and output channel
   1430  8d40				   W8D40
   1431  8d40		       a0 01		      ldy	#$01
   1432  8d42		       b1 7a		      lda	($7A),y	; CHRGET (Introduce a char) subroutine
   1433  8d44		       10 09		      bpl	W8D4F
   1434  8d46		       e6 7a		      inc	$7A	; CHRGET (Introduce a char) subroutine
   1435  8d48		       d0 02		      bne	W8D4C
   1436  8d4a		       e6 7b		      inc	$7B	; CHRGET (Introduce a char) subroutine
   1437  8d4c				   W8D4C
   1438  8d4c		       4c dc 8d 	      jmp	W8DDC
   1439  8d4f
   1440  8d4f				   W8D4F
   1441  8d4f		       c9 3b		      cmp	#$3B
   1442  8d51		       f0 b3		      beq	W8D06
   1443  8d53		       c9 20		      cmp	#$20
   1444  8d55		       f0 42		      beq	W8D99
   1445  8d57		       a5 fd		      lda	$FD
   1446  8d59		       c9 01		      cmp	#$01
   1447  8d5b		       f0 0f		      beq	W8D6C
   1448  8d5d				   W8D5D
   1449  8d5d		       c8		      iny
   1450  8d5e		       b1 7a		      lda	($7A),y	; CHRGET (Introduce a char) subroutine
   1451  8d60		       f0 4f		      beq	W8DB1
   1452  8d62		       c9 20		      cmp	#$20
   1453  8d64		       d0 f7		      bne	W8D5D
   1454  8d66		       20 fb a8 	      jsr	$A8FB	; BASIC ROM
   1455  8d69		       4c 9c 8d 	      jmp	W8D9C
   1456  8d6c
   1457  8d6c				   W8D6C
   1458  8d6c		       a9 ff		      lda	#$FF
   1459  8d6e		       85 81		      sta	$81	; CHRGET (Introduce a char) subroutine
   1460  8d70		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
   1461  8d73		       20 b2 88 	      jsr	INSYMTBL
   1462  8d76		       a9 20		      lda	#$20
   1463  8d78		       85 81		      sta	$81	; CHRGET (Introduce a char) subroutine
   1464  8d7a		       b0 0d		      bcs	W8D89
   1465  8d7c		       a5 4a		      lda	$4A	; Pointer: variable for the FOR..NEXT
   1466  8d7e		       c9 c0		      cmp	#$C0
   1467  8d80		       90 02		      bcc	W8D84
   1468  8d82		       d0 05		      bne	W8D89
   1469  8d84				   W8D84
   1470  8d84		       a9 0a		      lda	#$0A
   1471  8d86		       4c 68 85 	      jmp	W8568
   1472  8d89
   1473  8d89				   W8D89
   1474  8d89		       a5 fc		      lda	$FC
   1475  8d8b		       a6 fb		      ldx	$FB	; Free 0 page for user program
   1476  8d8d		       20 d5 92 	      jsr	W92D5
   1477  8d90		       20 79 00 	      jsr	$0079	; CHRGET (Introduce a char) subroutine
   1478  8d93		       aa		      tax
   1479  8d94		       d0 09		      bne	W8D9F
   1480  8d96		       4c bc 8d 	      jmp	W8DBC
   1481  8d99
   1482  8d99				   W8D99
   1483  8d99		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
   1484  8d9c				   W8D9C
   1485  8d9c		       20 79 00 	      jsr	$0079	; CHRGET (Introduce a char) subroutine
   1486  8d9f				   W8D9F
   1487  8d9f		       20 81 92 	      jsr	W9281
   1488  8da2				   W8DA2
   1489  8da2		       a0 00		      ldy	#$00
   1490  8da4		       b1 7a		      lda	($7A),y	; CHRGET (Introduce a char) subroutine
   1491  8da6		       f0 14		      beq	W8DBC
   1492  8da8		       c9 3b		      cmp	#$3B
   1493  8daa		       f0 10		      beq	W8DBC
   1494  8dac		       a9 03		      lda	#$03
   1495  8dae		       4c 68 85 	      jmp	W8568
   1496  8db1
   1497  8db1				   W8DB1
   1498  8db1		       ad f8 02 	      lda	$02F8	; Not used
   1499  8db4		       d0 03		      bne	W8DB9
   1500  8db6		       20 89 94 	      jsr	W9489
   1501  8db9				   W8DB9
   1502  8db9		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
   1503  8dbc				   W8DBC
   1504  8dbc		       20 09 a9 	      jsr	$A909	; Routine: Search 0 char in string (position)
   1505  8dbf		       20 fb a8 	      jsr	$A8FB	; BASIC ROM
   1506  8dc2		       4c dc 8c 	      jmp	W8CDC
   1507  8dc5
   1508  8dc5				   W8DC5
   1509  8dc5		       ad f8 02 	      lda	$02F8	; Not used
   1510  8dc8		       d0 ef		      bne	W8DB9
   1511  8dca		       20 89 94 	      jsr	W9489
   1512  8dcd		       20 d3 93 	      jsr	W93D3
   1513  8dd0		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
   1514  8dd3				   W8DD3
   1515  8dd3		       20 09 a9 	      jsr	$A909	; Routine: Search 0 char in string (position)
   1516  8dd6		       20 fb a8 	      jsr	$A8FB	; BASIC ROM
   1517  8dd9		       4c df 8c 	      jmp	W8CDF
   1518  8ddc
   1519  8ddc				   W8DDC
   1520  8ddc		       aa		      tax
   1521  8ddd		       29 e0		      and	#$E0
   1522  8ddf		       c9 a0		      cmp	#$A0
   1523  8de1		       d0 07		      bne	W8DEA
   1524  8de3		       8a		      txa
   1525  8de4		       29 1f		      and	#$1F
   1526  8de6		       c9 19		      cmp	#$19
   1527  8de8		       90 05		      bcc	W8DEF
   1528  8dea				   W8DEA
   1529  8dea		       a9 01		      lda	#$01
   1530  8dec		       4c 68 85 	      jmp	W8568
   1531  8def
   1532  8def				   W8DEF
   1533  8def		       0a		      asl
   1534  8df0		       aa		      tax
   1535  8df1		       bd 7b 82 	      lda	$827B,x
   1536  8df4		       48		      pha
   1537  8df5		       bd 7a 82 	      lda	V_PSEUDOOPS,x
   1538  8df8		       48		      pha
   1539  8df9		       e0 12		      cpx	#$12
   1540  8dfb		       b0 04		      bcs	W8E01
   1541  8dfd		       e0 04		      cpx	#$04
   1542  8dff		       b0 08		      bcs	W8E09
   1543  8e01				   W8E01
   1544  8e01		       ad f8 02 	      lda	$02F8	; Not used
   1545  8e04		       d0 03		      bne	W8E09
   1546  8e06		       4c 89 94 	      jmp	W9489
   1547  8e09
   1548  8e09				   W8E09
   1549  8e09		       60		      rts
   1550  8e0a
   1551  8e0a		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
   1552  8e0d		       20 b2 88 	      jsr	INSYMTBL
   1553  8e10		       a9 ff		      lda	#$FF
   1554  8e12		       a0 01		      ldy	#$01
   1555  8e14		       91 5f		      sta	($5F),y	; Scratch for numeric operation
   1556  8e16				   W8E16
   1557  8e16		       4c 1f 8e 	      jmp	W8E1F
   1558  8e19
   1559  8e19		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
   1560  8e1c		       20 b2 88 	      jsr	INSYMTBL
   1561  8e1f				   W8E1F
   1562  8e1f		       a9 3d		      lda	#$3D
   1563  8e21		       20 ff ae 	      jsr	$AEFF	; Routine: Verify if A is in current char (Syntax)
   1564  8e24		       a5 4a		      lda	$4A	; Pointer: variable for the FOR..NEXT
   1565  8e26		       48		      pha
   1566  8e27		       a5 49		      lda	$49	; Pointer: variable for the FOR..NEXT
   1567  8e29		       48		      pha
   1568  8e2a		       20 4f 92 	      jsr	W924F
   1569  8e2d		       68		      pla
   1570  8e2e		       85 49		      sta	$49	; Pointer: variable for the FOR..NEXT
   1571  8e30		       68		      pla
   1572  8e31		       85 4a		      sta	$4A	; Pointer: variable for the FOR..NEXT
   1573  8e33		       a5 3d		      lda	$3D	; Pointer: BASIC instruction for CONT
   1574  8e35		       a6 3c		      ldx	$3C	; BASIC precedent line number
   1575  8e37		       20 d5 92 	      jsr	W92D5
   1576  8e3a		       ad f8 02 	      lda	$02F8	; Not used
   1577  8e3d		       d0 28		      bne	W8E67
   1578  8e3f		       ae f7 02 	      ldx	$02F7	; Not used
   1579  8e42		       20 c9 ff 	      jsr	$FFC9	; Routine: Open an output canal
   1580  8e45		       90 03		      bcc	W8E4A
   1581  8e47		       4c f9 e0 	      jmp	$E0F9
   1582  8e4a
   1583  8e4a				   W8E4A
   1584  8e4a		       a2 07		      ldx	#$07
   1585  8e4c		       20 96 94 	      jsr	W9496
   1586  8e4f		       ae f7 02 	      ldx	$02F7	; Not used
   1587  8e52		       20 c9 ff 	      jsr	$FFC9	; Routine: Open an output canal
   1588  8e55		       90 03		      bcc	W8E5A
   1589  8e57		       4c f9 e0 	      jmp	$E0F9
   1590  8e5a
   1591  8e5a				   W8E5A
   1592  8e5a		       a9 23		      lda	#$23
   1593  8e5c		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   1594  8e5f		       a9 3d		      lda	#$3D
   1595  8e61		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   1596  8e64		       20 ab 93 	      jsr	W93AB
   1597  8e67				   W8E67
   1598  8e67		       4c a2 8d 	      jmp	W8DA2
   1599  8e6a
   1600  8e6a		       20 4c 92 	      jsr	W924C
   1601  8e6d		       8d ed 02 	      sta	$02ED	; Not used
   1602  8e70		       8c ec 02 	      sty	$02EC	; Not used
   1603  8e73		       20 ca 92 	      jsr	W92CA
   1604  8e76		       4c a2 8d 	      jmp	W8DA2
   1605  8e79
   1606  8e79		       ad ed 02 	      lda	$02ED	; Not used
   1607  8e7c		       c9 ff		      cmp	#$FF
   1608  8e7e		       d0 05		      bne	W8E85
   1609  8e80		       a9 10		      lda	#$10
   1610  8e82		       4c 68 85 	      jmp	W8568
   1611  8e85
   1612  8e85				   W8E85
   1613  8e85		       20 4c 92 	      jsr	W924C
   1614  8e88		       aa		      tax
   1615  8e89		       98		      tya
   1616  8e8a		       38		      sec
   1617  8e8b		       ed ec 02 	      sbc	$02EC	; Not used
   1618  8e8e		       8d ee 02 	      sta	$02EE	; Not used
   1619  8e91		       8a		      txa
   1620  8e92		       ed ed 02 	      sbc	$02ED	; Not used
   1621  8e95		       8d ef 02 	      sta	$02EF	; Not used
   1622  8e98		       4c a2 8d 	      jmp	W8DA2
   1623  8e9b
   1624  8e9b		       a9 01		      lda	#$01
   1625  8e9d		       85 42		      sta	$42	; Pointer: DATA current element address
   1626  8e9f				   W8E9F
   1627  8e9f		       20 5a 92 	      jsr	W925A
   1628  8ea2		       85 3b		      sta	$3B	; BASIC precedent line number
   1629  8ea4		       20 6e 8f 	      jsr	W8F6E
   1630  8ea7		       20 e5 91 	      jsr	W91E5
   1631  8eaa		       ad f8 02 	      lda	$02F8	; Not used
   1632  8ead		       d0 08		      bne	W8EB7
   1633  8eaf		       20 d3 93 	      jsr	W93D3
   1634  8eb2		       a9 80		      lda	#$80
   1635  8eb4		       8d f8 02 	      sta	$02F8	; Not used
   1636  8eb7				   W8EB7
   1637  8eb7		       20 79 00 	      jsr	$0079	; CHRGET (Introduce a char) subroutine
   1638  8eba		       c9 2c		      cmp	#$2C
   1639  8ebc		       f0 e1		      beq	W8E9F
   1640  8ebe		       4c 54 8f 	      jmp	W8F54
   1641  8ec1
   1642  8ec1		       a0 00		      ldy	#$00
   1643  8ec3		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
   1644  8ec6		       c9 22		      cmp	#$22
   1645  8ec8		       f0 03		      beq	W8ECD
   1646  8eca				   W8ECA
   1647  8eca		       4c 08 af 	      jmp	$AF08	; Routine: Write (SYNTAX) error
   1648  8ecd
   1649  8ecd				   W8ECD
   1650  8ecd		       a2 00		      ldx	#$00
   1651  8ecf				   W8ECF
   1652  8ecf		       c8		      iny
   1653  8ed0		       b1 7a		      lda	($7A),y	; CHRGET (Introduce a char) subroutine
   1654  8ed2		       f0 33		      beq	W8F07
   1655  8ed4		       c9 5f		      cmp	#$5F
   1656  8ed6		       d0 02		      bne	W8EDA
   1657  8ed8		       a9 0d		      lda	#$0D
   1658  8eda				   W8EDA
   1659  8eda		       c9 22		      cmp	#$22
   1660  8edc		       f0 23		      beq	W8F01
   1661  8ede		       95 3b		      sta	$3B,x	; BASIC precedent line number
   1662  8ee0		       e8		      inx
   1663  8ee1		       e0 03		      cpx	#$03
   1664  8ee3		       d0 ea		      bne	W8ECF
   1665  8ee5		       86 42		      stx	$42	; Pointer: DATA current element address
   1666  8ee7		       98		      tya
   1667  8ee8		       48		      pha
   1668  8ee9		       20 6e 8f 	      jsr	W8F6E
   1669  8eec		       20 e5 91 	      jsr	W91E5
   1670  8eef		       ad f8 02 	      lda	$02F8	; Not used
   1671  8ef2		       d0 08		      bne	W8EFC
   1672  8ef4		       20 d3 93 	      jsr	W93D3
   1673  8ef7		       a9 80		      lda	#$80
   1674  8ef9		       8d f8 02 	      sta	$02F8	; Not used
   1675  8efc				   W8EFC
   1676  8efc		       68		      pla
   1677  8efd		       a8		      tay
   1678  8efe		       4c cd 8e 	      jmp	W8ECD
   1679  8f01
   1680  8f01				   W8F01
   1681  8f01		       c8		      iny
   1682  8f02		       a9 00		      lda	#$00
   1683  8f04		       95 3b		      sta	$3B,x	; BASIC precedent line number
   1684  8f06		       e8		      inx
   1685  8f07				   W8F07
   1686  8f07		       8a		      txa
   1687  8f08		       d0 06		      bne	W8F10
   1688  8f0a		       c0 01		      cpy	#$01
   1689  8f0c		       f0 bc		      beq	W8ECA
   1690  8f0e		       d0 19		      bne	W8F29
   1691  8f10				   W8F10
   1692  8f10		       86 42		      stx	$42	; Pointer: DATA current element address
   1693  8f12		       98		      tya
   1694  8f13		       48		      pha
   1695  8f14		       20 6e 8f 	      jsr	W8F6E
   1696  8f17		       20 e5 91 	      jsr	W91E5
   1697  8f1a		       ad f8 02 	      lda	$02F8	; Not used
   1698  8f1d		       d0 08		      bne	W8F27
   1699  8f1f		       20 d3 93 	      jsr	W93D3
   1700  8f22		       a9 80		      lda	#$80
   1701  8f24		       8d f8 02 	      sta	$02F8	; Not used
   1702  8f27				   W8F27
   1703  8f27		       68		      pla
   1704  8f28		       a8		      tay
   1705  8f29				   W8F29
   1706  8f29		       20 fb a8 	      jsr	$A8FB	; BASIC ROM
   1707  8f2c				   W8F2C
   1708  8f2c		       4c 54 8f 	      jmp	W8F54
   1709  8f2f
   1710  8f2f		       a9 02		      lda	#$02
   1711  8f31		       85 42		      sta	$42	; Pointer: DATA current element address
   1712  8f33				   W8F33
   1713  8f33		       20 4c 92 	      jsr	W924C
   1714  8f36		       85 3c		      sta	$3C	; BASIC precedent line number
   1715  8f38		       84 3b		      sty	$3B	; BASIC precedent line number
   1716  8f3a		       20 6e 8f 	      jsr	W8F6E
   1717  8f3d		       20 e5 91 	      jsr	W91E5
   1718  8f40		       ad f8 02 	      lda	$02F8	; Not used
   1719  8f43		       d0 08		      bne	W8F4D
   1720  8f45		       20 d3 93 	      jsr	W93D3
   1721  8f48		       a9 80		      lda	#$80
   1722  8f4a		       8d f8 02 	      sta	$02F8	; Not used
   1723  8f4d				   W8F4D
   1724  8f4d		       20 79 00 	      jsr	$0079	; CHRGET (Introduce a char) subroutine
   1725  8f50		       c9 2c		      cmp	#$2C
   1726  8f52		       f0 df		      beq	W8F33
   1727  8f54				   W8F54
   1728  8f54		       ad f8 02 	      lda	$02F8	; Not used
   1729  8f57		       29 01		      and	#$01
   1730  8f59		       8d f8 02 	      sta	$02F8	; Not used
   1731  8f5c		       a0 00		      ldy	#$00
   1732  8f5e		       b1 7a		      lda	($7A),y	; CHRGET (Introduce a char) subroutine
   1733  8f60		       f0 09		      beq	W8F6B
   1734  8f62		       c9 3b		      cmp	#$3B
   1735  8f64		       f0 05		      beq	W8F6B
   1736  8f66		       a9 03		      lda	#$03
   1737  8f68		       4c 68 85 	      jmp	W8568
   1738  8f6b
   1739  8f6b				   W8F6B
   1740  8f6b		       4c d3 8d 	      jmp	W8DD3
   1741  8f6e
   1742  8f6e				   W8F6E
   1743  8f6e		       a6 fd		      ldx	$FD
   1744  8f70		       ca		      dex
   1745  8f71		       f0 2b		      beq	W8F9E
   1746  8f73		       ad f8 02 	      lda	$02F8	; Not used
   1747  8f76		       d0 03		      bne	W8F7B
   1748  8f78		       4c 90 93 	      jmp	W9390
   1749  8f7b
   1750  8f7b				   W8F7B
   1751  8f7b		       10 21		      bpl	W8F9E
   1752  8f7d		       ae f7 02 	      ldx	$02F7	; Not used
   1753  8f80		       20 c9 ff 	      jsr	$FFC9	; Routine: Open an output canal
   1754  8f83		       90 03		      bcc	W8F88
   1755  8f85		       4c f9 e0 	      jmp	$E0F9
   1756  8f88
   1757  8f88				   W8F88
   1758  8f88		       a2 08		      ldx	#$08
   1759  8f8a		       20 96 94 	      jsr	W9496
   1760  8f8d		       20 90 93 	      jsr	W9390
   1761  8f90		       ae f7 02 	      ldx	$02F7	; Not used
   1762  8f93		       20 c9 ff 	      jsr	$FFC9	; Routine: Open an output canal
   1763  8f96		       90 03		      bcc	W8F9B
   1764  8f98		       4c f9 e0 	      jmp	$E0F9
   1765  8f9b
   1766  8f9b				   W8F9B
   1767  8f9b		       4c eb 93 	      jmp	W93EB
   1768  8f9e
   1769  8f9e				   W8F9E
   1770  8f9e		       60		      rts
   1771  8f9f
   1772  8f9f		       20 4c 92 	      jsr	W924C
   1773  8fa2		       c9 00		      cmp	#$00
   1774  8fa4		       f0 03		      beq	W8FA9
   1775  8fa6		       4c 48 b2 	      jmp	$B248	; Routine: Write error message (ILLEGAL QUANTITY)
   1776  8fa9
   1777  8fa9				   W8FA9
   1778  8fa9		       85 42		      sta	$42	; Pointer: DATA current element address
   1779  8fab		       c0 00		      cpy	#$00
   1780  8fad		       f0 a5		      beq	W8F54
   1781  8faf		       85 3b		      sta	$3B	; BASIC precedent line number
   1782  8fb1		       88		      dey
   1783  8fb2		       e6 42		      inc	$42	; Pointer: DATA current element address
   1784  8fb4		       c0 00		      cpy	#$00
   1785  8fb6		       f0 0e		      beq	W8FC6
   1786  8fb8		       85 3c		      sta	$3C	; BASIC precedent line number
   1787  8fba		       88		      dey
   1788  8fbb		       e6 42		      inc	$42	; Pointer: DATA current element address
   1789  8fbd		       c0 00		      cpy	#$00
   1790  8fbf		       f0 05		      beq	W8FC6
   1791  8fc1		       85 3d		      sta	$3D	; Pointer: BASIC instruction for CONT
   1792  8fc3		       88		      dey
   1793  8fc4		       e6 42		      inc	$42	; Pointer: DATA current element address
   1794  8fc6				   W8FC6
   1795  8fc6		       98		      tya
   1796  8fc7		       48		      pha
   1797  8fc8		       20 6e 8f 	      jsr	W8F6E
   1798  8fcb		       20 e5 91 	      jsr	W91E5
   1799  8fce		       ad f8 02 	      lda	$02F8	; Not used
   1800  8fd1		       d0 08		      bne	W8FDB
   1801  8fd3		       20 d3 93 	      jsr	W93D3
   1802  8fd6		       a9 80		      lda	#$80
   1803  8fd8		       8d f8 02 	      sta	$02F8	; Not used
   1804  8fdb				   W8FDB
   1805  8fdb		       68		      pla
   1806  8fdc		       a8		      tay
   1807  8fdd		       a9 00		      lda	#$00
   1808  8fdf		       f0 c8		      beq	W8FA9
   1809  8fe1		       a6 fd		      ldx	$FD
   1810  8fe3		       ca		      dex
   1811  8fe4		       d0 07		      bne	W8FED
   1812  8fe6		       a9 80		      lda	#$80
   1813  8fe8		       85 fe		      sta	$FE	; Free 0 page for user program
   1814  8fea		       4c bc 8d 	      jmp	W8DBC
   1815  8fed
   1816  8fed				   W8FED
   1817  8fed		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
   1818  8ff0		       a6 7a		      ldx	$7A	; CHRGET (Introduce a char) subroutine
   1819  8ff2		       a4 7b		      ldy	$7B	; CHRGET (Introduce a char) subroutine
   1820  8ff4		       e8		      inx
   1821  8ff5		       d0 01		      bne	W8FF8
   1822  8ff7		       c8		      iny
   1823  8ff8				   W8FF8
   1824  8ff8		       86 bb		      stx	$BB	; Pointer: current file name
   1825  8ffa		       84 bc		      sty	$BC	; Pointer: current file name
   1826  8ffc		       a0 00		      ldy	#$00
   1827  8ffe				   W8FFE
   1828  8ffe		       c8		      iny
   1829  8fff		       b1 7a		      lda	($7A),y	; CHRGET (Introduce a char) subroutine
   1830  9001		       c9 22		      cmp	#$22
   1831  9003		       d0 f9		      bne	W8FFE
   1832  9005		       88		      dey
   1833  9006		       84 b7		      sty	$B7	; Length of current file name
   1834  9008		       a9 0e		      lda	#$0E
   1835  900a		       a0 6e		      ldy	#$6E
   1836  900c		       a2 08		      ldx	#$08
   1837  900e		       20 ba ff 	      jsr	$FFBA	; Routine: Set primary, secondary and logical addresses
   1838  9011		       20 c0 ff 	      jsr	$FFC0	; Routine: Open a logical file
   1839  9014		       90 03		      bcc	W9019
   1840  9016		       4c f9 e0 	      jmp	$E0F9
   1841  9019
   1842  9019				   W9019
   1843  9019		       a2 0e		      ldx	#$0E
   1844  901b		       20 c9 ff 	      jsr	$FFC9	; Routine: Open an output canal
   1845  901e		       a5 fb		      lda	$FB	; Free 0 page for user program
   1846  9020		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   1847  9023		       a5 fc		      lda	$FC
   1848  9025		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   1849  9028		       20 cc ff 	      jsr	$FFCC	; Routine: Close the input and output channel
   1850  902b		       a5 90		      lda	$90	; Statusbyte ST of I/O KERNAL
   1851  902d		       d0 03		      bne	W9032
   1852  902f		       4c bc 8d 	      jmp	W8DBC
   1853  9032
   1854  9032				   W9032
   1855  9032		       20 e7 ff 	      jsr	$FFE7	; Routine: Close all canals and files
   1856  9035		       a9 de		      lda	#$DE
   1857  9037		       a0 83		      ldy	#$83
   1858  9039		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   1859  903c		       4c ca 9c 	      jmp	W9CCA
   1860  903f
   1861  903f		       a5 fd		      lda	$FD
   1862  9041		       c9 02		      cmp	#$02
   1863  9043		       90 0c		      bcc	W9051
   1864  9045		       a9 00		      lda	#$00
   1865  9047		       85 fe		      sta	$FE	; Free 0 page for user program
   1866  9049		       a9 0e		      lda	#$0E
   1867  904b		       20 c3 ff 	      jsr	$FFC3	; Routine: Close a specified logical file
   1868  904e		       20 cc ff 	      jsr	$FFCC	; Routine: Close the input and output channel
   1869  9051				   W9051
   1870  9051		       4c bc 8d 	      jmp	W8DBC
   1871  9054
   1872  9054				   W9054
   1873  9054		       20 09 a9 	      jsr	$A909	; Routine: Search 0 char in string (position)
   1874  9057		       20 fb a8 	      jsr	$A8FB	; BASIC ROM
   1875  905a		       a0 04		      ldy	#$04
   1876  905c		       20 fb a8 	      jsr	$A8FB	; BASIC ROM
   1877  905f		       a5 7b		      lda	$7B	; CHRGET (Introduce a char) subroutine
   1878  9061		       c5 2e		      cmp	$2E	; Pointer: BASIC starting variables
   1879  9063		       90 0b		      bcc	W9070
   1880  9065		       a5 7a		      lda	$7A	; CHRGET (Introduce a char) subroutine
   1881  9067		       c5 2d		      cmp	$2D	; Pointer: BASIC starting variables
   1882  9069		       90 05		      bcc	W9070
   1883  906b		       a9 0e		      lda	#$0E
   1884  906d		       4c 68 85 	      jmp	W8568
   1885  9070
   1886  9070				   W9070
   1887  9070		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
   1888  9073		       c9 a2		      cmp	#$A2
   1889  9075		       d0 dd		      bne	W9054
   1890  9077		       4c bc 8d 	      jmp	W8DBC
   1891  907a
   1892  907a		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
   1893  907d				   W907D
   1894  907d		       ee fa 02 	      inc	$02FA	; Not used
   1895  9080		       a5 8b		      lda	$8B	; Real value of the RND seed
   1896  9082		       05 8c		      ora	$8C	; Real value of the RND seed
   1897  9084		       85 8f		      sta	$8F	; Real value of the RND seed
   1898  9086		       20 79 00 	      jsr	$0079	; CHRGET (Introduce a char) subroutine
   1899  9089		       20 b2 88 	      jsr	INSYMTBL
   1900  908c		       a5 7b		      lda	$7B	; CHRGET (Introduce a char) subroutine
   1901  908e		       48		      pha
   1902  908f		       8d fd 02 	      sta	$02FD	; Not used
   1903  9092		       a5 7a		      lda	$7A	; CHRGET (Introduce a char) subroutine
   1904  9094		       48		      pha
   1905  9095		       8d fc 02 	      sta	$02FC	; Not used
   1906  9098		       a9 36		      lda	#$36
   1907  909a		       85 01		      sta	$01	; 6510 I/O register
   1908  909c		       48		      pha
   1909  909d		       a0 01		      ldy	#$01
   1910  909f		       b1 49		      lda	($49),y	; Pointer: variable for the FOR..NEXT
   1911  90a1		       85 7b		      sta	$7B	; CHRGET (Introduce a char) subroutine
   1912  90a3		       88		      dey
   1913  90a4		       b1 49		      lda	($49),y	; Pointer: variable for the FOR..NEXT
   1914  90a6		       85 7a		      sta	$7A	; CHRGET (Introduce a char) subroutine
   1915  90a8		       a9 37		      lda	#$37
   1916  90aa		       85 01		      sta	$01	; 6510 I/O register
   1917  90ac		       20 79 00 	      jsr	$0079	; CHRGET (Introduce a char) subroutine
   1918  90af		       c9 a0		      cmp	#$A0
   1919  90b1		       d0 66		      bne	W9119
   1920  90b3		       20 d0 91 	      jsr	W91D0
   1921  90b6		       20 79 00 	      jsr	$0079	; CHRGET (Introduce a char) subroutine
   1922  90b9		       c9 a0		      cmp	#$A0
   1923  90bb		       d0 62		      bne	W911F
   1924  90bd				   W90BD
   1925  90bd		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
   1926  90c0		       c9 22		      cmp	#$22
   1927  90c2		       d0 09		      bne	W90CD
   1928  90c4		       20 6a 92 	      jsr	W926A
   1929  90c7		       a9 00		      lda	#$00
   1930  90c9		       85 3d		      sta	$3D	; Pointer: BASIC instruction for CONT
   1931  90cb		       f0 03		      beq	W90D0
   1932  90cd				   W90CD
   1933  90cd		       20 4f 92 	      jsr	W924F
   1934  90d0				   W90D0
   1935  90d0		       20 d0 91 	      jsr	W91D0
   1936  90d3		       20 24 91 	      jsr	W9124
   1937  90d6		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
   1938  90d9		       20 b2 88 	      jsr	INSYMTBL
   1939  90dc		       a5 3d		      lda	$3D	; Pointer: BASIC instruction for CONT
   1940  90de		       a6 3c		      ldx	$3C	; BASIC precedent line number
   1941  90e0		       20 d5 92 	      jsr	W92D5
   1942  90e3		       20 79 00 	      jsr	$0079	; CHRGET (Introduce a char) subroutine
   1943  90e6		       c9 00		      cmp	#$00
   1944  90e8		       f0 18		      beq	W9102
   1945  90ea		       c9 3b		      cmp	#$3B
   1946  90ec		       f0 14		      beq	W9102
   1947  90ee		       c9 2c		      cmp	#$2C
   1948  90f0		       d0 2d		      bne	W911F
   1949  90f2		       20 d0 91 	      jsr	W91D0
   1950  90f5		       20 79 00 	      jsr	$0079	; CHRGET (Introduce a char) subroutine
   1951  90f8		       c9 2c		      cmp	#$2C
   1952  90fa		       d0 23		      bne	W911F
   1953  90fc		       20 3f 91 	      jsr	W913F
   1954  90ff		       4c bd 90 	      jmp	W90BD
   1955  9102
   1956  9102				   W9102
   1957  9102		       20 d0 91 	      jsr	W91D0
   1958  9105		       20 79 00 	      jsr	$0079	; CHRGET (Introduce a char) subroutine
   1959  9108		       c9 00		      cmp	#$00
   1960  910a		       f0 04		      beq	W9110
   1961  910c		       c9 3b		      cmp	#$3B
   1962  910e		       d0 0f		      bne	W911F
   1963  9110				   W9110
   1964  9110		       20 d0 91 	      jsr	W91D0
   1965  9113				   W9113
   1966  9113		       20 38 91 	      jsr	W9138
   1967  9116		       4c bc 8d 	      jmp	W8DBC
   1968  9119
   1969  9119				   W9119
   1970  9119		       20 24 91 	      jsr	W9124
   1971  911c		       4c 13 91 	      jmp	W9113
   1972  911f
   1973  911f				   W911F
   1974  911f		       a9 0b		      lda	#$0B
   1975  9121		       4c 68 85 	      jmp	W8568
   1976  9124
   1977  9124				   W9124
   1978  9124		       a5 8f		      lda	$8F	; Real value of the RND seed
   1979  9126		       d0 09		      bne	W9131
   1980  9128		       a5 8d		      lda	$8D	; Real value of the RND seed
   1981  912a		       a6 8e		      ldx	$8E	; Real value of the RND seed
   1982  912c		       85 8b		      sta	$8B	; Real value of the RND seed
   1983  912e		       86 8c		      stx	$8C	; Real value of the RND seed
   1984  9130		       60		      rts
   1985  9131
   1986  9131				   W9131
   1987  9131		       e6 8b		      inc	$8B	; Real value of the RND seed
   1988  9133		       d0 02		      bne	W9137
   1989  9135		       e6 8c		      inc	$8C	; Real value of the RND seed
   1990  9137				   W9137
   1991  9137		       60		      rts
   1992  9138
   1993  9138				   W9138
   1994  9138		       e6 8d		      inc	$8D	; Real value of the RND seed
   1995  913a		       d0 02		      bne	W913E
   1996  913c		       e6 8e		      inc	$8E	; Real value of the RND seed
   1997  913e				   W913E
   1998  913e		       60		      rts
   1999  913f
   2000  913f				   W913F
   2001  913f		       a5 8f		      lda	$8F	; Real value of the RND seed
   2002  9141		       d0 07		      bne	W914A
   2003  9143		       a9 00		      lda	#$00
   2004  9145		       85 8b		      sta	$8B	; Real value of the RND seed
   2005  9147		       85 8c		      sta	$8C	; Real value of the RND seed
   2006  9149		       60		      rts
   2007  914a
   2008  914a				   W914A
   2009  914a		       a5 8b		      lda	$8B	; Real value of the RND seed
   2010  914c		       d0 02		      bne	W9150
   2011  914e		       c6 8c		      dec	$8C	; Real value of the RND seed
   2012  9150				   W9150
   2013  9150		       c6 8b		      dec	$8B	; Real value of the RND seed
   2014  9152		       60		      rts
   2015  9153
   2016  9153		       ee fb 02 	      inc	$02FB	; Not used
   2017  9156		       68		      pla
   2018  9157		       c9 36		      cmp	#$36
   2019  9159		       d0 1b		      bne	W9176
   2020  915b		       68		      pla
   2021  915c		       85 7a		      sta	$7A	; CHRGET (Introduce a char) subroutine
   2022  915e		       68		      pla
   2023  915f		       85 7b		      sta	$7B	; CHRGET (Introduce a char) subroutine
   2024  9161		       68		      pla
   2025  9162		       48		      pha
   2026  9163		       c9 36		      cmp	#$36
   2027  9165		       d0 06		      bne	W916D
   2028  9167		       20 4a 91 	      jsr	W914A
   2029  916a		       4c d3 8d 	      jmp	W8DD3
   2030  916d
   2031  916d				   W916D
   2032  916d		       a9 00		      lda	#$00
   2033  916f		       85 8b		      sta	$8B	; Real value of the RND seed
   2034  9171		       85 8c		      sta	$8C	; Real value of the RND seed
   2035  9173		       4c d3 8d 	      jmp	W8DD3
   2036  9176
   2037  9176				   W9176
   2038  9176		       a9 0c		      lda	#$0C
   2039  9178				   W9178
   2040  9178		       4c 68 85 	      jmp	W8568
   2041  917b
   2042  917b		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
   2043  917e		       20 8a ad 	      jsr	$AD8A	; Routine: FRMNUM: Get expression (FRMEVL) and check, if numeric
   2044  9181		       a5 61		      lda	$61	; Floating point accumulator #1: Exponent
   2045  9183		       f0 0c		      beq	W9191
   2046  9185		       20 fd ae 	      jsr	$AEFD	; Routine: Verify if there's ',' in current char (Syntax)
   2047  9188		       20 4f 92 	      jsr	W924F
   2048  918b				   W918B
   2049  918b		       20 a3 a8 	      jsr	$A8A3	; BASIC ROM
   2050  918e		       4c dc 8c 	      jmp	W8CDC
   2051  9191
   2052  9191				   W9191
   2053  9191		       4c bc 8d 	      jmp	W8DBC
   2054  9194
   2055  9194		       20 4c 92 	      jsr	W924C
   2056  9197		       4c 8b 91 	      jmp	W918B
   2057  919a
   2058  919a		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
   2059  919d		       20 8a ad 	      jsr	$AD8A	; Routine: FRMNUM: Get expression (FRMEVL) and check, if numeric
   2060  91a0		       a5 61		      lda	$61	; Floating point accumulator #1: Exponent
   2061  91a2		       f0 03		      beq	W91A7
   2062  91a4		       4c a2 8d 	      jmp	W8DA2
   2063  91a7
   2064  91a7				   W91A7
   2065  91a7		       20 09 a9 	      jsr	$A909	; Routine: Search 0 char in string (position)
   2066  91aa		       c8		      iny
   2067  91ab		       c8		      iny
   2068  91ac		       c8		      iny
   2069  91ad		       c8		      iny
   2070  91ae		       20 fb a8 	      jsr	$A8FB	; BASIC ROM
   2071  91b1		       a5 7b		      lda	$7B	; CHRGET (Introduce a char) subroutine
   2072  91b3		       c5 2e		      cmp	$2E	; Pointer: BASIC starting variables
   2073  91b5		       90 0b		      bcc	W91C2
   2074  91b7		       a5 7a		      lda	$7A	; CHRGET (Introduce a char) subroutine
   2075  91b9		       c5 2d		      cmp	$2D	; Pointer: BASIC starting variables
   2076  91bb		       90 05		      bcc	W91C2
   2077  91bd		       a9 0f		      lda	#$0F
   2078  91bf		       4c 68 85 	      jmp	W8568
   2079  91c2
   2080  91c2				   W91C2
   2081  91c2		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
   2082  91c5		       c9 b0		      cmp	#$B0
   2083  91c7		       f0 04		      beq	W91CD
   2084  91c9		       c9 af		      cmp	#$AF
   2085  91cb		       d0 da		      bne	W91A7
   2086  91cd				   W91CD
   2087  91cd		       4c bc 8d 	      jmp	W8DBC
   2088  91d0
   2089  91d0				   W91D0
   2090  91d0		       a6 7a		      ldx	$7A	; CHRGET (Introduce a char) subroutine
   2091  91d2		       a4 7b		      ldy	$7B	; CHRGET (Introduce a char) subroutine
   2092  91d4		       ad fc 02 	      lda	$02FC	; Not used
   2093  91d7		       85 7a		      sta	$7A	; CHRGET (Introduce a char) subroutine
   2094  91d9		       ad fd 02 	      lda	$02FD	; Not used
   2095  91dc		       85 7b		      sta	$7B	; CHRGET (Introduce a char) subroutine
   2096  91de		       8e fc 02 	      stx	$02FC	; Not used
   2097  91e1		       8c fd 02 	      sty	$02FD	; Not used
   2098  91e4		       60		      rts
   2099  91e5
   2100  91e5				   W91E5
   2101  91e5		       a6 fd		      ldx	$FD
   2102  91e7		       ca		      dex
   2103  91e8		       f0 2d		      beq	W9217
   2104  91ea		       a5 fe		      lda	$FE	; Free 0 page for user program
   2105  91ec		       30 35		      bmi	W9223
   2106  91ee		       d0 27		      bne	W9217
   2107  91f0		       a5 fb		      lda	$FB	; Free 0 page for user program
   2108  91f2		       18		      clc
   2109  91f3		       6d ee 02 	      adc	$02EE	; Not used
   2110  91f6		       85 22		      sta	$22	; Utility programs pointers area
   2111  91f8		       a5 fc		      lda	$FC
   2112  91fa		       6d ef 02 	      adc	$02EF	; Not used
   2113  91fd		       85 23		      sta	$23	; Utility programs pointers area
   2114  91ff		       a6 42		      ldx	$42	; Pointer: DATA current element address
   2115  9201		       a0 00		      ldy	#$00
   2116  9203		       a5 3b		      lda	$3B	; BASIC precedent line number
   2117  9205		       91 22		      sta	($22),y	; Utility programs pointers area
   2118  9207		       ca		      dex
   2119  9208		       f0 0d		      beq	W9217
   2120  920a		       c8		      iny
   2121  920b		       a5 3c		      lda	$3C	; BASIC precedent line number
   2122  920d		       91 22		      sta	($22),y	; Utility programs pointers area
   2123  920f		       ca		      dex
   2124  9210		       f0 05		      beq	W9217
   2125  9212		       c8		      iny
   2126  9213		       a5 3d		      lda	$3D	; Pointer: BASIC instruction for CONT
   2127  9215		       91 22		      sta	($22),y	; Utility programs pointers area
   2128  9217				   W9217
   2129  9217		       a5 42		      lda	$42	; Pointer: DATA current element address
   2130  9219		       18		      clc
   2131  921a		       65 fb		      adc	$FB	; Free 0 page for user program
   2132  921c		       85 fb		      sta	$FB	; Free 0 page for user program
   2133  921e		       90 02		      bcc	W9222
   2134  9220		       e6 fc		      inc	$FC
   2135  9222				   W9222
   2136  9222		       60		      rts
   2137  9223
   2138  9223				   W9223
   2139  9223		       a2 0e		      ldx	#$0E
   2140  9225		       20 c9 ff 	      jsr	$FFC9	; Routine: Open an output canal
   2141  9228		       a6 42		      ldx	$42	; Pointer: DATA current element address
   2142  922a		       a5 3b		      lda	$3B	; BASIC precedent line number
   2143  922c		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   2144  922f		       ca		      dex
   2145  9230		       f0 0d		      beq	W923F
   2146  9232		       a5 3c		      lda	$3C	; BASIC precedent line number
   2147  9234				   W9234
   2148  9234		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   2149  9237		       ca		      dex
   2150  9238		       f0 05		      beq	W923F
   2151  923a		       a5 3d		      lda	$3D	; Pointer: BASIC instruction for CONT
   2152  923c		       4c 34 92 	      jmp	W9234
   2153  923f
   2154  923f				   W923F
   2155  923f		       20 cc ff 	      jsr	$FFCC	; Routine: Close the input and output channel
   2156  9242		       a5 90		      lda	$90	; Statusbyte ST of I/O KERNAL
   2157  9244		       f0 03		      beq	W9249
   2158  9246		       4c 32 90 	      jmp	W9032
   2159  9249
   2160  9249				   W9249
   2161  9249		       4c 17 92 	      jmp	W9217
   2162  924c
   2163  924c				   W924C
   2164  924c		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
   2165  924f				   W924F
   2166  924f		       20 8a ad 	      jsr	$AD8A	; Routine: FRMNUM: Get expression (FRMEVL) and check, if numeric
   2167  9252		       20 f7 b7 	      jsr	$B7F7	; Routine: Converts FAC in 2-byte integer to $14, $15 and YA
   2168  9255		       85 3d		      sta	$3D	; Pointer: BASIC instruction for CONT
   2169  9257		       84 3c		      sty	$3C	; BASIC precedent line number
   2170  9259		       60		      rts
   2171  925a
   2172  925a				   W925A
   2173  925a		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
   2174  925d		       c9 22		      cmp	#$22
   2175  925f		       f0 09		      beq	W926A
   2176  9261		       20 4f 92 	      jsr	W924F
   2177  9264		       c9 00		      cmp	#$00
   2178  9266		       d0 16		      bne	W927E
   2179  9268		       98		      tya
   2180  9269		       60		      rts
   2181  926a
   2182  926a				   W926A
   2183  926a		       a0 01		      ldy	#$01
   2184  926c		       b1 7a		      lda	($7A),y	; CHRGET (Introduce a char) subroutine
   2185  926e		       85 3c		      sta	$3C	; BASIC precedent line number
   2186  9270		       c8		      iny
   2187  9271		       b1 7a		      lda	($7A),y	; CHRGET (Introduce a char) subroutine
   2188  9273		       c9 22		      cmp	#$22
   2189  9275		       d0 07		      bne	W927E
   2190  9277		       c8		      iny
   2191  9278		       20 fb a8 	      jsr	$A8FB	; BASIC ROM
   2192  927b		       a5 3c		      lda	$3C	; BASIC precedent line number
   2193  927d		       60		      rts
   2194  927e
   2195  927e				   W927E
   2196  927e		       4c 48 b2 	      jmp	$B248	; Routine: Write error message (ILLEGAL QUANTITY)
   2197  9281
   2198  9281				   W9281
   2199  9281		       a0 00		      ldy	#$00
   2200  9283		       b1 7a		      lda	($7A),y	; CHRGET (Introduce a char) subroutine
   2201  9285		       c9 c0		      cmp	#$C0
   2202  9287		       b0 18		      bcs	W92A1
   2203  9289		       c9 80		      cmp	#$80
   2204  928b		       b0 0d		      bcs	W929A
   2205  928d		       68		      pla
   2206  928e		       68		      pla
   2207  928f		       ad f8 02 	      lda	$02F8	; Not used
   2208  9292		       d0 03		      bne	W9297
   2209  9294		       20 89 94 	      jsr	W9489
   2210  9297				   W9297
   2211  9297		       4c 7d 90 	      jmp	W907D
   2212  929a
   2213  929a				   W929A
   2214  929a		       aa		      tax
   2215  929b		       68		      pla
   2216  929c		       68		      pla
   2217  929d		       8a		      txa
   2218  929e		       4c dc 8d 	      jmp	W8DDC
   2219  92a1
   2220  92a1				   W92A1
   2221  92a1		       c9 f8		      cmp	#$F8
   2222  92a3		       90 05		      bcc	W92AA
   2223  92a5		       a9 01		      lda	#$01
   2224  92a7		       4c 68 85 	      jmp	W8568
   2225  92aa
   2226  92aa				   W92AA
   2227  92aa		       29 3f		      and	#$3F
   2228  92ac		       85 41		      sta	$41	; Pointer: DATA current element address
   2229  92ae		       aa		      tax
   2230  92af		       bd b3 80 	      lda	T_OPCODES,x
   2231  92b2		       85 3b		      sta	$3B	; BASIC precedent line number
   2232  92b4		       20 a6 86 	      jsr	W86A6
   2233  92b7		       20 81 87 	      jsr	W8781
   2234  92ba		       a6 fd		      ldx	$FD
   2235  92bc		       ca		      dex
   2236  92bd		       f0 08		      beq	W92C7
   2237  92bf		       ad f8 02 	      lda	$02F8	; Not used
   2238  92c2		       d0 03		      bne	W92C7
   2239  92c4		       20 90 93 	      jsr	W9390
   2240  92c7				   W92C7
   2241  92c7		       4c e5 91 	      jmp	W91E5
   2242  92ca
   2243  92ca				   W92CA
   2244  92ca		       ad ec 02 	      lda	$02EC	; Not used
   2245  92cd		       ae ed 02 	      ldx	$02ED	; Not used
   2246  92d0		       85 fb		      sta	$FB	; Free 0 page for user program
   2247  92d2		       86 fc		      stx	$FC
   2248  92d4		       60		      rts
   2249  92d5
   2250  92d5				   W92D5
   2251  92d5		       a0 01		      ldy	#$01
   2252  92d7		       91 49		      sta	($49),y	; Pointer: variable for the FOR..NEXT
   2253  92d9		       88		      dey
   2254  92da		       8a		      txa
   2255  92db		       91 49		      sta	($49),y	; Pointer: variable for the FOR..NEXT
   2256  92dd		       84 70		      sty	$70	; Lo Byte #1 (rounding)
   2257  92df		       60		      rts
   2258  92e0
   2259  92e0				   W92E0
   2260  92e0		       a9 65		      lda	#$65
   2261  92e2		       a0 83		      ldy	#$83
   2262  92e4		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   2263  92e7				   W92E7
   2264  92e7		       20 84 94 	      jsr	W9484
   2265  92ea		       ad 08 dc 	      lda	$DC08	; Day time clock #1: 1/10 second
   2266  92ed		       ad 0b dc 	      lda	$DC0B	; Day time clock #1: Hour+[indicator AM/PM]
   2267  92f0		       ad 0a dc 	      lda	$DC0A	; Day time clock #1: Minutes
   2268  92f3		       20 07 93 	      jsr	W9307
   2269  92f6		       ad 09 dc 	      lda	$DC09	; Day time clock #1: Second
   2270  92f9		       20 07 93 	      jsr	W9307
   2271  92fc		       ad 08 dc 	      lda	$DC08	; Day time clock #1: 1/10 second
   2272  92ff		       09 30		      ora	#$30
   2273  9301		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   2274  9304		       4c d7 aa 	      jmp	$AAD7	; Routine: Write return effect and/or advancement
   2275  9307
   2276  9307				   W9307
   2277  9307		       aa		      tax
   2278  9308		       4a		      lsr
   2279  9309		       4a		      lsr
   2280  930a		       4a		      lsr
   2281  930b		       4a		      lsr
   2282  930c		       09 30		      ora	#$30
   2283  930e		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   2284  9311		       8a		      txa
   2285  9312		       29 0f		      and	#$0F
   2286  9314		       09 30		      ora	#$30
   2287  9316		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   2288  9319		       a9 3a		      lda	#$3A
   2289  931b		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   2290  931e		       60		      rts
   2291  931f
   2292  931f				   W931F
   2293  931f		       a5 fb		      lda	$FB	; Free 0 page for user program
   2294  9321		       18		      clc
   2295  9322		       6d ee 02 	      adc	$02EE	; Not used
   2296  9325		       aa		      tax
   2297  9326		       a5 fc		      lda	$FC
   2298  9328		       6d ef 02 	      adc	$02EF	; Not used
   2299  932b		       20 79 93 	      jsr	W9379
   2300  932e		       8a		      txa
   2301  932f		       4c 79 93 	      jmp	W9379
   2302  9332
   2303  9332		       a6 fd		      ldx	$FD
   2304  9334		       ca		      dex
   2305  9335		       f0 2d		      beq	W9364
   2306  9337		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
   2307  933a		       20 19 e2 	      jsr	$E219
   2308  933d		       a5 b8		      lda	$B8	; Current logical file number
   2309  933f		       8d f7 02 	      sta	$02F7	; Not used
   2310  9342		       20 c0 ff 	      jsr	$FFC0	; Routine: Open a logical file
   2311  9345		       b0 20		      bcs	W9367
   2312  9347		       a9 00		      lda	#$00
   2313  9349		       8d f8 02 	      sta	$02F8	; Not used
   2314  934c		       ae f7 02 	      ldx	$02F7	; Not used
   2315  934f		       20 c9 ff 	      jsr	$FFC9	; Routine: Open an output canal
   2316  9352		       90 03		      bcc	W9357
   2317  9354		       4c f9 e0 	      jmp	$E0F9
   2318  9357
   2319  9357				   W9357
   2320  9357		       a9 8d		      lda	#$8D
   2321  9359		       a0 83		      ldy	#$83
   2322  935b		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   2323  935e		       20 d7 aa 	      jsr	$AAD7	; Routine: Write return effect and/or advancement
   2324  9361		       20 cc ff 	      jsr	$FFCC	; Routine: Close the input and output channel
   2325  9364				   W9364
   2326  9364		       4c d3 8d 	      jmp	W8DD3
   2327  9367
   2328  9367				   W9367
   2329  9367		       4c f9 e0 	      jmp	$E0F9
   2330  936a
   2331  936a		       20 4c 92 	      jsr	W924C
   2332  936d		       98		      tya
   2333  936e		       09 80		      ora	#$80
   2334  9370		       8d e8 02 	      sta	$02E8	; Not used
   2335  9373		       8d e9 02 	      sta	$02E9	; Not used
   2336  9376		       4c a2 8d 	      jmp	W8DA2
   2337  9379
   2338  9379				   W9379
   2339  9379		       48		      pha
   2340  937a		       4a		      lsr
   2341  937b		       4a		      lsr
   2342  937c		       4a		      lsr
   2343  937d		       4a		      lsr
   2344  937e		       20 84 93 	      jsr	W9384
   2345  9381		       68		      pla
   2346  9382		       29 0f		      and	#$0F
   2347  9384				   W9384
   2348  9384		       18		      clc
   2349  9385		       69 f6		      adc	#$F6
   2350  9387		       90 02		      bcc	W938B
   2351  9389		       69 06		      adc	#$06
   2352  938b				   W938B
   2353  938b		       69 3a		      adc	#$3A
   2354  938d		       4c d2 ff 	      jmp	$FFD2	; Routine: Send a char in the channel
   2355  9390
   2356  9390				   W9390
   2357  9390		       ae f7 02 	      ldx	$02F7	; Not used
   2358  9393		       20 c9 ff 	      jsr	$FFC9	; Routine: Open an output canal
   2359  9396		       90 03		      bcc	W939B
   2360  9398		       4c f9 e0 	      jmp	$E0F9
   2361  939b
   2362  939b				   W939B
   2363  939b		       20 1f 93 	      jsr	W931F
   2364  939e		       20 7c 94 	      jsr	W947C
   2365  93a1		       a6 42		      ldx	$42	; Pointer: DATA current element address
   2366  93a3		       a5 3b		      lda	$3B	; BASIC precedent line number
   2367  93a5		       20 79 93 	      jsr	W9379
   2368  93a8		       ca		      dex
   2369  93a9		       f0 16		      beq	W93C1
   2370  93ab				   W93AB
   2371  93ab		       20 84 94 	      jsr	W9484
   2372  93ae		       a5 3c		      lda	$3C	; BASIC precedent line number
   2373  93b0		       20 79 93 	      jsr	W9379
   2374  93b3		       ca		      dex
   2375  93b4		       f0 0e		      beq	W93C4
   2376  93b6		       20 84 94 	      jsr	W9484
   2377  93b9		       a5 3d		      lda	$3D	; Pointer: BASIC instruction for CONT
   2378  93bb		       20 79 93 	      jsr	W9379
   2379  93be		       4c c7 93 	      jmp	W93C7
   2380  93c1
   2381  93c1				   W93C1
   2382  93c1		       20 7c 94 	      jsr	W947C
   2383  93c4				   W93C4
   2384  93c4		       20 7c 94 	      jsr	W947C
   2385  93c7				   W93C7
   2386  93c7		       20 7c 94 	      jsr	W947C
   2387  93ca		       4c cc ff 	      jmp	$FFCC	; Routine: Close the input and output channel
   2388  93cd
   2389  93cd				   W93CD
   2390  93cd		       ad f8 02 	      lda	$02F8	; Not used
   2391  93d0		       f0 01		      beq	W93D3
   2392  93d2		       60		      rts
   2393  93d3
   2394  93d3				   W93D3
   2395  93d3		       ad fe 02 	      lda	$02FE	; Not used
   2396  93d6		       ae ff 02 	      ldx	$02FF	; Not used
   2397  93d9		       85 5f		      sta	$5F	; Scratch for numeric operation
   2398  93db		       86 60		      stx	$60	; Scratch for numeric operation
   2399  93dd		       ae f7 02 	      ldx	$02F7	; Not used
   2400  93e0		       20 c9 ff 	      jsr	$FFC9	; Routine: Open an output canal
   2401  93e3		       90 03		      bcc	W93E8
   2402  93e5		       4c f9 e0 	      jmp	$E0F9
   2403  93e8
   2404  93e8				   W93E8
   2405  93e8		       20 47 9a 	      jsr	W9A47
   2406  93eb				   W93EB
   2407  93eb		       2c e8 02 	      bit	$02E8	; Not used
   2408  93ee		       10 2c		      bpl	W941C
   2409  93f0		       ce e9 02 	      dec	$02E9	; Not used
   2410  93f3		       30 27		      bmi	W941C
   2411  93f5		       ad e8 02 	      lda	$02E8	; Not used
   2412  93f8		       8d e9 02 	      sta	$02E9	; Not used
   2413  93fb		       a5 ba		      lda	$BA	; Current device number
   2414  93fd		       c9 03		      cmp	#$03
   2415  93ff		       d0 0f		      bne	W9410
   2416  9401		       20 1f 9b 	      jsr	W9B1F
   2417  9404		       a9 00		      lda	#$00
   2418  9406		       85 d4		      sta	$D4	; Flag: Editor mode "quotation", case 0x00=NO
   2419  9408		       a9 93		      lda	#$93
   2420  940a		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   2421  940d		       4c 15 94 	      jmp	W9415
   2422  9410
   2423  9410				   W9410
   2424  9410		       a9 0c		      lda	#$0C
   2425  9412		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   2426  9415				   W9415
   2427  9415		       a9 8d		      lda	#$8D
   2428  9417		       a0 83		      ldy	#$83
   2429  9419		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   2430  941c				   W941C
   2431  941c		       20 d7 aa 	      jsr	$AAD7	; Routine: Write return effect and/or advancement
   2432  941f		       4c cc ff 	      jmp	$FFCC	; Routine: Close the input and output channel
   2433  9422
   2434  9422		       a6 fd		      ldx	$FD
   2435  9424		       ca		      dex
   2436  9425		       f0 15		      beq	W943C
   2437  9427		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
   2438  942a		       20 19 e2 	      jsr	$E219
   2439  942d		       a2 05		      ldx	#$05
   2440  942f				   W942F
   2441  942f		       b5 b7		      lda	$B7,x	; Length of current file name
   2442  9431		       9d f0 02 	      sta	$02F0,x	; Not used
   2443  9434		       ca		      dex
   2444  9435		       10 f8		      bpl	W942F
   2445  9437		       a9 ff		      lda	#$FF
   2446  9439		       8d f9 02 	      sta	$02F9	; Not used
   2447  943c				   W943C
   2448  943c		       4c bc 8d 	      jmp	W8DBC
   2449  943f
   2450  943f				   W943F
   2451  943f		       4c f9 e0 	      jmp	$E0F9
   2452  9442
   2453  9442				   W9442
   2454  9442		       a2 05		      ldx	#$05
   2455  9444				   W9444
   2456  9444		       bd f0 02 	      lda	$02F0,x	; Not used
   2457  9447		       95 b7		      sta	$B7,x	; Length of current file name
   2458  9449		       ca		      dex
   2459  944a		       10 f8		      bpl	W9444
   2460  944c		       20 c0 ff 	      jsr	$FFC0	; Routine: Open a logical file
   2461  944f		       b0 ee		      bcs	W943F
   2462  9451		       ae f1 02 	      ldx	$02F1	; Not used
   2463  9454		       20 c9 ff 	      jsr	$FFC9	; Routine: Open an output canal
   2464  9457		       b0 e6		      bcs	W943F
   2465  9459		       a9 ac		      lda	#$AC
   2466  945b		       a0 83		      ldy	#$83
   2467  945d		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   2468  9460		       20 1f 9d 	      jsr	W9D1F
   2469  9463		       ad f1 02 	      lda	$02F1	; Not used
   2470  9466		       20 c3 ff 	      jsr	$FFC3	; Routine: Close a specified logical file
   2471  9469		       4c cc ff 	      jmp	$FFCC	; Routine: Close the input and output channel
   2472  946c
   2473  946c		       a6 fd		      ldx	$FD
   2474  946e		       ca		      dex
   2475  946f		       f0 cb		      beq	W943C
   2476  9471		       20 cd 93 	      jsr	W93CD
   2477  9474		       a9 0e		      lda	#$0E
   2478  9476		       20 c3 ff 	      jsr	$FFC3	; Routine: Close a specified logical file
   2479  9479		       4c 4c 8a 	      jmp	W8A4C
   2480  947c
   2481  947c				   W947C
   2482  947c		       a9 20		      lda	#$20
   2483  947e		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   2484  9481		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   2485  9484				   W9484
   2486  9484		       a9 20		      lda	#$20
   2487  9486		       4c d2 ff 	      jmp	$FFD2	; Routine: Send a char in the channel
   2488  9489
   2489  9489				   W9489
   2490  9489		       ae f7 02 	      ldx	$02F7	; Not used
   2491  948c		       20 c9 ff 	      jsr	$FFC9	; Routine: Open an output canal
   2492  948f		       90 03		      bcc	W9494
   2493  9491		       4c f9 e0 	      jmp	$E0F9
   2494  9494
   2495  9494				   W9494
   2496  9494		       a2 12		      ldx	#$12
   2497  9496				   W9496
   2498  9496		       20 84 94 	      jsr	W9484
   2499  9499		       ca		      dex
   2500  949a		       d0 fa		      bne	W9496
   2501  949c		       4c cc ff 	      jmp	$FFCC	; Routine: Close the input and output channel
   2502  949f
   2503  949f		       a9 01		      lda	#$01
   2504  94a1		       85 fe		      sta	$FE	; Free 0 page for user program
   2505  94a3		       4c bc 8d 	      jmp	W8DBC
   2506  94a6
   2507  94a6		       20 4c 92 	      jsr	W924C
   2508  94a9		       8d eb 02 	      sta	$02EB	; Not used
   2509  94ac		       8c ea 02 	      sty	$02EA	; Not used
   2510  94af		       4c a2 8d 	      jmp	W8DA2
   2511  94b2
   2512  94b2		       a9 01		      lda	#$01
   2513  94b4		       8d e7 02 	      sta	$02E7	; Not used
   2514  94b7		       4c bc 8d 	      jmp	W8DBC
   2515  94ba
   2516  94ba				   W94BA
   2517  94ba		       a9 00		      lda	#$00
   2518  94bc		       85 02		      sta	$02
   2519  94be		       60		      rts
   2520  94bf
   2521  94bf				   W94BF
   2522  94bf		       a9 ff		      lda	#$FF
   2523  94c1		       85 3a		      sta	$3A	; BASIC current line number
   2524  94c3		       a6 02		      ldx	$02
   2525  94c5		       f0 0c		      beq	W94D3
   2526  94c7		       30 75		      bmi	W953E
   2527  94c9		       ca		      dex
   2528  94ca		       ca		      dex
   2529  94cb		       f0 68		      beq	W9535
   2530  94cd		       ca		      dex
   2531  94ce		       f0 68		      beq	W9538
   2532  94d0		       ca		      dex
   2533  94d1		       f0 68		      beq	W953B
   2534  94d3				   W94D3
   2535  94d3		       20 60 a5 	      jsr	$A560	; Routine: Read 89 input chars of BASIC command
   2536  94d6		       86 7a		      stx	$7A	; CHRGET (Introduce a char) subroutine
   2537  94d8		       84 7b		      sty	$7B	; CHRGET (Introduce a char) subroutine
   2538  94da		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
   2539  94dd		       aa		      tax
   2540  94de		       f0 f3		      beq	W94D3
   2541  94e0		       c9 2f		      cmp	#$2F
   2542  94e2		       d0 09		      bne	W94ED
   2543  94e4		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
   2544  94e7		       20 a0 aa 	      jsr	$AAA0	; Routine: PRINT instruction
   2545  94ea		       4c 37 85 	      jmp	W8537
   2546  94ed
   2547  94ed				   W94ED
   2548  94ed		       c9 5f		      cmp	#$5F
   2549  94ef		       d0 24		      bne	W9515
   2550  94f1		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
   2551  94f4				   W94F4
   2552  94f4		       20 79 00 	      jsr	$0079	; CHRGET (Introduce a char) subroutine
   2553  94f7		       b0 03		      bcs	W94FC
   2554  94f9		       4c e2 98 	      jmp	W98E2
   2555  94fc
   2556  94fc				   W94FC
   2557  94fc		       a2 15		      ldx	#$15
   2558  94fe				   W94FE
   2559  94fe		       dd ac 82 	      cmp	T_EDICMD,x
   2560  9501		       f0 06		      beq	W9509
   2561  9503		       ca		      dex
   2562  9504		       10 f8		      bpl	W94FE
   2563  9506		       4c 08 af 	      jmp	$AF08	; Routine: Write (SYNTAX) error
   2564  9509
   2565  9509				   W9509
   2566  9509		       8a		      txa
   2567  950a		       0a		      asl
   2568  950b		       aa		      tax
   2569  950c		       bd c2 82 	      lda	$82C2,x
   2570  950f		       48		      pha
   2571  9510		       bd c1 82 	      lda	V_EDICMD,x
   2572  9513		       48		      pha
   2573  9514		       60		      rts
   2574  9515
   2575  9515				   W9515
   2576  9515		       20 79 00 	      jsr	$0079	; CHRGET (Introduce a char) subroutine
   2577  9518		       b0 03		      bcs	W951D
   2578  951a		       4c c0 95 	      jmp	W95C0
   2579  951d
   2580  951d				   W951D
   2581  951d		       c9 40		      cmp	#$40
   2582  951f		       f0 d3		      beq	W94F4
   2583  9521		       c9 3f		      cmp	#$3F
   2584  9523		       f0 0a		      beq	W952F
   2585  9525		       a0 01		      ldy	#$01
   2586  9527		       b1 7a		      lda	($7A),y	; CHRGET (Introduce a char) subroutine
   2587  9529		       f0 c9		      beq	W94F4
   2588  952b		       c9 41		      cmp	#$41
   2589  952d		       90 c5		      bcc	W94F4
   2590  952f				   W952F
   2591  952f		       20 79 a5 	      jsr	$A579	; Routine: BASIC Text "tokenized" (from case 0x0304)
   2592  9532		       4c e1 a7 	      jmp	$A7E1	; BASIC ROM
   2593  9535
   2594  9535				   W9535
   2595  9535		       4c 4a 85 	      jmp	W854A
   2596  9538
   2597  9538				   W9538
   2598  9538		       4c e8 96 	      jmp	W96E8
   2599  953b
   2600  953b				   W953B
   2601  953b		       4c 8e 9b 	      jmp	W9B8E
   2602  953e
   2603  953e				   W953E
   2604  953e		       a5 02		      lda	$02
   2605  9540		       29 7f		      and	#$7F
   2606  9542		       85 02		      sta	$02
   2607  9544		       a9 91		      lda	#$91
   2608  9546		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   2609  9549		       a2 00		      ldx	#$00
   2610  954b				   W954B
   2611  954b		       20 84 94 	      jsr	W9484
   2612  954e		       e8		      inx
   2613  954f		       e0 27		      cpx	#$27
   2614  9551		       90 f8		      bcc	W954B
   2615  9553		       a9 00		      lda	#$00
   2616  9555		       85 d3		      sta	$D3	; Column of cursor on the current line
   2617  9557		       20 44 9a 	      jsr	W9A44
   2618  955a		       c6 d6		      dec	$D6	; Cursor line number
   2619  955c		       a5 d5		      lda	$D5	; Fisical screen line length
   2620  955e		       48		      pha
   2621  955f		       20 d7 aa 	      jsr	$AAD7	; Routine: Write return effect and/or advancement
   2622  9562		       68		      pla
   2623  9563		       c9 27		      cmp	#$27
   2624  9565		       d0 03		      bne	W956A
   2625  9567		       20 d7 aa 	      jsr	$AAD7	; Routine: Write return effect and/or advancement
   2626  956a				   W956A
   2627  956a		       4c bf 94 	      jmp	W94BF
   2628  956d
   2629  956d				   W956D
   2630  956d		       98		      tya
   2631  956e		       48		      pha
   2632  956f		       a0 00		      ldy	#$00
   2633  9571		       84 41		      sty	$41	; Pointer: DATA current element address
   2634  9573				   W9573
   2635  9573		       8a		      txa
   2636  9574		       48		      pha
   2637  9575				   W9575
   2638  9575		       e8		      inx
   2639  9576		       bd 00 02 	      lda	$0200,x	; INPUT buffer of BASIC
   2640  9579		       10 0f		      bpl	W958A
   2641  957b		       29 7f		      and	#$7F
   2642  957d		       85 3b		      sta	$3B	; BASIC precedent line number
   2643  957f		       b9 07 82 	      lda	T_PSEUDOOPS,y
   2644  9582		       29 7f		      and	#$7F
   2645  9584		       c5 3b		      cmp	$3B	; BASIC precedent line number
   2646  9586		       d0 14		      bne	W959C
   2647  9588		       f0 25		      beq	W95AF
   2648  958a				   W958A
   2649  958a		       b9 07 82 	      lda	T_PSEUDOOPS,y
   2650  958d		       08		      php
   2651  958e		       29 7f		      and	#$7F
   2652  9590		       dd 00 02 	      cmp	$0200,x	; INPUT buffer of BASIC
   2653  9593		       d0 06		      bne	W959B
   2654  9595		       28		      plp
   2655  9596		       30 17		      bmi	W95AF
   2656  9598		       c8		      iny
   2657  9599		       d0 da		      bne	W9575
   2658  959b				   W959B
   2659  959b		       28		      plp
   2660  959c				   W959C
   2661  959c		       b9 07 82 	      lda	T_PSEUDOOPS,y
   2662  959f		       30 03		      bmi	W95A4
   2663  95a1		       c8		      iny
   2664  95a2		       d0 f8		      bne	W959C
   2665  95a4				   W95A4
   2666  95a4		       68		      pla
   2667  95a5		       aa		      tax
   2668  95a6		       c8		      iny
   2669  95a7		       c0 73		      cpy	#$73
   2670  95a9		       b0 0e		      bcs	W95B9
   2671  95ab		       e6 41		      inc	$41	; Pointer: DATA current element address
   2672  95ad		       d0 c4		      bne	W9573
   2673  95af				   W95AF
   2674  95af		       68		      pla
   2675  95b0		       68		      pla
   2676  95b1		       a8		      tay
   2677  95b2		       a5 41		      lda	$41	; Pointer: DATA current element address
   2678  95b4		       09 a0		      ora	#$A0
   2679  95b6		       4c 9f 96 	      jmp	W969F
   2680  95b9
   2681  95b9				   W95B9
   2682  95b9		       68		      pla
   2683  95ba		       a8		      tay
   2684  95bb		       a9 2e		      lda	#$2E
   2685  95bd		       4c 9f 96 	      jmp	W969F
   2686  95c0
   2687  95c0				   W95C0
   2688  95c0		       a2 ff		      ldx	#$FF
   2689  95c2		       86 81		      stx	$81	; CHRGET (Introduce a char) subroutine
   2690  95c4		       20 6b a9 	      jsr	$A96B	; Routine: Get decimal number (0...63999, usually a line number) from basic text into $14/$15
   2691  95c7				   W95C7
   2692  95c7		       a9 20		      lda	#$20
   2693  95c9		       85 81		      sta	$81	; CHRGET (Introduce a char) subroutine
   2694  95cb		       a6 7a		      ldx	$7A	; CHRGET (Introduce a char) subroutine
   2695  95cd		       a0 05		      ldy	#$05
   2696  95cf		       bd 00 02 	      lda	$0200,x	; INPUT buffer of BASIC
   2697  95d2		       99 fb 01 	      sta	$01FB,y	; CPU stack
   2698  95d5		       10 0d		      bpl	W95E4
   2699  95d7		       29 bf		      and	#$BF
   2700  95d9		       09 20		      ora	#$20
   2701  95db		       4c 9f 96 	      jmp	W969F
   2702  95de
   2703  95de				   W95DE
   2704  95de		       bd 00 02 	      lda	$0200,x	; INPUT buffer of BASIC
   2705  95e1		       99 fb 01 	      sta	$01FB,y	; CPU stack
   2706  95e4				   W95E4
   2707  95e4		       d0 03		      bne	W95E9
   2708  95e6		       4c d5 96 	      jmp	W96D5
   2709  95e9
   2710  95e9				   W95E9
   2711  95e9		       c9 3b		      cmp	#$3B
   2712  95eb		       d0 03		      bne	W95F0
   2713  95ed		       4c b8 96 	      jmp	W96B8
   2714  95f0
   2715  95f0				   W95F0
   2716  95f0		       c9 2e		      cmp	#$2E
   2717  95f2		       f0 28		      beq	W961C
   2718  95f4		       c9 20		      cmp	#$20
   2719  95f6		       f0 04		      beq	W95FC
   2720  95f8		       e8		      inx
   2721  95f9		       c8		      iny
   2722  95fa		       d0 e2		      bne	W95DE
   2723  95fc				   W95FC
   2724  95fc		       e8		      inx
   2725  95fd		       bd 00 02 	      lda	$0200,x	; INPUT buffer of BASIC
   2726  9600		       d0 03		      bne	W9605
   2727  9602		       4c d1 96 	      jmp	W96D1
   2728  9605
   2729  9605				   W9605
   2730  9605		       c9 20		      cmp	#$20
   2731  9607		       f0 f3		      beq	W95FC
   2732  9609		       c9 22		      cmp	#$22
   2733  960b		       d0 03		      bne	W9610
   2734  960d		       4c c0 96 	      jmp	W96C0
   2735  9610
   2736  9610				   W9610
   2737  9610		       c9 3b		      cmp	#$3B
   2738  9612		       d0 03		      bne	W9617
   2739  9614		       4c b4 96 	      jmp	W96B4
   2740  9617
   2741  9617				   W9617
   2742  9617		       c9 2e		      cmp	#$2E
   2743  9619		       d0 04		      bne	W961F
   2744  961b		       c8		      iny
   2745  961c				   W961C
   2746  961c		       4c 6d 95 	      jmp	W956D
   2747  961f
   2748  961f				   W961F
   2749  961f		       98		      tya
   2750  9620		       48		      pha
   2751  9621		       a0 00		      ldy	#$00
   2752  9623		       84 41		      sty	$41	; Pointer: DATA current element address
   2753  9625				   W9625
   2754  9625		       bd 00 02 	      lda	$0200,x	; INPUT buffer of BASIC
   2755  9628		       d9 0b 80 	      cmp	T_MNEMONIC,y
   2756  962b		       d0 10		      bne	W963D
   2757  962d		       bd 01 02 	      lda	$0201,x	; INPUT buffer of BASIC
   2758  9630		       d9 0c 80 	      cmp	$800C,y
   2759  9633		       d0 08		      bne	W963D
   2760  9635		       bd 02 02 	      lda	$0202,x	; INPUT buffer of BASIC
   2761  9638		       d9 0d 80 	      cmp	$800D,y
   2762  963b		       f0 59		      beq	W9696
   2763  963d				   W963D
   2764  963d		       e6 41		      inc	$41	; Pointer: DATA current element address
   2765  963f		       c8		      iny
   2766  9640		       c8		      iny
   2767  9641		       c8		      iny
   2768  9642		       c0 a8		      cpy	#$A8
   2769  9644		       d0 df		      bne	W9625
   2770  9646		       68		      pla
   2771  9647		       a8		      tay
   2772  9648		       bd 00 02 	      lda	$0200,x	; INPUT buffer of BASIC
   2773  964b		       c9 a1		      cmp	#$A1
   2774  964d		       b0 1d		      bcs	W966C
   2775  964f		       c9 a0		      cmp	#$A0
   2776  9651		       d0 3c		      bne	W968F
   2777  9653		       e8		      inx
   2778  9654		       bd 00 02 	      lda	$0200,x	; INPUT buffer of BASIC
   2779  9657		       ca		      dex
   2780  9658		       20 13 b1 	      jsr	$B113	; Routine: Verify if the char in A is in 'A'..'Z'
   2781  965b		       a9 a0		      lda	#$A0
   2782  965d		       90 3d		      bcc	W969C
   2783  965f		       b0 2e		      bcs	W968F
   2784  9661				   W9661
   2785  9661		       bd 00 02 	      lda	$0200,x	; INPUT buffer of BASIC
   2786  9664		       f0 6b		      beq	W96D1
   2787  9666		       10 0c		      bpl	W9674
   2788  9668		       c9 a0		      cmp	#$A0
   2789  966a		       f0 32		      beq	W969E
   2790  966c				   W966C
   2791  966c		       c9 ff		      cmp	#$FF
   2792  966e		       d0 2c		      bne	W969C
   2793  9670		       a9 de		      lda	#$DE
   2794  9672		       30 2a		      bmi	W969E
   2795  9674				   W9674
   2796  9674		       c9 3b		      cmp	#$3B
   2797  9676		       f0 3c		      beq	W96B4
   2798  9678		       c9 20		      cmp	#$20
   2799  967a		       d0 13		      bne	W968F
   2800  967c				   W967C
   2801  967c		       e8		      inx
   2802  967d		       bd 00 02 	      lda	$0200,x	; INPUT buffer of BASIC
   2803  9680		       f0 4f		      beq	W96D1
   2804  9682		       c9 20		      cmp	#$20
   2805  9684		       f0 f6		      beq	W967C
   2806  9686		       c9 3b		      cmp	#$3B
   2807  9688		       f0 2a		      beq	W96B4
   2808  968a		       ca		      dex
   2809  968b		       a9 a0		      lda	#$A0
   2810  968d		       30 0f		      bmi	W969E
   2811  968f				   W968F
   2812  968f		       c8		      iny
   2813  9690		       99 fb 01 	      sta	$01FB,y	; CPU stack
   2814  9693		       e8		      inx
   2815  9694		       d0 cb		      bne	W9661
   2816  9696				   W9696
   2817  9696		       68		      pla
   2818  9697		       a8		      tay
   2819  9698		       e8		      inx
   2820  9699		       e8		      inx
   2821  969a		       a5 41		      lda	$41	; Pointer: DATA current element address
   2822  969c				   W969C
   2823  969c		       09 c0		      ora	#$C0
   2824  969e				   W969E
   2825  969e		       c8		      iny
   2826  969f				   W969F
   2827  969f		       99 fb 01 	      sta	$01FB,y	; CPU stack
   2828  96a2				   W96A2
   2829  96a2		       e8		      inx
   2830  96a3		       bd 00 02 	      lda	$0200,x	; INPUT buffer of BASIC
   2831  96a6		       f0 29		      beq	W96D1
   2832  96a8		       c9 20		      cmp	#$20
   2833  96aa		       f0 f6		      beq	W96A2
   2834  96ac		       c9 22		      cmp	#$22
   2835  96ae		       f0 10		      beq	W96C0
   2836  96b0		       c9 3b		      cmp	#$3B
   2837  96b2		       d0 ea		      bne	W969E
   2838  96b4				   W96B4
   2839  96b4		       c8		      iny
   2840  96b5		       99 fb 01 	      sta	$01FB,y	; CPU stack
   2841  96b8				   W96B8
   2842  96b8		       e8		      inx
   2843  96b9		       bd 00 02 	      lda	$0200,x	; INPUT buffer of BASIC
   2844  96bc		       d0 f6		      bne	W96B4
   2845  96be		       f0 11		      beq	W96D1
   2846  96c0				   W96C0
   2847  96c0		       c8		      iny
   2848  96c1		       99 fb 01 	      sta	$01FB,y	; CPU stack
   2849  96c4		       e8		      inx
   2850  96c5		       bd 00 02 	      lda	$0200,x	; INPUT buffer of BASIC
   2851  96c8		       f0 07		      beq	W96D1
   2852  96ca		       c9 22		      cmp	#$22
   2853  96cc		       d0 f2		      bne	W96C0
   2854  96ce		       4c 9e 96 	      jmp	W969E
   2855  96d1
   2856  96d1				   W96D1
   2857  96d1		       c8		      iny
   2858  96d2		       99 fb 01 	      sta	$01FB,y	; CPU stack
   2859  96d5				   W96D5
   2860  96d5		       c6 7b		      dec	$7B	; CHRGET (Introduce a char) subroutine
   2861  96d7		       a9 ff		      lda	#$FF
   2862  96d9		       85 7a		      sta	$7A	; CHRGET (Introduce a char) subroutine
   2863  96db		       c0 06		      cpy	#$06
   2864  96dd		       90 06		      bcc	W96E5
   2865  96df		       a5 02		      lda	$02
   2866  96e1		       09 80		      ora	#$80
   2867  96e3		       85 02		      sta	$02
   2868  96e5				   W96E5
   2869  96e5		       4c a2 a4 	      jmp	$A4A2	; BASIC ROM
   2870  96e8
   2871  96e8				   W96E8
   2872  96e8		       ad 3d 03 	      lda	$033D	; Tape I/O buffer
   2873  96eb		       f0 5c		      beq	W9749
   2874  96ed		       ad fe 02 	      lda	$02FE	; Not used
   2875  96f0		       cd 3b 03 	      cmp	$033B	; Not used
   2876  96f3		       f0 0d		      beq	W9702
   2877  96f5		       ad 3c 03 	      lda	$033C	; Tape I/O buffer
   2878  96f8		       85 62		      sta	$62	; Floating point accumulator #1: Mantissa
   2879  96fa		       ad 3b 03 	      lda	$033B	; Not used
   2880  96fd		       85 63		      sta	$63	; Floating point accumulator #1: Mantissa
   2881  96ff		       20 23 9a 	      jsr	W9A23
   2882  9702				   W9702
   2883  9702		       a2 05		      ldx	#$05
   2884  9704		       78		      sei
   2885  9705				   W9705
   2886  9705		       bd 76 02 	      lda	$0276,x	; KERNAL table: Secondary address for each files
   2887  9708		       9d 7b 02 	      sta	$027B,x	; Keyboard buffer queue (FIFO)
   2888  970b		       ca		      dex
   2889  970c		       d0 f7		      bne	W9705
   2890  970e		       86 d3		      stx	$D3	; Column of cursor on the current line
   2891  9710		       a0 04		      ldy	#$04
   2892  9712		       a9 1d		      lda	#$1D
   2893  9714				   W9714
   2894  9714		       99 77 02 	      sta	$0277,y	; Keyboard buffer queue (FIFO)
   2895  9717		       e6 c6		      inc	$C6	; Number of char in keyboard buffer
   2896  9719		       88		      dey
   2897  971a		       10 f8		      bpl	W9714
   2898  971c		       58		      cli
   2899  971d		       20 60 a5 	      jsr	$A560	; Routine: Read 89 input chars of BASIC command
   2900  9720		       86 7a		      stx	$7A	; CHRGET (Introduce a char) subroutine
   2901  9722		       84 7b		      sty	$7B	; CHRGET (Introduce a char) subroutine
   2902  9724		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
   2903  9727		       b0 20		      bcs	W9749
   2904  9729		       a2 ff		      ldx	#$FF
   2905  972b		       86 81		      stx	$81	; CHRGET (Introduce a char) subroutine
   2906  972d		       20 6b a9 	      jsr	$A96B	; Routine: Get decimal number (0...63999, usually a line number) from basic text into $14/$15
   2907  9730		       ad 3b 03 	      lda	$033B	; Not used
   2908  9733		       8d fe 02 	      sta	$02FE	; Not used
   2909  9736		       c5 14		      cmp	$14	; Transient: integer value
   2910  9738		       d0 0c		      bne	W9746
   2911  973a		       18		      clc
   2912  973b		       6d 3d 03 	      adc	$033D	; Tape I/O buffer
   2913  973e		       8d 3b 03 	      sta	$033B	; Not used
   2914  9741		       90 03		      bcc	W9746
   2915  9743		       ee 3c 03 	      inc	$033C	; Tape I/O buffer
   2916  9746				   W9746
   2917  9746		       4c c7 95 	      jmp	W95C7
   2918  9749
   2919  9749				   W9749
   2920  9749		       20 ba 94 	      jsr	W94BA
   2921  974c		       4c bf 94 	      jmp	W94BF
   2922  974f
   2923  974f		       e6 7a		      inc	$7A	; CHRGET (Introduce a char) subroutine
   2924  9751		       a0 00		      ldy	#$00
   2925  9753		       b1 7a		      lda	($7A),y	; CHRGET (Introduce a char) subroutine
   2926  9755		       f0 15		      beq	W976C
   2927  9757		       20 eb b7 	      jsr	$B7EB	; Routine: GETADR and GETBYT: Get 16-bit integer (to $14, $15) and an 8 bit value (X)-parameter for WAIT and POKE
   2928  975a		       a5 14		      lda	$14	; Transient: integer value
   2929  975c		       a4 15		      ldy	$15	; Transient: integer value
   2930  975e		       8d 3b 03 	      sta	$033B	; Not used
   2931  9761		       8c 3c 03 	      sty	$033C	; Tape I/O buffer
   2932  9764		       8e 3d 03 	      stx	$033D	; Tape I/O buffer
   2933  9767		       aa		      tax
   2934  9768		       e8		      inx
   2935  9769		       8e fe 02 	      stx	$02FE	; Not used
   2936  976c				   W976C
   2937  976c		       a9 03		      lda	#$03
   2938  976e		       85 02		      sta	$02
   2939  9770		       4c bf 94 	      jmp	W94BF
   2940  9773
   2941  9773				   W9773
   2942  9773		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
   2943  9776		       90 0d		      bcc	W9785
   2944  9778		       f0 0b		      beq	W9785
   2945  977a		       c9 2d		      cmp	#$2D
   2946  977c		       f0 07		      beq	W9785
   2947  977e		       c9 ab		      cmp	#$AB
   2948  9780		       f0 03		      beq	W9785
   2949  9782				   W9782
   2950  9782		       4c 08 af 	      jmp	$AF08	; Routine: Write (SYNTAX) error
   2951  9785
   2952  9785				   W9785
   2953  9785		       20 6b a9 	      jsr	$A96B	; Routine: Get decimal number (0...63999, usually a line number) from basic text into $14/$15
   2954  9788		       20 13 a6 	      jsr	$A613	; Routine: Calculate start adress of a program line
   2955  978b		       20 79 00 	      jsr	$0079	; CHRGET (Introduce a char) subroutine
   2956  978e		       f0 10		      beq	W97A0
   2957  9790		       c9 2d		      cmp	#$2D
   2958  9792		       f0 04		      beq	W9798
   2959  9794		       c9 ab		      cmp	#$AB
   2960  9796		       d0 ea		      bne	W9782
   2961  9798				   W9798
   2962  9798		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
   2963  979b		       20 6b a9 	      jsr	$A96B	; Routine: Get decimal number (0...63999, usually a line number) from basic text into $14/$15
   2964  979e		       d0 e2		      bne	W9782
   2965  97a0				   W97A0
   2966  97a0		       a5 14		      lda	$14	; Transient: integer value
   2967  97a2		       05 15		      ora	$15	; Transient: integer value
   2968  97a4		       d0 06		      bne	W97AC
   2969  97a6		       a9 ff		      lda	#$FF
   2970  97a8		       85 14		      sta	$14	; Transient: integer value
   2971  97aa		       85 15		      sta	$15	; Transient: integer value
   2972  97ac				   W97AC
   2973  97ac		       60		      rts
   2974  97ad
   2975  97ad				   W97AD
   2976  97ad		       a0 01		      ldy	#$01
   2977  97af		       b1 5f		      lda	($5F),y	; Scratch for numeric operation
   2978  97b1		       f0 13		      beq	$97C6
   2979  97b3		       c8		      iny
   2980  97b4		       b1 5f		      lda	($5F),y	; Scratch for numeric operation
   2981  97b6		       aa		      tax
   2982  97b7		       c8		      iny
   2983  97b8		       b1 5f		      lda	($5F),y	; Scratch for numeric operation
   2984  97ba		       c5 15		      cmp	$15	; Transient: integer value
   2985  97bc		       d0 04		      bne	W97C2
   2986  97be		       e4 14		      cpx	$14	; Transient: integer value
   2987  97c0		       f0 02		      beq	W97C4
   2988  97c2				   W97C2
   2989  97c2		       b0 03		      bcs	W97C7
   2990  97c4				   W97C4
   2991  97c4		       18		      clc
   2992  97c5		       24 38		      bit	$38	; Pointer: BASIC ending memory
   2993  97c7				   W97C7
   2994  97c7		       60		      rts
   2995  97c8
   2996  97c8				   W97C8
   2997  97c8		       a0 00		      ldy	#$00
   2998  97ca		       b1 5f		      lda	($5F),y	; Scratch for numeric operation
   2999  97cc		       aa		      tax
   3000  97cd		       c8		      iny
   3001  97ce		       b1 5f		      lda	($5F),y	; Scratch for numeric operation
   3002  97d0		       85 60		      sta	$60	; Scratch for numeric operation
   3003  97d2		       86 5f		      stx	$5F	; Scratch for numeric operation
   3004  97d4		       60		      rts
   3005  97d5
   3006  97d5				   W97D5
   3007  97d5		       4c 48 b2 	      jmp	$B248	; Routine: Write error message (ILLEGAL QUANTITY)
   3008  97d8
   3009  97d8		       a9 bc		      lda	#$BC
   3010  97da		       a0 83		      ldy	#$83
   3011  97dc		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   3012  97df		       a9 00		      lda	#$00
   3013  97e1		       85 cc		      sta	$CC	; Flash state: 0=flashing
   3014  97e3				   W97E3
   3015  97e3		       a5 c6		      lda	$C6	; Number of char in keyboard buffer
   3016  97e5		       f0 fc		      beq	W97E3
   3017  97e7		       a9 01		      lda	#$01
   3018  97e9		       85 cc		      sta	$CC	; Flash state: 0=flashing
   3019  97eb		       a9 00		      lda	#$00
   3020  97ed		       85 c6		      sta	$C6	; Number of char in keyboard buffer
   3021  97ef		       ad 77 02 	      lda	$0277	; Keyboard buffer queue (FIFO)
   3022  97f2		       c9 59		      cmp	#$59
   3023  97f4		       f0 08		      beq	W97FE
   3024  97f6		       a9 4e		      lda	#$4E
   3025  97f8		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   3026  97fb		       4c 37 85 	      jmp	W8537
   3027  97fe
   3028  97fe				   W97FE
   3029  97fe		       a9 59		      lda	#$59
   3030  9800		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   3031  9803		       20 73 97 	      jsr	W9773
   3032  9806		       a5 5f		      lda	$5F	; Scratch for numeric operation
   3033  9808		       a6 60		      ldx	$60	; Scratch for numeric operation
   3034  980a		       85 19		      sta	$19	; Transient strings stack
   3035  980c		       86 1a		      stx	$1A
   3036  980e		       a5 14		      lda	$14	; Transient: integer value
   3037  9810		       25 15		      and	$15	; Transient: integer value
   3038  9812		       aa		      tax
   3039  9813		       e8		      inx
   3040  9814		       f0 06		      beq	W981C
   3041  9816		       e6 14		      inc	$14	; Transient: integer value
   3042  9818		       d0 02		      bne	W981C
   3043  981a		       e6 15		      inc	$15	; Transient: integer value
   3044  981c				   W981C
   3045  981c		       20 13 a6 	      jsr	$A613	; Routine: Calculate start adress of a program line
   3046  981f		       a5 5f		      lda	$5F	; Scratch for numeric operation
   3047  9821		       a6 60		      ldx	$60	; Scratch for numeric operation
   3048  9823		       85 24		      sta	$24	; Utility programs pointers area
   3049  9825		       86 25		      stx	$25	; Utility programs pointers area
   3050  9827		       38		      sec
   3051  9828		       e5 19		      sbc	$19	; Transient strings stack
   3052  982a		       8a		      txa
   3053  982b		       e5 1a		      sbc	$1A
   3054  982d		       90 a6		      bcc	W97D5
   3055  982f		       a5 2d		      lda	$2D	; Pointer: BASIC starting variables
   3056  9831		       e5 24		      sbc	$24	; Utility programs pointers area
   3057  9833		       85 5f		      sta	$5F	; Scratch for numeric operation
   3058  9835		       a5 2e		      lda	$2E	; Pointer: BASIC starting variables
   3059  9837		       e5 25		      sbc	$25	; Utility programs pointers area
   3060  9839		       85 60		      sta	$60	; Scratch for numeric operation
   3061  983b		       18		      clc
   3062  983c		       a5 19		      lda	$19	; Transient strings stack
   3063  983e		       65 5f		      adc	$5F	; Scratch for numeric operation
   3064  9840		       85 2d		      sta	$2D	; Pointer: BASIC starting variables
   3065  9842		       a5 1a		      lda	$1A
   3066  9844		       65 60		      adc	$60	; Scratch for numeric operation
   3067  9846		       85 2e		      sta	$2E	; Pointer: BASIC starting variables
   3068  9848		       a0 00		      ldy	#$00
   3069  984a				   W984A
   3070  984a		       a5 5f		      lda	$5F	; Scratch for numeric operation
   3071  984c		       38		      sec
   3072  984d		       e9 01		      sbc	#$01
   3073  984f		       85 5f		      sta	$5F	; Scratch for numeric operation
   3074  9851		       a5 60		      lda	$60	; Scratch for numeric operation
   3075  9853		       e9 00		      sbc	#$00
   3076  9855		       85 60		      sta	$60	; Scratch for numeric operation
   3077  9857		       30 12		      bmi	W986B
   3078  9859		       b1 24		      lda	($24),y	; Utility programs pointers area
   3079  985b		       91 19		      sta	($19),y	; Transient strings stack
   3080  985d		       e6 19		      inc	$19	; Transient strings stack
   3081  985f		       d0 02		      bne	W9863
   3082  9861		       e6 1a		      inc	$1A
   3083  9863				   W9863
   3084  9863		       e6 24		      inc	$24	; Utility programs pointers area
   3085  9865		       d0 02		      bne	W9869
   3086  9867		       e6 25		      inc	$25	; Utility programs pointers area
   3087  9869				   W9869
   3088  9869		       d0 df		      bne	W984A
   3089  986b				   W986B
   3090  986b		       20 59 a6 	      jsr	$A659	; BASIC ROM
   3091  986e		       20 33 a5 	      jsr	$A533	; Routine: Relink BASIC program
   3092  9871		       4c 37 85 	      jmp	W8537
   3093  9874
   3094  9874				   W9874
   3095  9874		       20 73 97 	      jsr	W9773
   3096  9877				   W9877
   3097  9877		       20 2c a8 	      jsr	$A82C	; BASIC ROM
   3098  987a		       20 ad 97 	      jsr	W97AD
   3099  987d		       b0 0c		      bcs	W988B
   3100  987f		       20 44 9a 	      jsr	W9A44
   3101  9882		       20 d7 aa 	      jsr	$AAD7	; Routine: Write return effect and/or advancement
   3102  9885		       20 c8 97 	      jsr	W97C8
   3103  9888		       4c 77 98 	      jmp	W9877
   3104  988b
   3105  988b				   W988B
   3106  988b		       4c 37 85 	      jmp	W8537
   3107  988e
   3108  988e		       20 9b b7 	      jsr	$B79B	; Routine: Holt Byte: Read and evaluate expression from BASIC text; the 1 byte value is then stored in X and in FAC+4
   3109  9891		       20 d9 98 	      jsr	W98D9
   3110  9894		       86 fe		      stx	$FE	; Free 0 page for user program
   3111  9896		       20 fd ae 	      jsr	$AEFD	; Routine: Verify if there's ',' in current char (Syntax)
   3112  9899		       20 8a ad 	      jsr	$AD8A	; Routine: FRMNUM: Get expression (FRMEVL) and check, if numeric
   3113  989c		       20 f7 b7 	      jsr	$B7F7	; Routine: Converts FAC in 2-byte integer to $14, $15 and YA
   3114  989f		       a6 fe		      ldx	$FE	; Free 0 page for user program
   3115  98a1		       9d 50 03 	      sta	$0350,x	; Tape I/O buffer
   3116  98a4		       98		      tya
   3117  98a5		       9d 40 03 	      sta	$0340,x	; Tape I/O buffer
   3118  98a8		       20 fd ae 	      jsr	$AEFD	; Routine: Verify if there's ',' in current char (Syntax)
   3119  98ab		       20 8a ad 	      jsr	$AD8A	; Routine: FRMNUM: Get expression (FRMEVL) and check, if numeric
   3120  98ae		       20 f7 b7 	      jsr	$B7F7	; Routine: Converts FAC in 2-byte integer to $14, $15 and YA
   3121  98b1		       a6 fe		      ldx	$FE	; Free 0 page for user program
   3122  98b3		       9d 70 03 	      sta	$0370,x	; Tape I/O buffer
   3123  98b6		       98		      tya
   3124  98b7		       9d 60 03 	      sta	$0360,x	; Tape I/O buffer
   3125  98ba		       4c 37 85 	      jmp	W8537
   3126  98bd
   3127  98bd				   W98BD
   3128  98bd		       bd 40 03 	      lda	$0340,x	; Tape I/O buffer
   3129  98c0		       85 14		      sta	$14	; Transient: integer value
   3130  98c2		       bd 50 03 	      lda	$0350,x	; Tape I/O buffer
   3131  98c5		       85 15		      sta	$15	; Transient: integer value
   3132  98c7		       86 fe		      stx	$FE	; Free 0 page for user program
   3133  98c9		       20 13 a6 	      jsr	$A613	; Routine: Calculate start adress of a program line
   3134  98cc		       a6 fe		      ldx	$FE	; Free 0 page for user program
   3135  98ce		       bd 60 03 	      lda	$0360,x	; Tape I/O buffer
   3136  98d1		       85 14		      sta	$14	; Transient: integer value
   3137  98d3		       bd 70 03 	      lda	$0370,x	; Tape I/O buffer
   3138  98d6		       85 15		      sta	$15	; Transient: integer value
   3139  98d8				   W98D8
   3140  98d8		       60		      rts
   3141  98d9
   3142  98d9				   W98D9
   3143  98d9		       e0 10		      cpx	#$10
   3144  98db		       90 fb		      bcc	W98D8
   3145  98dd		       68		      pla
   3146  98de		       68		      pla
   3147  98df		       4c 48 b2 	      jmp	$B248	; Routine: Write error message (ILLEGAL QUANTITY)
   3148  98e2
   3149  98e2				   W98E2
   3150  98e2		       20 9e b7 	      jsr	$B79E	; BASIC ROM
   3151  98e5		       20 d9 98 	      jsr	W98D9
   3152  98e8		       20 bd 98 	      jsr	W98BD
   3153  98eb		       a9 93		      lda	#$93
   3154  98ed		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   3155  98f0		       4c 77 98 	      jmp	W9877
   3156  98f3
   3157  98f3		       20 9b b7 	      jsr	$B79B	; Routine: Holt Byte: Read and evaluate expression from BASIC text; the 1 byte value is then stored in X and in FAC+4
   3158  98f6		       20 d9 98 	      jsr	W98D9
   3159  98f9		       86 fe		      stx	$FE	; Free 0 page for user program
   3160  98fb		       20 fd ae 	      jsr	$AEFD	; Routine: Verify if there's ',' in current char (Syntax)
   3161  98fe		       20 eb b7 	      jsr	$B7EB	; Routine: GETADR and GETBYT: Get 16-bit integer (to $14, $15) and an 8 bit value (X)-parameter for WAIT and POKE
   3162  9901		       8e 3d 03 	      stx	$033D	; Tape I/O buffer
   3163  9904		       a5 14		      lda	$14	; Transient: integer value
   3164  9906		       a6 15		      ldx	$15	; Transient: integer value
   3165  9908		       8d 3b 03 	      sta	$033B	; Not used
   3166  990b		       8e 3c 03 	      stx	$033C	; Tape I/O buffer
   3167  990e		       a6 fe		      ldx	$FE	; Free 0 page for user program
   3168  9910		       20 bd 98 	      jsr	W98BD
   3169  9913		       ad 3b 03 	      lda	$033B	; Not used
   3170  9916		       9d 40 03 	      sta	$0340,x	; Tape I/O buffer
   3171  9919		       ad 3c 03 	      lda	$033C	; Tape I/O buffer
   3172  991c		       9d 50 03 	      sta	$0350,x	; Tape I/O buffer
   3173  991f				   W991F
   3174  991f		       20 ad 97 	      jsr	W97AD
   3175  9922		       b0 1d		      bcs	W9941
   3176  9924		       ad 3c 03 	      lda	$033C	; Tape I/O buffer
   3177  9927		       91 5f		      sta	($5F),y	; Scratch for numeric operation
   3178  9929		       88		      dey
   3179  992a		       ad 3b 03 	      lda	$033B	; Not used
   3180  992d		       91 5f		      sta	($5F),y	; Scratch for numeric operation
   3181  992f		       18		      clc
   3182  9930		       6d 3d 03 	      adc	$033D	; Tape I/O buffer
   3183  9933		       8d 3b 03 	      sta	$033B	; Not used
   3184  9936		       90 03		      bcc	W993B
   3185  9938		       ee 3c 03 	      inc	$033C	; Tape I/O buffer
   3186  993b				   W993B
   3187  993b		       20 c8 97 	      jsr	W97C8
   3188  993e		       4c 1f 99 	      jmp	W991F
   3189  9941
   3190  9941				   W9941
   3191  9941		       ad 3b 03 	      lda	$033B	; Not used
   3192  9944		       38		      sec
   3193  9945		       ed 3d 03 	      sbc	$033D	; Tape I/O buffer
   3194  9948		       a6 fe		      ldx	$FE	; Free 0 page for user program
   3195  994a		       9d 60 03 	      sta	$0360,x	; Tape I/O buffer
   3196  994d		       b0 03		      bcs	W9952
   3197  994f		       ce 3c 03 	      dec	$033C	; Tape I/O buffer
   3198  9952				   W9952
   3199  9952		       ad 3c 03 	      lda	$033C	; Tape I/O buffer
   3200  9955		       9d 70 03 	      sta	$0370,x	; Tape I/O buffer
   3201  9958				   W9958
   3202  9958		       4c 37 85 	      jmp	W8537
   3203  995b
   3204  995b		       a9 02		      lda	#$02
   3205  995d		       85 02		      sta	$02
   3206  995f		       a5 2b		      lda	$2B	; Pointer: BASIC starting programs
   3207  9961		       a6 2c		      ldx	$2C	; Pointer: BASIC starting programs
   3208  9963		       8d 3b 03 	      sta	$033B	; Not used
   3209  9966		       8e 3c 03 	      stx	$033C	; Tape I/O buffer
   3210  9969		       a9 ff		      lda	#$FF
   3211  996b		       85 14		      sta	$14	; Transient: integer value
   3212  996d		       85 15		      sta	$15	; Transient: integer value
   3213  996f		       20 13 a6 	      jsr	$A613	; Routine: Calculate start adress of a program line
   3214  9972		       a5 5f		      lda	$5F	; Scratch for numeric operation
   3215  9974		       a6 60		      ldx	$60	; Scratch for numeric operation
   3216  9976		       85 2b		      sta	$2B	; Pointer: BASIC starting programs
   3217  9978		       86 2c		      stx	$2C	; Pointer: BASIC starting programs
   3218  997a		       4c 93 99 	      jmp	W9992+1
   3219  997d
   3220  997d				   W997D
   3221  997d		       20 73 00 	      jsr	$0073	; CHRGET (Introduce a char) subroutine
   3222  9980		       f0 04		      beq	W9986
   3223  9982		       c9 22		      cmp	#$22
   3224  9984		       d0 f7		      bne	W997D
   3225  9986				   W9986
   3226  9986		       20 57 e2 	      jsr	$E257
   3227  9989		       a0 00		      ldy	#$00
   3228  998b		       a2 08		      ldx	#$08
   3229  998d				   W998D
   3230  998d		       4c ba ff 	      jmp	$FFBA	; Routine: Set primary, secondary and logical addresses
   3231  9990
   3232  9990		       a9 01		      lda	#$01
   3233  9992				   W9992
   3234  9992		       2c a9 00 	      bit.a	$00A9	; RS-232 indicator: Control of starting bit
   3235  9995		       85 0a		      sta	$0A	; Flag: 0=LOAD, 1=VERIFY
   3236  9997		       20 7d 99 	      jsr	W997D
   3237  999a		       20 6f e1 	      jsr	$E16F
   3238  999d				   W999D
   3239  999d		       4c 37 85 	      jmp	W8537
   3240  99a0
   3241  99a0		       20 7d 99 	      jsr	W997D
   3242  99a3		       20 59 e1 	      jsr	$E159
   3243  99a6		       4c 37 85 	      jmp	W8537
   3244  99a9
   3245  99a9		       20 9b b7 	      jsr	$B79B	; Routine: Holt Byte: Read and evaluate expression from BASIC text; the 1 byte value is then stored in X and in FAC+4
   3246  99ac		       20 d9 98 	      jsr	W98D9
   3247  99af		       20 bd 98 	      jsr	W98BD
   3248  99b2				   W99B2
   3249  99b2		       20 fd ae 	      jsr	$AEFD	; Routine: Verify if there's ',' in current char (Syntax)
   3250  99b5		       20 ee 9b 	      jsr	W9BEE
   3251  99b8				   W99B8
   3252  99b8		       20 ad 97 	      jsr	W97AD
   3253  99bb		       90 03		      bcc	W99C0
   3254  99bd		       4c 37 85 	      jmp	W8537
   3255  99c0
   3256  99c0				   W99C0
   3257  99c0		       a6 60		      ldx	$60	; Scratch for numeric operation
   3258  99c2		       a5 5f		      lda	$5F	; Scratch for numeric operation
   3259  99c4		       18		      clc
   3260  99c5		       69 04		      adc	#$04
   3261  99c7		       85 5d		      sta	$5D	; Scratch for numeric operation
   3262  99c9		       90 01		      bcc	W99CC
   3263  99cb		       e8		      inx
   3264  99cc				   W99CC
   3265  99cc		       86 5e		      stx	$5E	; Scratch for numeric operation
   3266  99ce		       a9 03		      lda	#$03
   3267  99d0		       85 45		      sta	$45	; BASIC current variable name
   3268  99d2				   W99D2
   3269  99d2		       a0 ff		      ldy	#$FF
   3270  99d4		       e6 45		      inc	$45	; BASIC current variable name
   3271  99d6				   W99D6
   3272  99d6		       c8		      iny
   3273  99d7		       b1 5d		      lda	($5D),y	; Scratch for numeric operation
   3274  99d9		       f0 24		      beq	W99FF
   3275  99db		       c4 ba		      cpy	$BA	; Current device number
   3276  99dd		       f0 24		      beq	W9A03
   3277  99df		       d9 d8 03 	      cmp	$03D8,y	; Tape I/O buffer
   3278  99e2		       f0 f2		      beq	W99D6
   3279  99e4		       b9 d8 03 	      lda	$03D8,y	; Tape I/O buffer
   3280  99e7		       c9 3f		      cmp	#$3F
   3281  99e9		       f0 eb		      beq	W99D6
   3282  99eb				   W99EB
   3283  99eb		       c8		      iny
   3284  99ec		       b1 5d		      lda	($5D),y	; Scratch for numeric operation
   3285  99ee		       d0 fb		      bne	W99EB
   3286  99f0		       c4 ba		      cpy	$BA	; Current device number
   3287  99f2		       f0 1e		      beq	W9A12
   3288  99f4		       90 1c		      bcc	W9A12
   3289  99f6		       e6 5d		      inc	$5D	; Scratch for numeric operation
   3290  99f8		       d0 02		      bne	W99FC
   3291  99fa		       e6 5e		      inc	$5E	; Scratch for numeric operation
   3292  99fc				   W99FC
   3293  99fc		       4c d2 99 	      jmp	W99D2
   3294  99ff
   3295  99ff				   W99FF
   3296  99ff		       c4 ba		      cpy	$BA	; Current device number
   3297  9a01		       d0 0f		      bne	W9A12
   3298  9a03				   W9A03
   3299  9a03		       a5 02		      lda	$02
   3300  9a05		       c9 04		      cmp	#$04
   3301  9a07		       d0 03		      bne	W9A0C
   3302  9a09		       4c 49 9b 	      jmp	W9B49
   3303  9a0c
   3304  9a0c				   W9A0C
   3305  9a0c		       20 44 9a 	      jsr	W9A44
   3306  9a0f		       20 d7 aa 	      jsr	$AAD7	; Routine: Write return effect and/or advancement
   3307  9a12				   W9A12
   3308  9a12		       20 c8 97 	      jsr	W97C8
   3309  9a15		       4c b8 99 	      jmp	W99B8
   3310  9a18
   3311  9a18				   W9A18
   3312  9a18		       a0 02		      ldy	#$02
   3313  9a1a		       b1 5f		      lda	($5F),y	; Scratch for numeric operation
   3314  9a1c		       85 63		      sta	$63	; Floating point accumulator #1: Mantissa
   3315  9a1e		       c8		      iny
   3316  9a1f		       b1 5f		      lda	($5F),y	; Scratch for numeric operation
   3317  9a21		       85 62		      sta	$62	; Floating point accumulator #1: Mantissa
   3318  9a23				   W9A23
   3319  9a23		       a2 90		      ldx	#$90
   3320  9a25		       38		      sec
   3321  9a26		       20 49 bc 	      jsr	$BC49	; BASIC ROM
   3322  9a29		       20 df bd 	      jsr	$BDDF	; BASIC ROM
   3323  9a2c		       20 87 b4 	      jsr	$B487	; Routine: Get string, pointer in YA
   3324  9a2f		       20 a6 b6 	      jsr	$B6A6	; BASIC ROM
   3325  9a32		       85 b4		      sta	$B4	; RS-232 output bits counter/Tape timer
   3326  9a34		       aa		      tax
   3327  9a35				   W9A35
   3328  9a35		       e0 05		      cpx	#$05
   3329  9a37		       b0 06		      bcs	W9A3F
   3330  9a39		       20 84 94 	      jsr	W9484
   3331  9a3c		       e8		      inx
   3332  9a3d		       d0 f6		      bne	W9A35
   3333  9a3f				   W9A3F
   3334  9a3f		       a6 b4		      ldx	$B4	; RS-232 output bits counter/Tape timer
   3335  9a41		       4c 25 ab 	      jmp	$AB25	; BASIC ROM
   3336  9a44
   3337  9a44				   W9A44
   3338  9a44		       20 18 9a 	      jsr	W9A18
   3339  9a47				   W9A47
   3340  9a47		       a2 00		      ldx	#$00
   3341  9a49		       a0 04		      ldy	#$04
   3342  9a4b		       b1 5f		      lda	($5F),y	; Scratch for numeric operation
   3343  9a4d		       30 42		      bmi	W9A91
   3344  9a4f		       c9 3b		      cmp	#$3B
   3345  9a51		       d0 03		      bne	W9A56
   3346  9a53		       4c 09 9b 	      jmp	W9B09
   3347  9a56
   3348  9a56				   W9A56
   3349  9a56		       b1 5f		      lda	($5F),y	; Scratch for numeric operation
   3350  9a58		       d0 03		      bne	W9A5D
   3351  9a5a		       4c 13 9b 	      jmp	W9B13
   3352  9a5d
   3353  9a5d				   W9A5D
   3354  9a5d		       c9 20		      cmp	#$20
   3355  9a5f		       f0 07		      beq	W9A68
   3356  9a61		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   3357  9a64		       e8		      inx
   3358  9a65		       c8		      iny
   3359  9a66		       d0 ee		      bne	W9A56
   3360  9a68				   W9A68
   3361  9a68		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   3362  9a6b		       c8		      iny
   3363  9a6c				   W9A6C
   3364  9a6c		       e8		      inx
   3365  9a6d		       ec 3e 03 	      cpx	$033E	; Tape I/O buffer
   3366  9a70		       b0 06		      bcs	W9A78
   3367  9a72		       20 84 94 	      jsr	W9484
   3368  9a75		       4c 6c 9a 	      jmp	W9A6C
   3369  9a78
   3370  9a78				   W9A78
   3371  9a78		       b1 5f		      lda	($5F),y	; Scratch for numeric operation
   3372  9a7a		       30 0d		      bmi	W9A89
   3373  9a7c		       f0 71		      beq	W9AEF
   3374  9a7e		       c9 3b		      cmp	#$3B
   3375  9a80		       f0 7c		      beq	W9AFE
   3376  9a82		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   3377  9a85		       e8		      inx
   3378  9a86		       c8		      iny
   3379  9a87		       d0 ef		      bne	W9A78
   3380  9a89				   W9A89
   3381  9a89		       c9 f8		      cmp	#$F8
   3382  9a8b		       b0 62		      bcs	W9AEF
   3383  9a8d		       c9 c0		      cmp	#$C0
   3384  9a8f		       b0 38		      bcs	W9AC9
   3385  9a91				   W9A91
   3386  9a91		       29 1f		      and	#$1F
   3387  9a93		       f0 5a		      beq	W9AEF
   3388  9a95		       c9 19		      cmp	#$19
   3389  9a97		       90 04		      bcc	W9A9D
   3390  9a99		       a9 3f		      lda	#$3F
   3391  9a9b		       d0 5a		      bne	W9AF7
   3392  9a9d				   W9A9D
   3393  9a9d		       85 22		      sta	$22	; Utility programs pointers area
   3394  9a9f		       a9 2e		      lda	#$2E
   3395  9aa1		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   3396  9aa4		       e8		      inx
   3397  9aa5		       98		      tya
   3398  9aa6		       48		      pha
   3399  9aa7		       a0 00		      ldy	#$00
   3400  9aa9				   W9AA9
   3401  9aa9		       c6 22		      dec	$22	; Utility programs pointers area
   3402  9aab		       30 09		      bmi	W9AB6
   3403  9aad				   W9AAD
   3404  9aad		       c8		      iny
   3405  9aae		       b9 07 82 	      lda	T_PSEUDOOPS,y
   3406  9ab1		       10 fa		      bpl	W9AAD
   3407  9ab3		       c8		      iny
   3408  9ab4		       d0 f3		      bne	W9AA9
   3409  9ab6				   W9AB6
   3410  9ab6		       b9 07 82 	      lda	T_PSEUDOOPS,y
   3411  9ab9		       08		      php
   3412  9aba		       29 7f		      and	#$7F
   3413  9abc		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   3414  9abf		       e8		      inx
   3415  9ac0		       c8		      iny
   3416  9ac1		       28		      plp
   3417  9ac2		       10 f2		      bpl	W9AB6
   3418  9ac4		       68		      pla
   3419  9ac5		       a8		      tay
   3420  9ac6		       c8		      iny
   3421  9ac7		       d0 22		      bne	W9AEB
   3422  9ac9				   W9AC9
   3423  9ac9		       29 3f		      and	#$3F
   3424  9acb		       85 22		      sta	$22	; Utility programs pointers area
   3425  9acd		       0a		      asl
   3426  9ace		       65 22		      adc	$22	; Utility programs pointers area
   3427  9ad0		       84 22		      sty	$22	; Utility programs pointers area
   3428  9ad2		       a8		      tay
   3429  9ad3		       b9 0b 80 	      lda	T_MNEMONIC,y
   3430  9ad6		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   3431  9ad9		       e8		      inx
   3432  9ada		       b9 0c 80 	      lda	$800C,y
   3433  9add		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   3434  9ae0		       e8		      inx
   3435  9ae1		       b9 0d 80 	      lda	$800D,y
   3436  9ae4		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   3437  9ae7		       e8		      inx
   3438  9ae8		       a4 22		      ldy	$22	; Utility programs pointers area
   3439  9aea		       c8		      iny
   3440  9aeb				   W9AEB
   3441  9aeb		       20 84 94 	      jsr	W9484
   3442  9aee		       e8		      inx
   3443  9aef				   W9AEF
   3444  9aef		       b1 5f		      lda	($5F),y	; Scratch for numeric operation
   3445  9af1		       f0 20		      beq	W9B13
   3446  9af3		       c9 3b		      cmp	#$3B
   3447  9af5		       f0 07		      beq	W9AFE
   3448  9af7				   W9AF7
   3449  9af7		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   3450  9afa		       e8		      inx
   3451  9afb		       c8		      iny
   3452  9afc		       d0 f1		      bne	W9AEF
   3453  9afe				   W9AFE
   3454  9afe		       ec 3f 03 	      cpx	$033F	; Tape I/O buffer
   3455  9b01		       b0 06		      bcs	W9B09
   3456  9b03		       20 84 94 	      jsr	W9484
   3457  9b06		       e8		      inx
   3458  9b07		       d0 f5		      bne	W9AFE
   3459  9b09				   W9B09
   3460  9b09		       b1 5f		      lda	($5F),y	; Scratch for numeric operation
   3461  9b0b		       f0 06		      beq	W9B13
   3462  9b0d		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   3463  9b10		       c8		      iny
   3464  9b11		       d0 f6		      bne	W9B09
   3465  9b13				   W9B13
   3466  9b13		       a5 cb		      lda	$CB	; Flag: write chars with SHIFT pressed
   3467  9b15		       c9 3c		      cmp	#$3C
   3468  9b17		       d0 19		      bne	W9B32
   3469  9b19				   W9B19
   3470  9b19		       a5 cb		      lda	$CB	; Flag: write chars with SHIFT pressed
   3471  9b1b		       c9 40		      cmp	#$40
   3472  9b1d		       d0 fa		      bne	W9B19
   3473  9b1f				   W9B1F
   3474  9b1f		       20 2c a8 	      jsr	$A82C	; BASIC ROM
   3475  9b22		       a5 cb		      lda	$CB	; Flag: write chars with SHIFT pressed
   3476  9b24		       c9 3c		      cmp	#$3C
   3477  9b26		       d0 f7		      bne	W9B1F
   3478  9b28				   W9B28
   3479  9b28		       a5 cb		      lda	$CB	; Flag: write chars with SHIFT pressed
   3480  9b2a		       c9 40		      cmp	#$40
   3481  9b2c		       d0 fa		      bne	W9B28
   3482  9b2e		       a9 00		      lda	#$00
   3483  9b30		       85 c6		      sta	$C6	; Number of char in keyboard buffer
   3484  9b32				   W9B32
   3485  9b32		       60		      rts
   3486  9b33
   3487  9b33		       20 9b b7 	      jsr	$B79B	; Routine: Holt Byte: Read and evaluate expression from BASIC text; the 1 byte value is then stored in X and in FAC+4
   3488  9b36		       20 d9 98 	      jsr	W98D9
   3489  9b39		       20 bd 98 	      jsr	W98BD
   3490  9b3c		       20 fd ae 	      jsr	$AEFD	; Routine: Verify if there's ',' in current char (Syntax)
   3491  9b3f		       20 cc 9b 	      jsr	W9BCC
   3492  9b42		       a9 04		      lda	#$04
   3493  9b44		       85 02		      sta	$02
   3494  9b46		       4c b2 99 	      jmp	W99B2
   3495  9b49
   3496  9b49				   W9B49
   3497  9b49		       a5 14		      lda	$14	; Transient: integer value
   3498  9b4b		       48		      pha
   3499  9b4c		       a5 15		      lda	$15	; Transient: integer value
   3500  9b4e		       48		      pha
   3501  9b4f		       a2 05		      ldx	#$05
   3502  9b51		       a0 02		      ldy	#$02
   3503  9b53		       b1 5f		      lda	($5F),y	; Scratch for numeric operation
   3504  9b55		       85 14		      sta	$14	; Transient: integer value
   3505  9b57		       c8		      iny
   3506  9b58		       b1 5f		      lda	($5F),y	; Scratch for numeric operation
   3507  9b5a		       85 15		      sta	$15	; Transient: integer value
   3508  9b5c				   W9B5C
   3509  9b5c		       c8		      iny
   3510  9b5d		       c4 45		      cpy	$45	; BASIC current variable name
   3511  9b5f		       f0 09		      beq	W9B6A
   3512  9b61		       b1 5f		      lda	($5F),y	; Scratch for numeric operation
   3513  9b63		       9d fb 01 	      sta	$01FB,x	; CPU stack
   3514  9b66		       e8		      inx
   3515  9b67		       4c 5c 9b 	      jmp	W9B5C
   3516  9b6a
   3517  9b6a				   W9B6A
   3518  9b6a		       a0 00		      ldy	#$00
   3519  9b6c				   W9B6C
   3520  9b6c		       c4 b7		      cpy	$B7	; Length of current file name
   3521  9b6e		       f0 0b		      beq	W9B7B
   3522  9b70		       b9 b0 03 	      lda	$03B0,y	; Tape I/O buffer
   3523  9b73		       9d fb 01 	      sta	$01FB,x	; CPU stack
   3524  9b76		       e8		      inx
   3525  9b77		       c8		      iny
   3526  9b78		       4c 6c 9b 	      jmp	W9B6C
   3527  9b7b
   3528  9b7b				   W9B7B
   3529  9b7b		       a4 ba		      ldy	$BA	; Current device number
   3530  9b7d				   W9B7D
   3531  9b7d		       b1 5d		      lda	($5D),y	; Scratch for numeric operation
   3532  9b7f		       9d fb 01 	      sta	$01FB,x	; CPU stack
   3533  9b82		       f0 05		      beq	W9B89
   3534  9b84		       e8		      inx
   3535  9b85		       c8		      iny
   3536  9b86		       4c 7d 9b 	      jmp	W9B7D
   3537  9b89
   3538  9b89				   W9B89
   3539  9b89		       8a		      txa
   3540  9b8a		       a8		      tay
   3541  9b8b		       4c a2 a4 	      jmp	$A4A2	; BASIC ROM
   3542  9b8e
   3543  9b8e				   W9B8E
   3544  9b8e		       20 13 a6 	      jsr	$A613	; Routine: Calculate start adress of a program line
   3545  9b91		       20 44 9a 	      jsr	W9A44
   3546  9b94		       20 d7 aa 	      jsr	$AAD7	; Routine: Write return effect and/or advancement
   3547  9b97		       68		      pla
   3548  9b98		       85 15		      sta	$15	; Transient: integer value
   3549  9b9a		       68		      pla
   3550  9b9b		       85 14		      sta	$14	; Transient: integer value
   3551  9b9d		       a6 fe		      ldx	$FE	; Free 0 page for user program
   3552  9b9f		       bd 60 03 	      lda	$0360,x	; Tape I/O buffer
   3553  9ba2		       85 14		      sta	$14	; Transient: integer value
   3554  9ba4		       bd 70 03 	      lda	$0370,x	; Tape I/O buffer
   3555  9ba7		       85 15		      sta	$15	; Transient: integer value
   3556  9ba9		       a5 45		      lda	$45	; BASIC current variable name
   3557  9bab		       18		      clc
   3558  9bac		       65 b7		      adc	$B7	; Length of current file name
   3559  9bae		       a8		      tay
   3560  9baf		       b1 5f		      lda	($5F),y	; Scratch for numeric operation
   3561  9bb1		       f0 13		      beq	W9BC6
   3562  9bb3		       a6 60		      ldx	$60	; Scratch for numeric operation
   3563  9bb5		       98		      tya
   3564  9bb6		       18		      clc
   3565  9bb7		       65 5f		      adc	$5F	; Scratch for numeric operation
   3566  9bb9		       85 5d		      sta	$5D	; Scratch for numeric operation
   3567  9bbb		       90 01		      bcc	W9BBE
   3568  9bbd		       e8		      inx
   3569  9bbe				   W9BBE
   3570  9bbe		       86 5e		      stx	$5E	; Scratch for numeric operation
   3571  9bc0		       88		      dey
   3572  9bc1		       84 45		      sty	$45	; BASIC current variable name
   3573  9bc3		       4c d2 99 	      jmp	W99D2
   3574  9bc6
   3575  9bc6				   W9BC6
   3576  9bc6		       4c 12 9a 	      jmp	W9A12
   3577  9bc9
   3578  9bc9				   W9BC9
   3579  9bc9		       4c 48 b2 	      jmp	$B248	; Routine: Write error message (ILLEGAL QUANTITY)
   3580  9bcc
   3581  9bcc				   W9BCC
   3582  9bcc		       20 9e ad 	      jsr	$AD9E	; Routine: FRMEVL: Analyzes any formula expression and shows syntax errors. Set type flag $0D (Number: $00, string $FF). Set integer flag $0E (float: $00, integer: $80) puts values in FAC
   3583  9bcf		       20 82 b7 	      jsr	$B782	; Routine: Get string parameter (length in Y), switch to numeric
   3584  9bd2		       c9 26		      cmp	#$26
   3585  9bd4		       b0 f3		      bcs	W9BC9
   3586  9bd6		       85 b7		      sta	$B7	; Length of current file name
   3587  9bd8		       a2 00		      ldx	#$00
   3588  9bda		       a0 00		      ldy	#$00
   3589  9bdc				   W9BDC
   3590  9bdc		       20 12 9c 	      jsr	W9C12
   3591  9bdf		       90 04		      bcc	W9BE5
   3592  9be1		       c6 b7		      dec	$B7	; Length of current file name
   3593  9be3		       c6 b7		      dec	$B7	; Length of current file name
   3594  9be5				   W9BE5
   3595  9be5		       9d b0 03 	      sta	$03B0,x	; Tape I/O buffer
   3596  9be8		       e8		      inx
   3597  9be9		       e4 b7		      cpx	$B7	; Length of current file name
   3598  9beb		       90 ef		      bcc	W9BDC
   3599  9bed		       60		      rts
   3600  9bee
   3601  9bee				   W9BEE
   3602  9bee		       20 9e ad 	      jsr	$AD9E	; Routine: FRMEVL: Analyzes any formula expression and shows syntax errors. Set type flag $0D (Number: $00, string $FF). Set integer flag $0E (float: $00, integer: $80) puts values in FAC
   3603  9bf1		       20 82 b7 	      jsr	$B782	; Routine: Get string parameter (length in Y), switch to numeric
   3604  9bf4		       f0 d3		      beq	W9BC9
   3605  9bf6		       c9 26		      cmp	#$26
   3606  9bf8		       b0 cf		      bcs	W9BC9
   3607  9bfa		       85 ba		      sta	$BA	; Current device number
   3608  9bfc		       a2 00		      ldx	#$00
   3609  9bfe		       a0 00		      ldy	#$00
   3610  9c00				   W9C00
   3611  9c00		       20 12 9c 	      jsr	W9C12
   3612  9c03		       90 04		      bcc	W9C09
   3613  9c05		       c6 ba		      dec	$BA	; Current device number
   3614  9c07		       c6 ba		      dec	$BA	; Current device number
   3615  9c09				   W9C09
   3616  9c09		       9d d8 03 	      sta	$03D8,x	; Tape I/O buffer
   3617  9c0c		       e8		      inx
   3618  9c0d		       e4 ba		      cpx	$BA	; Current device number
   3619  9c0f		       90 ef		      bcc	W9C00
   3620  9c11		       60		      rts
   3621  9c12
   3622  9c12				   W9C12
   3623  9c12		       8a		      txa
   3624  9c13		       48		      pha
   3625  9c14		       a2 00		      ldx	#$00
   3626  9c16		       86 41		      stx	$41	; Pointer: DATA current element address
   3627  9c18				   W9C18
   3628  9c18		       b1 22		      lda	($22),y	; Utility programs pointers area
   3629  9c1a		       dd 0b 80 	      cmp	T_MNEMONIC,x
   3630  9c1d		       d0 12		      bne	W9C31
   3631  9c1f		       c8		      iny
   3632  9c20		       b1 22		      lda	($22),y	; Utility programs pointers area
   3633  9c22		       dd 0c 80 	      cmp	$800C,x
   3634  9c25		       d0 09		      bne	W9C30
   3635  9c27		       c8		      iny
   3636  9c28		       b1 22		      lda	($22),y	; Utility programs pointers area
   3637  9c2a		       dd 0d 80 	      cmp	$800D,x
   3638  9c2d		       f0 12		      beq	W9C41
   3639  9c2f		       88		      dey
   3640  9c30				   W9C30
   3641  9c30		       88		      dey
   3642  9c31				   W9C31
   3643  9c31		       e8		      inx
   3644  9c32		       e8		      inx
   3645  9c33		       e8		      inx
   3646  9c34		       e6 41		      inc	$41	; Pointer: DATA current element address
   3647  9c36		       e0 a8		      cpx	#$A8
   3648  9c38		       d0 de		      bne	W9C18
   3649  9c3a		       68		      pla
   3650  9c3b		       aa		      tax
   3651  9c3c		       b1 22		      lda	($22),y	; Utility programs pointers area
   3652  9c3e		       c8		      iny
   3653  9c3f		       18		      clc
   3654  9c40		       60		      rts
   3655  9c41
   3656  9c41				   W9C41
   3657  9c41		       68		      pla
   3658  9c42		       aa		      tax
   3659  9c43		       a5 41		      lda	$41	; Pointer: DATA current element address
   3660  9c45		       09 c0		      ora	#$C0
   3661  9c47		       c8		      iny
   3662  9c48		       38		      sec
   3663  9c49		       60		      rts
   3664  9c4a
   3665  9c4a		       a9 24		      lda	#$24
   3666  9c4c				   W9C4C
   3667  9c4c		       8d 00 01 	      sta	$0100	; CPU stack/Tape error/Floating conversion area
   3668  9c4f		       20 d7 aa 	      jsr	$AAD7	; Routine: Write return effect and/or advancement
   3669  9c52		       a9 01		      lda	#$01
   3670  9c54		       a8		      tay
   3671  9c55		       a2 00		      ldx	#$00
   3672  9c57		       20 bd ff 	      jsr	$FFBD	; Routine: Set file name
   3673  9c5a		       a2 08		      ldx	#$08
   3674  9c5c		       a0 60		      ldy	#$60
   3675  9c5e		       20 ba ff 	      jsr	$FFBA	; Routine: Set primary, secondary and logical addresses
   3676  9c61		       20 d5 f3 	      jsr	$F3D5	; Routine: Sends file name on serial bus
   3677  9c64		       a5 ba		      lda	$BA	; Current device number
   3678  9c66		       20 b4 ff 	      jsr	$FFB4	; Routine: Set to Trasmit the serial bus device
   3679  9c69		       a5 b9		      lda	$B9	; Current secondary address
   3680  9c6b		       20 96 ff 	      jsr	$FF96	; Routine: Send secondary address after Trasmit
   3681  9c6e		       a9 00		      lda	#$00
   3682  9c70		       85 90		      sta	$90	; Statusbyte ST of I/O KERNAL
   3683  9c72		       a0 03		      ldy	#$03
   3684  9c74				   W9C74
   3685  9c74		       84 ff		      sty	$FF	; Transient data area of BASIC
   3686  9c76		       20 a5 ff 	      jsr	$FFA5	; Routine: Acept a byte from serial port
   3687  9c79		       85 fe		      sta	$FE	; Free 0 page for user program
   3688  9c7b		       a4 90		      ldy	$90	; Statusbyte ST of I/O KERNAL
   3689  9c7d		       d0 39		      bne	W9CB8
   3690  9c7f		       20 a5 ff 	      jsr	$FFA5	; Routine: Acept a byte from serial port
   3691  9c82		       a4 90		      ldy	$90	; Statusbyte ST of I/O KERNAL
   3692  9c84		       d0 32		      bne	W9CB8
   3693  9c86		       a4 ff		      ldy	$FF	; Transient data area of BASIC
   3694  9c88		       88		      dey
   3695  9c89		       d0 e9		      bne	W9C74
   3696  9c8b		       a6 fe		      ldx	$FE	; Free 0 page for user program
   3697  9c8d		       20 cd bd 	      jsr	$BDCD	; Routine: Write (AX) integer correspondenting string
   3698  9c90		       20 84 94 	      jsr	W9484
   3699  9c93				   W9C93
   3700  9c93		       20 a5 ff 	      jsr	$FFA5	; Routine: Acept a byte from serial port
   3701  9c96		       a6 90		      ldx	$90	; Statusbyte ST of I/O KERNAL
   3702  9c98		       d0 1e		      bne	W9CB8
   3703  9c9a		       a8		      tay
   3704  9c9b		       aa		      tax
   3705  9c9c		       f0 06		      beq	W9CA4
   3706  9c9e		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   3707  9ca1		       4c 93 9c 	      jmp	W9C93
   3708  9ca4
   3709  9ca4				   W9CA4
   3710  9ca4		       20 d7 aa 	      jsr	$AAD7	; Routine: Write return effect and/or advancement
   3711  9ca7		       ad 01 dc 	      lda	$DC01	; Data port B #1: keyboard, joystick, paddle
   3712  9caa		       29 10		      and	#$10
   3713  9cac		       f0 0a		      beq	W9CB8
   3714  9cae		       ad 01 dc 	      lda	$DC01	; Data port B #1: keyboard, joystick, paddle
   3715  9cb1		       10 05		      bpl	W9CB8
   3716  9cb3		       a0 02		      ldy	#$02
   3717  9cb5		       4c 74 9c 	      jmp	W9C74
   3718  9cb8
   3719  9cb8				   W9CB8
   3720  9cb8		       20 42 f6 	      jsr	$F642	; Routine: Addresses the device with the command
   3721  9cbb		       4c ca 9c 	      jmp	W9CCA
   3722  9cbe
   3723  9cbe		       a0 01		      ldy	#$01
   3724  9cc0		       b1 7a		      lda	($7A),y	; CHRGET (Introduce a char) subroutine
   3725  9cc2		       f0 06		      beq	W9CCA
   3726  9cc4		       c9 24		      cmp	#$24
   3727  9cc6		       f0 84		      beq	W9C4C
   3728  9cc8		       d0 22		      bne	W9CEC
   3729  9cca				   W9CCA
   3730  9cca		       a9 08		      lda	#$08
   3731  9ccc		       85 ba		      sta	$BA	; Current device number
   3732  9cce		       20 b4 ff 	      jsr	$FFB4	; Routine: Set to Trasmit the serial bus device
   3733  9cd1		       a9 6f		      lda	#$6F
   3734  9cd3		       85 b9		      sta	$B9	; Current secondary address
   3735  9cd5		       20 96 ff 	      jsr	$FF96	; Routine: Send secondary address after Trasmit
   3736  9cd8				   W9CD8
   3737  9cd8		       20 a5 ff 	      jsr	$FFA5	; Routine: Acept a byte from serial port
   3738  9cdb		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   3739  9cde		       c9 0d		      cmp	#$0D
   3740  9ce0		       d0 f6		      bne	W9CD8
   3741  9ce2		       20 ab ff 	      jsr	$FFAB	; Routine: Set serial bus to Not-trasmit
   3742  9ce5		       a9 00		      lda	#$00
   3743  9ce7		       85 c6		      sta	$C6	; Number of char in keyboard buffer
   3744  9ce9		       4c 37 85 	      jmp	W8537
   3745  9cec
   3746  9cec				   W9CEC
   3747  9cec		       a9 08		      lda	#$08
   3748  9cee		       85 ba		      sta	$BA	; Current device number
   3749  9cf0		       20 b1 ff 	      jsr	$FFB1	; Routine: Set to Receive the devices to the serial bus
   3750  9cf3		       a9 6f		      lda	#$6F
   3751  9cf5		       85 b9		      sta	$B9	; Current secondary address
   3752  9cf7		       20 93 ff 	      jsr	$FF93	; Routine: Send secondary address after Receive
   3753  9cfa				   W9CFA
   3754  9cfa		       b1 7a		      lda	($7A),y	; CHRGET (Introduce a char) subroutine
   3755  9cfc		       f0 06		      beq	W9D04
   3756  9cfe		       20 a8 ff 	      jsr	$FFA8	; Routine: Send a byte to serial port
   3757  9d01		       c8		      iny
   3758  9d02		       d0 f6		      bne	W9CFA
   3759  9d04				   W9D04
   3760  9d04		       20 ae ff 	      jsr	$FFAE	; Routine: Set serial bus to Not-Receive
   3761  9d07		       4c 37 85 	      jmp	W8537
   3762  9d0a
   3763  9d0a		       a5 30		      lda	$30	; Pointer: BASIC starting arrays
   3764  9d0c		       c5 2e		      cmp	$2E	; Pointer: BASIC starting variables
   3765  9d0e		       d0 06		      bne	W9D16
   3766  9d10		       a5 2f		      lda	$2F	; Pointer: BASIC starting arrays
   3767  9d12		       c5 2d		      cmp	$2D	; Pointer: BASIC starting variables
   3768  9d14		       f0 03		      beq	W9D19
   3769  9d16				   W9D16
   3770  9d16		       20 1f 9d 	      jsr	W9D1F
   3771  9d19				   W9D19
   3772  9d19		       4c 37 85 	      jmp	W8537
   3773  9d1c
   3774  9d1c				   W9D1C
   3775  9d1c		       4c d7 aa 	      jmp	$AAD7	; Routine: Write return effect and/or advancement
   3776  9d1f
   3777  9d1f				   W9D1F
   3778  9d1f		       a9 f9		      lda	#$F9
   3779  9d21		       a2 bf		      ldx	#$BF
   3780  9d23				   W9D23
   3781  9d23		       86 46		      stx	$46	; BASIC current variable name
   3782  9d25		       85 45		      sta	$45	; BASIC current variable name
   3783  9d27		       e4 30		      cpx	$30	; Pointer: BASIC starting arrays
   3784  9d29		       90 f1		      bcc	W9D1C
   3785  9d2b		       d0 04		      bne	W9D31
   3786  9d2d		       c5 2f		      cmp	$2F	; Pointer: BASIC starting arrays
   3787  9d2f		       90 eb		      bcc	W9D1C
   3788  9d31				   W9D31
   3789  9d31		       20 2c a8 	      jsr	$A82C	; BASIC ROM
   3790  9d34		       20 d7 aa 	      jsr	$AAD7	; Routine: Write return effect and/or advancement
   3791  9d37		       a9 59		      lda	#$59
   3792  9d39		       a0 83		      ldy	#$83
   3793  9d3b		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   3794  9d3e		       a9 36		      lda	#$36
   3795  9d40		       85 01		      sta	$01	; 6510 I/O register
   3796  9d42		       a0 06		      ldy	#$06
   3797  9d44		       b1 45		      lda	($45),y	; BASIC current variable name
   3798  9d46		       85 3d		      sta	$3D	; Pointer: BASIC instruction for CONT
   3799  9d48		       88		      dey
   3800  9d49		       b1 45		      lda	($45),y	; BASIC current variable name
   3801  9d4b		       85 3c		      sta	$3C	; BASIC precedent line number
   3802  9d4d		       88		      dey
   3803  9d4e		       b1 45		      lda	($45),y	; BASIC current variable name
   3804  9d50		       85 23		      sta	$23	; Utility programs pointers area
   3805  9d52		       88		      dey
   3806  9d53		       b1 45		      lda	($45),y	; BASIC current variable name
   3807  9d55		       85 22		      sta	$22	; Utility programs pointers area
   3808  9d57		       a9 37		      lda	#$37
   3809  9d59		       85 01		      sta	$01	; 6510 I/O register
   3810  9d5b		       a5 2b		      lda	$2B	; Pointer: BASIC starting programs
   3811  9d5d		       a6 2c		      ldx	$2C	; Pointer: BASIC starting programs
   3812  9d5f		       85 5f		      sta	$5F	; Scratch for numeric operation
   3813  9d61		       86 60		      stx	$60	; Scratch for numeric operation
   3814  9d63				   W9D63
   3815  9d63		       a0 01		      ldy	#$01
   3816  9d65		       b1 5f		      lda	($5F),y	; Scratch for numeric operation
   3817  9d67		       aa		      tax
   3818  9d68		       88		      dey
   3819  9d69		       c5 23		      cmp	$23	; Utility programs pointers area
   3820  9d6b		       90 0a		      bcc	W9D77
   3821  9d6d		       f0 02		      beq	W9D71
   3822  9d6f		       b0 0e		      bcs	W9D7F
   3823  9d71				   W9D71
   3824  9d71		       b1 5f		      lda	($5F),y	; Scratch for numeric operation
   3825  9d73		       c5 22		      cmp	$22	; Utility programs pointers area
   3826  9d75		       b0 08		      bcs	W9D7F
   3827  9d77				   W9D77
   3828  9d77		       b1 5f		      lda	($5F),y	; Scratch for numeric operation
   3829  9d79		       85 5f		      sta	$5F	; Scratch for numeric operation
   3830  9d7b		       86 60		      stx	$60	; Scratch for numeric operation
   3831  9d7d		       90 e4		      bcc	W9D63
   3832  9d7f				   W9D7F
   3833  9d7f		       20 18 9a 	      jsr	W9A18
   3834  9d82		       a9 3a		      lda	#$3A
   3835  9d84		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   3836  9d87		       20 84 94 	      jsr	W9484
   3837  9d8a		       a9 36		      lda	#$36
   3838  9d8c		       85 01		      sta	$01	; 6510 I/O register
   3839  9d8e		       a0 04		      ldy	#$04
   3840  9d90		       b1 45		      lda	($45),y	; BASIC current variable name
   3841  9d92		       85 23		      sta	$23	; Utility programs pointers area
   3842  9d94		       88		      dey
   3843  9d95		       b1 45		      lda	($45),y	; BASIC current variable name
   3844  9d97		       85 22		      sta	$22	; Utility programs pointers area
   3845  9d99		       88		      dey
   3846  9d9a		       b1 45		      lda	($45),y	; BASIC current variable name
   3847  9d9c		       85 47		      sta	$47	; Pointer: BASIC current variable data
   3848  9d9e		       88		      dey
   3849  9d9f		       b1 45		      lda	($45),y	; BASIC current variable name
   3850  9da1		       85 62		      sta	$62	; Floating point accumulator #1: Mantissa
   3851  9da3		       88		      dey
   3852  9da4		       b1 45		      lda	($45),y	; BASIC current variable name
   3853  9da6		       85 63		      sta	$63	; Floating point accumulator #1: Mantissa
   3854  9da8		       a9 37		      lda	#$37
   3855  9daa		       85 01		      sta	$01	; 6510 I/O register
   3856  9dac		       a2 00		      ldx	#$00
   3857  9dae				   W9DAE
   3858  9dae		       b1 22		      lda	($22),y	; Utility programs pointers area
   3859  9db0		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   3860  9db3		       c8		      iny
   3861  9db4		       e8		      inx
   3862  9db5		       e0 0e		      cpx	#$0E
   3863  9db7		       b0 0e		      bcs	W9DC7
   3864  9db9		       c4 47		      cpy	$47	; Pointer: BASIC current variable data
   3865  9dbb		       90 f1		      bcc	W9DAE
   3866  9dbd				   W9DBD
   3867  9dbd		       e8		      inx
   3868  9dbe		       a9 2e		      lda	#$2E
   3869  9dc0		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   3870  9dc3		       e0 0e		      cpx	#$0E
   3871  9dc5		       90 f6		      bcc	W9DBD
   3872  9dc7				   W9DC7
   3873  9dc7		       a9 2e		      lda	#$2E
   3874  9dc9		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   3875  9dcc		       a9 24		      lda	#$24
   3876  9dce		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   3877  9dd1		       a5 3d		      lda	$3D	; Pointer: BASIC instruction for CONT
   3878  9dd3		       20 79 93 	      jsr	W9379
   3879  9dd6		       a5 3c		      lda	$3C	; BASIC precedent line number
   3880  9dd8		       20 79 93 	      jsr	W9379
   3881  9ddb		       20 84 94 	      jsr	W9484
   3882  9dde		       a6 62		      ldx	$62	; Floating point accumulator #1: Mantissa
   3883  9de0		       10 17		      bpl	W9DF9
   3884  9de2		       e8		      inx
   3885  9de3		       d0 0a		      bne	W9DEF
   3886  9de5		       a9 ec		      lda	#$EC
   3887  9de7		       a0 83		      ldy	#$83
   3888  9de9		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   3889  9dec		       4c ff 9d 	      jmp	W9DFF
   3890  9def
   3891  9def				   W9DEF
   3892  9def		       a9 f3		      lda	#$F3
   3893  9df1		       a0 83		      ldy	#$83
   3894  9df3		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   3895  9df6		       4c ff 9d 	      jmp	W9DFF
   3896  9df9
   3897  9df9				   W9DF9
   3898  9df9		       20 84 94 	      jsr	W9484
   3899  9dfc		       20 23 9a 	      jsr	W9A23
   3900  9dff				   W9DFF
   3901  9dff		       20 13 9b 	      jsr	W9B13
   3902  9e02		       a5 45		      lda	$45	; BASIC current variable name
   3903  9e04		       a6 46		      ldx	$46	; BASIC current variable name
   3904  9e06		       38		      sec
   3905  9e07		       e9 07		      sbc	#$07
   3906  9e09		       b0 01		      bcs	W9E0C
   3907  9e0b		       ca		      dex
   3908  9e0c				   W9E0C
   3909  9e0c		       a0 37		      ldy	#$37
   3910  9e0e		       84 01		      sty	$01	; 6510 I/O register
   3911  9e10				   W9E10
   3912  9e10		       4c 23 9d 	      jmp	W9D23
   3913  9e13
   3914  9e13		       a9 ff		      lda	#$FF
   3915  9e15		       a0 01		      ldy	#$01
   3916  9e17		       91 2b		      sta	($2B),y	; Pointer: BASIC starting programs
   3917  9e19		       20 33 a5 	      jsr	$A533	; Routine: Relink BASIC program
   3918  9e1c		       a5 22		      lda	$22	; Utility programs pointers area
   3919  9e1e		       a4 23		      ldy	$23	; Utility programs pointers area
   3920  9e20		       18		      clc
   3921  9e21		       69 02		      adc	#$02
   3922  9e23		       90 01		      bcc	W9E26
   3923  9e25		       c8		      iny
   3924  9e26				   W9E26
   3925  9e26		       85 2d		      sta	$2D	; Pointer: BASIC starting variables
   3926  9e28		       84 2e		      sty	$2E	; Pointer: BASIC starting variables
   3927  9e2a		       20 60 a6 	      jsr	$A660	; BASIC ROM
   3928  9e2d				   W9E2D
   3929  9e2d		       a9 3b		      lda	#$3B
   3930  9e2f		       a0 84		      ldy	#$84
   3931  9e31		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   3932  9e34		       ad 82 02 	      lda	$0282	; Pointer: Memory base for Operative System
   3933  9e37		       20 79 93 	      jsr	W9379
   3934  9e3a		       ad 81 02 	      lda	$0281	; Pointer: Memory base for Operative System
   3935  9e3d		       20 79 93 	      jsr	W9379
   3936  9e40		       a9 88		      lda	#$88
   3937  9e42		       a0 83		      ldy	#$83
   3938  9e44		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   3939  9e47		       a5 38		      lda	$38	; Pointer: BASIC ending memory
   3940  9e49		       20 79 93 	      jsr	W9379
   3941  9e4c		       a5 37		      lda	$37	; Pointer: BASIC ending memory
   3942  9e4e		       20 79 93 	      jsr	W9379
   3943  9e51		       a9 20		      lda	#$20
   3944  9e53		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   3945  9e56		       a9 28		      lda	#$28
   3946  9e58		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   3947  9e5b		       a5 37		      lda	$37	; Pointer: BASIC ending memory
   3948  9e5d		       38		      sec
   3949  9e5e		       ed 81 02 	      sbc	$0281	; Pointer: Memory base for Operative System
   3950  9e61		       a5 38		      lda	$38	; Pointer: BASIC ending memory
   3951  9e63		       ed 82 02 	      sbc	$0282	; Pointer: Memory base for Operative System
   3952  9e66		       4a		      lsr
   3953  9e67		       4a		      lsr
   3954  9e68		       aa		      tax
   3955  9e69		       a9 00		      lda	#$00
   3956  9e6b		       20 cd bd 	      jsr	$BDCD	; Routine: Write (AX) integer correspondenting string
   3957  9e6e		       a9 65		      lda	#$65
   3958  9e70		       a0 84		      ldy	#$84
   3959  9e72		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   3960  9e75		       a9 50		      lda	#$50
   3961  9e77		       a0 84		      ldy	#$84
   3962  9e79		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   3963  9e7c		       a5 2c		      lda	$2C	; Pointer: BASIC starting programs
   3964  9e7e		       20 79 93 	      jsr	W9379
   3965  9e81		       a5 2b		      lda	$2B	; Pointer: BASIC starting programs
   3966  9e83		       20 79 93 	      jsr	W9379
   3967  9e86		       a9 88		      lda	#$88
   3968  9e88		       a0 83		      ldy	#$83
   3969  9e8a		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   3970  9e8d		       a5 2e		      lda	$2E	; Pointer: BASIC starting variables
   3971  9e8f		       20 79 93 	      jsr	W9379
   3972  9e92		       a5 2d		      lda	$2D	; Pointer: BASIC starting variables
   3973  9e94		       20 79 93 	      jsr	W9379
   3974  9e97		       a9 20		      lda	#$20
   3975  9e99		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   3976  9e9c		       a9 28		      lda	#$28
   3977  9e9e		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   3978  9ea1		       a5 2d		      lda	$2D	; Pointer: BASIC starting variables
   3979  9ea3		       38		      sec
   3980  9ea4		       e5 2b		      sbc	$2B	; Pointer: BASIC starting programs
   3981  9ea6		       a5 2e		      lda	$2E	; Pointer: BASIC starting variables
   3982  9ea8		       e5 2c		      sbc	$2C	; Pointer: BASIC starting programs
   3983  9eaa		       4a		      lsr
   3984  9eab		       4a		      lsr
   3985  9eac		       aa		      tax
   3986  9ead		       a9 00		      lda	#$00
   3987  9eaf		       20 cd bd 	      jsr	$BDCD	; Routine: Write (AX) integer correspondenting string
   3988  9eb2		       a9 65		      lda	#$65
   3989  9eb4		       a0 84		      ldy	#$84
   3990  9eb6		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   3991  9eb9		       20 d7 aa 	      jsr	$AAD7	; Routine: Write return effect and/or advancement
   3992  9ebc		       a5 2d		      lda	$2D	; Pointer: BASIC starting variables
   3993  9ebe		       38		      sec
   3994  9ebf		       e5 2b		      sbc	$2B	; Pointer: BASIC starting programs
   3995  9ec1		       85 63		      sta	$63	; Floating point accumulator #1: Mantissa
   3996  9ec3		       a5 2e		      lda	$2E	; Pointer: BASIC starting variables
   3997  9ec5		       e5 2c		      sbc	$2C	; Pointer: BASIC starting programs
   3998  9ec7		       85 62		      sta	$62	; Floating point accumulator #1: Mantissa
   3999  9ec9		       20 23 9a 	      jsr	W9A23
   4000  9ecc		       a9 cc		      lda	#$CC
   4001  9ece		       a0 83		      ldy	#$83
   4002  9ed0		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   4003  9ed3		       a5 37		      lda	$37	; Pointer: BASIC ending memory
   4004  9ed5		       38		      sec
   4005  9ed6		       e5 2d		      sbc	$2D	; Pointer: BASIC starting variables
   4006  9ed8		       85 63		      sta	$63	; Floating point accumulator #1: Mantissa
   4007  9eda		       a5 38		      lda	$38	; Pointer: BASIC ending memory
   4008  9edc		       e5 2e		      sbc	$2E	; Pointer: BASIC starting variables
   4009  9ede		       85 62		      sta	$62	; Floating point accumulator #1: Mantissa
   4010  9ee0		       20 23 9a 	      jsr	W9A23
   4011  9ee3		       a9 66		      lda	#$66
   4012  9ee5		       a0 e4		      ldy	#$E4
   4013  9ee7		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   4014  9eea		       4c 37 85 	      jmp	W8537
   4015  9eed
   4016  9eed		       20 4c 92 	      jsr	W924C
   4017  9ef0		       a5 15		      lda	$15	; Transient: integer value
   4018  9ef2		       30 2d		      bmi	W9F21
   4019  9ef4		       e6 14		      inc	$14	; Transient: integer value
   4020  9ef6		       d0 02		      bne	W9EFA
   4021  9ef8		       e6 15		      inc	$15	; Transient: integer value
   4022  9efa				   W9EFA
   4023  9efa		       a5 14		      lda	$14	; Transient: integer value
   4024  9efc		       85 37		      sta	$37	; Pointer: BASIC ending memory
   4025  9efe		       a5 15		      lda	$15	; Transient: integer value
   4026  9f00		       85 38		      sta	$38	; Pointer: BASIC ending memory
   4027  9f02		       20 44 a6 	      jsr	$A644	; BASIC ROM
   4028  9f05		       4c 2d 9e 	      jmp	W9E2D
   4029  9f08
   4030  9f08		       20 9b b7 	      jsr	$B79B	; Routine: Holt Byte: Read and evaluate expression from BASIC text; the 1 byte value is then stored in X and in FAC+4
   4031  9f0b		       c9 2c		      cmp	#$2C
   4032  9f0d		       d0 12		      bne	W9F21
   4033  9f0f		       e0 02		      cpx	#$02
   4034  9f11		       b0 0e		      bcs	W9F21
   4035  9f13		       86 21		      stx	$21	; Transient strings stack
   4036  9f15		       20 9b b7 	      jsr	$B79B	; Routine: Holt Byte: Read and evaluate expression from BASIC text; the 1 byte value is then stored in X and in FAC+4
   4037  9f18		       a4 21		      ldy	$21	; Transient strings stack
   4038  9f1a		       8a		      txa
   4039  9f1b		       99 3e 03 	      sta	$033E,y	; Tape I/O buffer
   4040  9f1e		       4c 37 85 	      jmp	W8537
   4041  9f21
   4042  9f21				   W9F21
   4043  9f21		       4c 48 b2 	      jmp	$B248	; Routine: Write error message (ILLEGAL QUANTITY)
   4044  9f24
   4045  9f24		       a2 00		      ldx	#$00
   4046  9f26				   W9F26
   4047  9f26		       8a		      txa
   4048  9f27		       48		      pha
   4049  9f28		       a9 51		      lda	#$51
   4050  9f2a		       a0 83		      ldy	#$83
   4051  9f2c		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   4052  9f2f		       68		      pla
   4053  9f30		       aa		      tax
   4054  9f31		       48		      pha
   4055  9f32		       e0 0a		      cpx	#$0A
   4056  9f34		       b0 03		      bcs	W9F39
   4057  9f36		       20 84 94 	      jsr	W9484
   4058  9f39				   W9F39
   4059  9f39		       a9 00		      lda	#$00
   4060  9f3b		       20 cd bd 	      jsr	$BDCD	; Routine: Write (AX) integer correspondenting string
   4061  9f3e		       a9 57		      lda	#$57
   4062  9f40		       a0 83		      ldy	#$83
   4063  9f42		       20 1e ab 	      jsr	$AB1E	; Routine: Output string, which is indicated by YA, until 0 byte or quote is found
   4064  9f45		       68		      pla
   4065  9f46		       a8		      tay
   4066  9f47		       48		      pha
   4067  9f48		       b9 40 03 	      lda	$0340,y	; Tape I/O buffer
   4068  9f4b		       aa		      tax
   4069  9f4c		       b9 50 03 	      lda	$0350,y	; Tape I/O buffer
   4070  9f4f		       20 cd bd 	      jsr	$BDCD	; Routine: Write (AX) integer correspondenting string
   4071  9f52		       a9 2d		      lda	#$2D
   4072  9f54		       20 d2 ff 	      jsr	$FFD2	; Routine: Send a char in the channel
   4073  9f57		       68		      pla
   4074  9f58		       a8		      tay
   4075  9f59		       48		      pha
   4076  9f5a		       b9 60 03 	      lda	$0360,y	; Tape I/O buffer
   4077  9f5d		       aa		      tax
   4078  9f5e		       b9 70 03 	      lda	$0370,y	; Tape I/O buffer
   4079  9f61		       20 cd bd 	      jsr	$BDCD	; Routine: Write (AX) integer correspondenting string
   4080  9f64		       20 d7 aa 	      jsr	$AAD7	; Routine: Write return effect and/or advancement
   4081  9f67		       68		      pla
   4082  9f68		       aa		      tax
   4083  9f69		       e8		      inx
   4084  9f6a		       e0 10		      cpx	#$10
   4085  9f6c		       90 b8		      bcc	W9F26
   4086  9f6e		       4c 37 85 	      jmp	W8537
   4087  9f71
   4088  9f71		       a9 9f		      lda	#$9F
   4089  9f73		       48		      pha
   4090  9f74		       a9 80		      lda	#$80
   4091  9f76		       48		      pha
   4092  9f77		       a9 00		      lda	#$00
   4093  9f79		       48		      pha
   4094  9f7a		       48		      pha
   4095  9f7b		       48		      pha
   4096  9f7c		       48		      pha
   4097  9f7d		       4c 31 ea 	      jmp	$EA31	; Default hardware interrupt (IRQ)
   4098  9f80
   4099  9f80		       a6 c6		      ldx	$C6	; Number of char in keyboard buffer
   4100  9f82		       f0 1f		      beq	W9FA3
   4101  9f84		       ca		      dex
   4102  9f85		       bd 77 02 	      lda	$0277,x	; Keyboard buffer queue (FIFO)
   4103  9f88		       c9 85		      cmp	#$85
   4104  9f8a		       90 17		      bcc	W9FA3
   4105  9f8c		       c9 8d		      cmp	#$8D
   4106  9f8e		       b0 13		      bcs	W9FA3
   4107  9f90		       38		      sec
   4108  9f91		       e9 85		      sbc	#$85
   4109  9f93		       a8		      tay
   4110  9f94		       b9 a6 9f 	      lda	W9FA6,y
   4111  9f97		       9d 77 02 	      sta	$0277,x	; Keyboard buffer queue (FIFO)
   4112  9f9a		       e8		      inx
   4113  9f9b		       a9 0d		      lda	#$0D
   4114  9f9d		       9d 77 02 	      sta	$0277,x	; Keyboard buffer queue (FIFO)
   4115  9fa0		       e8		      inx
   4116  9fa1		       86 c6		      stx	$C6	; Number of char in keyboard buffer
   4117  9fa3				   W9FA3
   4118  9fa3		       4c 81 ea 	      jmp	$EA81
   4119  9fa6
   4120  9fa6				   W9FA6
   4121  9fa6		       45 58		      eor	$58	; Scratch for numeric operation
   4122  9fa8		       4c 49 42 	      jmp	$4249
   4123  9fab
   4124  9fab		       59 4f 40 	      eor	$404F,y
   4125  9fae				   NMI
   4126  9fae		       20 bc f6 	      jsr	$F6BC	; Routine: Verifies pressure STOP/RVS keys
   4127  9fb1		       20 e1 ff 	      jsr	$FFE1	; Routine: Terminate the keyboard scan
   4128  9fb4		       f0 03		      beq	W9FB9
   4129  9fb6		       4c bc fe 	      jmp	$FEBC	; Restores cpu registers and goes out from interrupt
   4130  9fb9
   4131  9fb9				   W9FB9
   4132  9fb9		       20 15 fd 	      jsr	$FD15	; Routine RESTOR of KERNAL
   4133  9fbc		       a9 71		      lda	#$71
   4134  9fbe		       a2 9f		      ldx	#$9F
   4135  9fc0		       8e 15 03 	      stx	$0315	; Vector: Hardware Interrupt (IRQ)
   4136  9fc3		       8d 14 03 	      sta	$0314	; Vector: Hardware Interrupt (IRQ)
   4137  9fc6		       ad 00 dd 	      lda	$DD00	; Data port A #2: serial bus, RS-232, VIC memory
   4138  9fc9		       48		      pha
   4139  9fca		       20 a3 fd 	      jsr	$FDA3
   4140  9fcd		       68		      pla
   4141  9fce		       8d 00 dd 	      sta	$DD00	; Data port A #2: serial bus, RS-232, VIC memory
   4142  9fd1		       ad 18 d0 	      lda	$D018	; VIC memory control register
   4143  9fd4		       48		      pha
   4144  9fd5		       20 a0 e5 	      jsr	$E5A0	; Routine: Set VIC6567 registers and devices
   4145  9fd8		       68		      pla
   4146  9fd9		       8d 18 d0 	      sta	$D018	; VIC memory control register
   4147  9fdc		       a9 00		      lda	#$00
   4148  9fde		       8d 91 02 	      sta	$0291	; Flag: mode SHIFT: 00=Disable case 0x80=Enable
   4149  9fe1		       85 cf		      sta	$CF	; Flag: Last cursore state (Flash/fixed)
   4150  9fe3		       a9 48		      lda	#$48
   4151  9fe5		       a2 eb		      ldx	#$EB
   4152  9fe7		       8e 90 02 	      stx	$0290	; Vector: keyboard table preparation
   4153  9fea		       8d 8f 02 	      sta	$028F	; Vector: keyboard table preparation
   4154  9fed		       a9 04		      lda	#$04
   4155  9fef		       8d 8b 02 	      sta	$028B	; Repeat velocity counter
   4156  9ff2		       a9 0a		      lda	#$0A
   4157  9ff4		       8d 89 02 	      sta	$0289	; Keyboard buffer misure
   4158  9ff7		       8d 8c 02 	      sta	$028C	; Repeat delay counter
   4159  9ffa		       20 34 e5 	      jsr	$E534
   4160  9ffd		       6c 02 a0 	      jmp	($A002)	; Routine Vector: close canal, start up
